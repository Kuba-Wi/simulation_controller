
simulation_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000992c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08009ac0  08009ac0  00019ac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f14  08009f14  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009f14  08009f14  00019f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f1c  08009f1c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f1c  08009f1c  00019f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f20  08009f20  00019f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001dc  0800a100  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  0800a100  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016603  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb2  00000000  00000000  0003680f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  000393c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  0003a2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002979f  00000000  00000000  0003b070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001218e  00000000  00000000  0006480f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe9ad  00000000  00000000  0007699d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017534a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d3c  00000000  00000000  001753a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009aa4 	.word	0x08009aa4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009aa4 	.word	0x08009aa4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ec2:	4b35      	ldr	r3, [pc, #212]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ec4:	4a35      	ldr	r2, [pc, #212]	; (8000f9c <MX_ADC1_Init+0xfc>)
 8000ec6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ec8:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ece:	4b32      	ldr	r3, [pc, #200]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed4:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eda:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee0:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eec:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000ef2:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f06:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f22:	481d      	ldr	r0, [pc, #116]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f24:	f001 f84e 	bl	8001fc4 <HAL_ADC_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000f2e:	f000 fb30 	bl	8001592 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4816      	ldr	r0, [pc, #88]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f3e:	f002 fc19 	bl	8003774 <HAL_ADCEx_MultiModeConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f48:	f000 fb23 	bl	8001592 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f4e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f50:	2306      	movs	r3, #6
 8000f52:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000f54:	2305      	movs	r3, #5
 8000f56:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f58:	237f      	movs	r3, #127	; 0x7f
 8000f5a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	4619      	mov	r1, r3
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f6a:	f001 fdb5 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000f74:	f000 fb0d 	bl	8001592 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f78:	230c      	movs	r3, #12
 8000f7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f82:	f001 fda9 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000f8c:	f000 fb01 	bl	8001592 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	; 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000278 	.word	0x20000278
 8000f9c:	50040000 	.word	0x50040000
 8000fa0:	04300002 	.word	0x04300002

08000fa4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000faa:	463b      	mov	r3, r7
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
 8000fb8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000fba:	4b29      	ldr	r3, [pc, #164]	; (8001060 <MX_ADC2_Init+0xbc>)
 8000fbc:	4a29      	ldr	r2, [pc, #164]	; (8001064 <MX_ADC2_Init+0xc0>)
 8000fbe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fc0:	4b27      	ldr	r3, [pc, #156]	; (8001060 <MX_ADC2_Init+0xbc>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc6:	4b26      	ldr	r3, [pc, #152]	; (8001060 <MX_ADC2_Init+0xbc>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <MX_ADC2_Init+0xbc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fd2:	4b23      	ldr	r3, [pc, #140]	; (8001060 <MX_ADC2_Init+0xbc>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd8:	4b21      	ldr	r3, [pc, #132]	; (8001060 <MX_ADC2_Init+0xbc>)
 8000fda:	2204      	movs	r2, #4
 8000fdc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <MX_ADC2_Init+0xbc>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000fe4:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <MX_ADC2_Init+0xbc>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000fea:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <MX_ADC2_Init+0xbc>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <MX_ADC2_Init+0xbc>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <MX_ADC2_Init+0xbc>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <MX_ADC2_Init+0xbc>)
 8001000:	2200      	movs	r2, #0
 8001002:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <MX_ADC2_Init+0xbc>)
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <MX_ADC2_Init+0xbc>)
 800100e:	2200      	movs	r2, #0
 8001010:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <MX_ADC2_Init+0xbc>)
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800101a:	4811      	ldr	r0, [pc, #68]	; (8001060 <MX_ADC2_Init+0xbc>)
 800101c:	f000 ffd2 	bl	8001fc4 <HAL_ADC_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8001026:	f000 fab4 	bl	8001592 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_ADC2_Init+0xc4>)
 800102c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800102e:	2306      	movs	r3, #6
 8001030:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001032:	2305      	movs	r3, #5
 8001034:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001036:	237f      	movs	r3, #127	; 0x7f
 8001038:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800103a:	2304      	movs	r3, #4
 800103c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001042:	463b      	mov	r3, r7
 8001044:	4619      	mov	r1, r3
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <MX_ADC2_Init+0xbc>)
 8001048:	f001 fd46 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8001052:	f000 fa9e 	bl	8001592 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000214 	.word	0x20000214
 8001064:	50040100 	.word	0x50040100
 8001068:	3ef08000 	.word	0x3ef08000

0800106c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a50      	ldr	r2, [pc, #320]	; (80011cc <HAL_ADC_MspInit+0x160>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d160      	bne.n	8001150 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800108e:	4b50      	ldr	r3, [pc, #320]	; (80011d0 <HAL_ADC_MspInit+0x164>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3301      	adds	r3, #1
 8001094:	4a4e      	ldr	r2, [pc, #312]	; (80011d0 <HAL_ADC_MspInit+0x164>)
 8001096:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001098:	4b4d      	ldr	r3, [pc, #308]	; (80011d0 <HAL_ADC_MspInit+0x164>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d10b      	bne.n	80010b8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80010a0:	4b4c      	ldr	r3, [pc, #304]	; (80011d4 <HAL_ADC_MspInit+0x168>)
 80010a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a4:	4a4b      	ldr	r2, [pc, #300]	; (80011d4 <HAL_ADC_MspInit+0x168>)
 80010a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ac:	4b49      	ldr	r3, [pc, #292]	; (80011d4 <HAL_ADC_MspInit+0x168>)
 80010ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010b4:	61bb      	str	r3, [r7, #24]
 80010b6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b8:	4b46      	ldr	r3, [pc, #280]	; (80011d4 <HAL_ADC_MspInit+0x168>)
 80010ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010bc:	4a45      	ldr	r2, [pc, #276]	; (80011d4 <HAL_ADC_MspInit+0x168>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c4:	4b43      	ldr	r3, [pc, #268]	; (80011d4 <HAL_ADC_MspInit+0x168>)
 80010c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010d0:	2301      	movs	r3, #1
 80010d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010d4:	230b      	movs	r3, #11
 80010d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	483d      	ldr	r0, [pc, #244]	; (80011d8 <HAL_ADC_MspInit+0x16c>)
 80010e4:	f002 ff7e 	bl	8003fe4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80010e8:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <HAL_ADC_MspInit+0x170>)
 80010ea:	4a3d      	ldr	r2, [pc, #244]	; (80011e0 <HAL_ADC_MspInit+0x174>)
 80010ec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80010ee:	4b3b      	ldr	r3, [pc, #236]	; (80011dc <HAL_ADC_MspInit+0x170>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010f4:	4b39      	ldr	r3, [pc, #228]	; (80011dc <HAL_ADC_MspInit+0x170>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010fa:	4b38      	ldr	r3, [pc, #224]	; (80011dc <HAL_ADC_MspInit+0x170>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001100:	4b36      	ldr	r3, [pc, #216]	; (80011dc <HAL_ADC_MspInit+0x170>)
 8001102:	2280      	movs	r2, #128	; 0x80
 8001104:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001106:	4b35      	ldr	r3, [pc, #212]	; (80011dc <HAL_ADC_MspInit+0x170>)
 8001108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800110c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800110e:	4b33      	ldr	r3, [pc, #204]	; (80011dc <HAL_ADC_MspInit+0x170>)
 8001110:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001114:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001116:	4b31      	ldr	r3, [pc, #196]	; (80011dc <HAL_ADC_MspInit+0x170>)
 8001118:	2220      	movs	r2, #32
 800111a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800111c:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <HAL_ADC_MspInit+0x170>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001122:	482e      	ldr	r0, [pc, #184]	; (80011dc <HAL_ADC_MspInit+0x170>)
 8001124:	f002 fce8 	bl	8003af8 <HAL_DMA_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800112e:	f000 fa30 	bl	8001592 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a29      	ldr	r2, [pc, #164]	; (80011dc <HAL_ADC_MspInit+0x170>)
 8001136:	64da      	str	r2, [r3, #76]	; 0x4c
 8001138:	4a28      	ldr	r2, [pc, #160]	; (80011dc <HAL_ADC_MspInit+0x170>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	2012      	movs	r0, #18
 8001144:	f002 fca1 	bl	8003a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001148:	2012      	movs	r0, #18
 800114a:	f002 fcba 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800114e:	e039      	b.n	80011c4 <HAL_ADC_MspInit+0x158>
  else if(adcHandle->Instance==ADC2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a23      	ldr	r2, [pc, #140]	; (80011e4 <HAL_ADC_MspInit+0x178>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d134      	bne.n	80011c4 <HAL_ADC_MspInit+0x158>
    HAL_RCC_ADC_CLK_ENABLED++;
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_ADC_MspInit+0x164>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	3301      	adds	r3, #1
 8001160:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <HAL_ADC_MspInit+0x164>)
 8001162:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <HAL_ADC_MspInit+0x164>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d10b      	bne.n	8001184 <HAL_ADC_MspInit+0x118>
      __HAL_RCC_ADC_CLK_ENABLE();
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_ADC_MspInit+0x168>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001170:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <HAL_ADC_MspInit+0x168>)
 8001172:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001176:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_ADC_MspInit+0x168>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <HAL_ADC_MspInit+0x168>)
 8001186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001188:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <HAL_ADC_MspInit+0x168>)
 800118a:	f043 0302 	orr.w	r3, r3, #2
 800118e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <HAL_ADC_MspInit+0x168>)
 8001192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800119c:	2301      	movs	r3, #1
 800119e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011a0:	230b      	movs	r3, #11
 80011a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	480e      	ldr	r0, [pc, #56]	; (80011e8 <HAL_ADC_MspInit+0x17c>)
 80011b0:	f002 ff18 	bl	8003fe4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2100      	movs	r1, #0
 80011b8:	2012      	movs	r0, #18
 80011ba:	f002 fc66 	bl	8003a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011be:	2012      	movs	r0, #18
 80011c0:	f002 fc7f 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
}
 80011c4:	bf00      	nop
 80011c6:	3730      	adds	r7, #48	; 0x30
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	50040000 	.word	0x50040000
 80011d0:	200001f8 	.word	0x200001f8
 80011d4:	40021000 	.word	0x40021000
 80011d8:	48000800 	.word	0x48000800
 80011dc:	200002dc 	.word	0x200002dc
 80011e0:	40020008 	.word	0x40020008
 80011e4:	50040100 	.word	0x50040100
 80011e8:	48000400 	.word	0x48000400

080011ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_DMA_Init+0x38>)
 80011f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <MX_DMA_Init+0x38>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6493      	str	r3, [r2, #72]	; 0x48
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_DMA_Init+0x38>)
 8001200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	200b      	movs	r0, #11
 8001210:	f002 fc3b 	bl	8003a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001214:	200b      	movs	r0, #11
 8001216:	f002 fc54 	bl	8003ac2 <HAL_NVIC_EnableIRQ>

}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000

08001228 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <MX_GPIO_Init+0x90>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	4a1d      	ldr	r2, [pc, #116]	; (80012b8 <MX_GPIO_Init+0x90>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124a:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_GPIO_Init+0x90>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_GPIO_Init+0x90>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a17      	ldr	r2, [pc, #92]	; (80012b8 <MX_GPIO_Init+0x90>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_GPIO_Init+0x90>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MX_GPIO_Init+0x90>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	4a11      	ldr	r2, [pc, #68]	; (80012b8 <MX_GPIO_Init+0x90>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_GPIO_Init+0x90>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2120      	movs	r1, #32
 800128a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128e:	f003 f853 	bl	8004338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001292:	2320      	movs	r3, #32
 8001294:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001296:	2301      	movs	r3, #1
 8001298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	4619      	mov	r1, r3
 80012a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ac:	f002 fe9a 	bl	8003fe4 <HAL_GPIO_Init>

}
 80012b0:	bf00      	nop
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000

080012bc <_write>:
volatile uint16_t pot_value = 0;
volatile int uart_recv_flag = 0;
const uint16_t recv_buf_size = 16;
uint8_t uart_recv_buf[16];

int _write(int file, char* ptr, int len) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 50);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	2332      	movs	r3, #50	; 0x32
 80012ce:	68b9      	ldr	r1, [r7, #8]
 80012d0:	4803      	ldr	r0, [pc, #12]	; (80012e0 <_write+0x24>)
 80012d2:	f004 fbcf 	bl	8005a74 <HAL_UART_Transmit>
	return len;
 80012d6:	687b      	ldr	r3, [r7, #4]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200003b8 	.word	0x200003b8

080012e4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc2) {
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a08      	ldr	r2, [pc, #32]	; (8001310 <HAL_ADC_ConvCpltCallback+0x2c>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d109      	bne.n	8001308 <HAL_ADC_ConvCpltCallback+0x24>
		pot_flag = 1;
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <HAL_ADC_ConvCpltCallback+0x30>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]
		pot_value = HAL_ADC_GetValue(hadc);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f001 f9a6 	bl	800264c <HAL_ADC_GetValue>
 8001300:	4603      	mov	r3, r0
 8001302:	b29a      	uxth	r2, r3
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <HAL_ADC_ConvCpltCallback+0x34>)
 8001306:	801a      	strh	r2, [r3, #0]
	}
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000214 	.word	0x20000214
 8001314:	200001fc 	.word	0x200001fc
 8001318:	20000200 	.word	0x20000200

0800131c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <HAL_UART_RxCpltCallback+0x2c>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d108      	bne.n	800133e <HAL_UART_RxCpltCallback+0x22>
		uart_recv_flag = 1;
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <HAL_UART_RxCpltCallback+0x30>)
 800132e:	2201      	movs	r2, #1
 8001330:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, uart_recv_buf, recv_buf_size);
 8001332:	2310      	movs	r3, #16
 8001334:	461a      	mov	r2, r3
 8001336:	4906      	ldr	r1, [pc, #24]	; (8001350 <HAL_UART_RxCpltCallback+0x34>)
 8001338:	4803      	ldr	r0, [pc, #12]	; (8001348 <HAL_UART_RxCpltCallback+0x2c>)
 800133a:	f004 fc2f 	bl	8005b9c <HAL_UART_Receive_IT>
	}
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000334 	.word	0x20000334
 800134c:	20000204 	.word	0x20000204
 8001350:	20000324 	.word	0x20000324

08001354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135a:	f000 fb7e 	bl	8001a5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135e:	f000 f89b 	bl	8001498 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001362:	f000 f8eb 	bl	800153c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001366:	f7ff ff5f 	bl	8001228 <MX_GPIO_Init>
  MX_DMA_Init();
 800136a:	f7ff ff3f 	bl	80011ec <MX_DMA_Init>
  MX_ADC1_Init();
 800136e:	f7ff fd97 	bl	8000ea0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001372:	f000 fa6f 	bl	8001854 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8001376:	f7ff fe15 	bl	8000fa4 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 800137a:	f000 fa3b 	bl	80017f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint16_t joystick;
  const uint16_t buf_size = 4;
 800137e:	2304      	movs	r3, #4
 8001380:	83fb      	strh	r3, [r7, #30]
  uint8_t bluetooth_buf[buf_size];
 8001382:	8bfb      	ldrh	r3, [r7, #30]
 8001384:	3b01      	subs	r3, #1
 8001386:	61bb      	str	r3, [r7, #24]
 8001388:	8bf8      	ldrh	r0, [r7, #30]
 800138a:	f04f 0100 	mov.w	r1, #0
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	00cb      	lsls	r3, r1, #3
 8001398:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800139c:	00c2      	lsls	r2, r0, #3
 800139e:	8bf8      	ldrh	r0, [r7, #30]
 80013a0:	f04f 0100 	mov.w	r1, #0
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	f04f 0300 	mov.w	r3, #0
 80013ac:	00cb      	lsls	r3, r1, #3
 80013ae:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80013b2:	00c2      	lsls	r2, r0, #3
 80013b4:	8bfb      	ldrh	r3, [r7, #30]
 80013b6:	3307      	adds	r3, #7
 80013b8:	08db      	lsrs	r3, r3, #3
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	ebad 0d03 	sub.w	sp, sp, r3
 80013c0:	ab02      	add	r3, sp, #8
 80013c2:	3300      	adds	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80013c6:	217f      	movs	r1, #127	; 0x7f
 80013c8:	482a      	ldr	r0, [pc, #168]	; (8001474 <main+0x120>)
 80013ca:	f002 f941 	bl	8003650 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&joystick, 2);
 80013ce:	f107 0312 	add.w	r3, r7, #18
 80013d2:	2202      	movs	r2, #2
 80013d4:	4619      	mov	r1, r3
 80013d6:	4827      	ldr	r0, [pc, #156]	; (8001474 <main+0x120>)
 80013d8:	f001 f87c 	bl	80024d4 <HAL_ADC_Start_DMA>

  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80013dc:	217f      	movs	r1, #127	; 0x7f
 80013de:	4826      	ldr	r0, [pc, #152]	; (8001478 <main+0x124>)
 80013e0:	f002 f936 	bl	8003650 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc2);
 80013e4:	4824      	ldr	r0, [pc, #144]	; (8001478 <main+0x124>)
 80013e6:	f000 ff43 	bl	8002270 <HAL_ADC_Start_IT>

  HAL_UART_Receive_IT(&huart1, uart_recv_buf, recv_buf_size);
 80013ea:	2310      	movs	r3, #16
 80013ec:	461a      	mov	r2, r3
 80013ee:	4923      	ldr	r1, [pc, #140]	; (800147c <main+0x128>)
 80013f0:	4823      	ldr	r0, [pc, #140]	; (8001480 <main+0x12c>)
 80013f2:	f004 fbd3 	bl	8005b9c <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (pot_flag == 1) {
 80013f6:	4b23      	ldr	r3, [pc, #140]	; (8001484 <main+0x130>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d114      	bne.n	8001428 <main+0xd4>
		  pot_flag = 0;
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <main+0x130>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

		  memcpy(bluetooth_buf, (uint16_t*)&pot_value, sizeof(pot_value));
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	4a20      	ldr	r2, [pc, #128]	; (8001488 <main+0x134>)
 8001408:	8812      	ldrh	r2, [r2, #0]
 800140a:	b292      	uxth	r2, r2
 800140c:	801a      	strh	r2, [r3, #0]
		  memcpy(&bluetooth_buf[2], &joystick, sizeof(joystick));
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3302      	adds	r3, #2
 8001412:	8a7a      	ldrh	r2, [r7, #18]
 8001414:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, bluetooth_buf, buf_size, 50);
 8001416:	6979      	ldr	r1, [r7, #20]
 8001418:	8bfa      	ldrh	r2, [r7, #30]
 800141a:	2332      	movs	r3, #50	; 0x32
 800141c:	4818      	ldr	r0, [pc, #96]	; (8001480 <main+0x12c>)
 800141e:	f004 fb29 	bl	8005a74 <HAL_UART_Transmit>

		  HAL_ADC_Start_IT(&hadc2);
 8001422:	4815      	ldr	r0, [pc, #84]	; (8001478 <main+0x124>)
 8001424:	f000 ff24 	bl	8002270 <HAL_ADC_Start_IT>
	  }
	  if (uart_recv_flag == 1) {
 8001428:	4b18      	ldr	r3, [pc, #96]	; (800148c <main+0x138>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d11c      	bne.n	800146a <main+0x116>
		  uart_recv_flag = 0;
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <main+0x138>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001436:	2120      	movs	r1, #32
 8001438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143c:	f002 ff94 	bl	8004368 <HAL_GPIO_TogglePin>
		  acc_data[0] = *(double*)uart_recv_buf;
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <main+0x128>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	e9c7 2300 	strd	r2, r3, [r7]
		  acc_data[1] = *(double*)(&uart_recv_buf[8]);
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <main+0x13c>)
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	e9c7 2302 	strd	r2, r3, [r7, #8]

		  printf("acceleration: %f, angular velocity: %f\r\n", acc_data[0], acc_data[1]);
 8001454:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001458:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800145c:	e9cd 2300 	strd	r2, r3, [sp]
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	480b      	ldr	r0, [pc, #44]	; (8001494 <main+0x140>)
 8001466:	f006 fa9f 	bl	80079a8 <iprintf>
	  }

	  HAL_Delay(50);
 800146a:	2032      	movs	r0, #50	; 0x32
 800146c:	f000 fb6a 	bl	8001b44 <HAL_Delay>
	  if (pot_flag == 1) {
 8001470:	e7c1      	b.n	80013f6 <main+0xa2>
 8001472:	bf00      	nop
 8001474:	20000278 	.word	0x20000278
 8001478:	20000214 	.word	0x20000214
 800147c:	20000324 	.word	0x20000324
 8001480:	20000334 	.word	0x20000334
 8001484:	200001fc 	.word	0x200001fc
 8001488:	20000200 	.word	0x20000200
 800148c:	20000204 	.word	0x20000204
 8001490:	2000032c 	.word	0x2000032c
 8001494:	08009ac0 	.word	0x08009ac0

08001498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b096      	sub	sp, #88	; 0x58
 800149c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	2244      	movs	r2, #68	; 0x44
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f005 fe0c 	bl	80070c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ac:	463b      	mov	r3, r7
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014be:	f002 ff7b 	bl	80043b8 <HAL_PWREx_ControlVoltageScaling>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014c8:	f000 f863 	bl	8001592 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014cc:	2310      	movs	r3, #16
 80014ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014d0:	2301      	movs	r3, #1
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014d8:	2360      	movs	r3, #96	; 0x60
 80014da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014dc:	2302      	movs	r3, #2
 80014de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014e0:	2301      	movs	r3, #1
 80014e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80014e8:	2328      	movs	r3, #40	; 0x28
 80014ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014ec:	2307      	movs	r3, #7
 80014ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014f0:	2302      	movs	r3, #2
 80014f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 ffb1 	bl	8004464 <HAL_RCC_OscConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001508:	f000 f843 	bl	8001592 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150c:	230f      	movs	r3, #15
 800150e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001510:	2303      	movs	r3, #3
 8001512:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001514:	2300      	movs	r3, #0
 8001516:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001520:	463b      	mov	r3, r7
 8001522:	2104      	movs	r1, #4
 8001524:	4618      	mov	r0, r3
 8001526:	f003 fb77 	bl	8004c18 <HAL_RCC_ClockConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001530:	f000 f82f 	bl	8001592 <Error_Handler>
  }
}
 8001534:	bf00      	nop
 8001536:	3758      	adds	r7, #88	; 0x58
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b0a2      	sub	sp, #136	; 0x88
 8001540:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001542:	463b      	mov	r3, r7
 8001544:	2288      	movs	r2, #136	; 0x88
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f005 fdbb 	bl	80070c4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800154e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001552:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001554:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001558:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800155a:	2301      	movs	r3, #1
 800155c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800155e:	2301      	movs	r3, #1
 8001560:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001562:	2310      	movs	r3, #16
 8001564:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001566:	2307      	movs	r3, #7
 8001568:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800156a:	2302      	movs	r3, #2
 800156c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800156e:	2302      	movs	r3, #2
 8001570:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001572:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001576:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001578:	463b      	mov	r3, r7
 800157a:	4618      	mov	r0, r3
 800157c:	f003 fd70 	bl	8005060 <HAL_RCCEx_PeriphCLKConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8001586:	f000 f804 	bl	8001592 <Error_Handler>
  }
}
 800158a:	bf00      	nop
 800158c:	3788      	adds	r7, #136	; 0x88
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001596:	b672      	cpsid	i
}
 8001598:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159a:	e7fe      	b.n	800159a <Error_Handler+0x8>

0800159c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <HAL_MspInit+0x44>)
 80015a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a6:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <HAL_MspInit+0x44>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6613      	str	r3, [r2, #96]	; 0x60
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <HAL_MspInit+0x44>)
 80015b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_MspInit+0x44>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015be:	4a08      	ldr	r2, [pc, #32]	; (80015e0 <HAL_MspInit+0x44>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c4:	6593      	str	r3, [r2, #88]	; 0x58
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_MspInit+0x44>)
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <NMI_Handler+0x4>

080015ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <MemManage_Handler+0x4>

080015f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <UsageFault_Handler+0x4>

08001602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001630:	f000 fa68 	bl	8001b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <DMA1_Channel1_IRQHandler+0x10>)
 800163e:	f002 fbf2 	bl	8003e26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200002dc 	.word	0x200002dc

0800164c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001650:	4803      	ldr	r0, [pc, #12]	; (8001660 <ADC1_2_IRQHandler+0x14>)
 8001652:	f001 f809 	bl	8002668 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001656:	4803      	ldr	r0, [pc, #12]	; (8001664 <ADC1_2_IRQHandler+0x18>)
 8001658:	f001 f806 	bl	8002668 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000278 	.word	0x20000278
 8001664:	20000214 	.word	0x20000214

08001668 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <USART1_IRQHandler+0x10>)
 800166e:	f004 faeb 	bl	8005c48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000334 	.word	0x20000334

0800167c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
	return 1;
 8001680:	2301      	movs	r3, #1
}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <_kill>:

int _kill(int pid, int sig)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001696:	f005 fceb 	bl	8007070 <__errno>
 800169a:	4603      	mov	r3, r0
 800169c:	2216      	movs	r2, #22
 800169e:	601a      	str	r2, [r3, #0]
	return -1;
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <_exit>:

void _exit (int status)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ffe7 	bl	800168c <_kill>
	while (1) {}		/* Make sure we hang here */
 80016be:	e7fe      	b.n	80016be <_exit+0x12>

080016c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	e00a      	b.n	80016e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016d2:	f3af 8000 	nop.w
 80016d6:	4601      	mov	r1, r0
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	60ba      	str	r2, [r7, #8]
 80016de:	b2ca      	uxtb	r2, r1
 80016e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	3301      	adds	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	dbf0      	blt.n	80016d2 <_read+0x12>
	}

return len;
 80016f0:	687b      	ldr	r3, [r7, #4]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <_close>:
	}
	return len;
}

int _close(int file)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
	return -1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001722:	605a      	str	r2, [r3, #4]
	return 0;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <_isatty>:

int _isatty(int file)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
	return 1;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
	return 0;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800176c:	4a14      	ldr	r2, [pc, #80]	; (80017c0 <_sbrk+0x5c>)
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <_sbrk+0x60>)
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <_sbrk+0x64>)
 8001782:	4a12      	ldr	r2, [pc, #72]	; (80017cc <_sbrk+0x68>)
 8001784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	429a      	cmp	r2, r3
 8001792:	d207      	bcs.n	80017a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001794:	f005 fc6c 	bl	8007070 <__errno>
 8001798:	4603      	mov	r3, r0
 800179a:	220c      	movs	r2, #12
 800179c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017a2:	e009      	b.n	80017b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <_sbrk+0x64>)
 80017b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017b6:	68fb      	ldr	r3, [r7, #12]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20018000 	.word	0x20018000
 80017c4:	00000400 	.word	0x00000400
 80017c8:	20000208 	.word	0x20000208
 80017cc:	20000450 	.word	0x20000450

080017d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <SystemInit+0x20>)
 80017d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <SystemInit+0x20>)
 80017dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_USART1_UART_Init+0x58>)
 80017fa:	4a15      	ldr	r2, [pc, #84]	; (8001850 <MX_USART1_UART_Init+0x5c>)
 80017fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <MX_USART1_UART_Init+0x58>)
 8001800:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001804:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_USART1_UART_Init+0x58>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_USART1_UART_Init+0x58>)
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_USART1_UART_Init+0x58>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_USART1_UART_Init+0x58>)
 800181a:	220c      	movs	r2, #12
 800181c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <MX_USART1_UART_Init+0x58>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_USART1_UART_Init+0x58>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <MX_USART1_UART_Init+0x58>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <MX_USART1_UART_Init+0x58>)
 8001832:	2200      	movs	r2, #0
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_USART1_UART_Init+0x58>)
 8001838:	f004 f8ce 	bl	80059d8 <HAL_UART_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001842:	f7ff fea6 	bl	8001592 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000334 	.word	0x20000334
 8001850:	40013800 	.word	0x40013800

08001854 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <MX_USART2_UART_Init+0x58>)
 800185a:	4a15      	ldr	r2, [pc, #84]	; (80018b0 <MX_USART2_UART_Init+0x5c>)
 800185c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <MX_USART2_UART_Init+0x58>)
 8001860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001864:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_USART2_UART_Init+0x58>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_USART2_UART_Init+0x58>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <MX_USART2_UART_Init+0x58>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MX_USART2_UART_Init+0x58>)
 800187a:	220c      	movs	r2, #12
 800187c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <MX_USART2_UART_Init+0x58>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <MX_USART2_UART_Init+0x58>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <MX_USART2_UART_Init+0x58>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MX_USART2_UART_Init+0x58>)
 8001892:	2200      	movs	r2, #0
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_USART2_UART_Init+0x58>)
 8001898:	f004 f89e 	bl	80059d8 <HAL_UART_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018a2:	f7ff fe76 	bl	8001592 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200003b8 	.word	0x200003b8
 80018b0:	40004400 	.word	0x40004400

080018b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b0ae      	sub	sp, #184	; 0xb8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	2288      	movs	r2, #136	; 0x88
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f005 fbf5 	bl	80070c4 <memset>
  if(uartHandle->Instance==USART1)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a47      	ldr	r2, [pc, #284]	; (80019fc <HAL_UART_MspInit+0x148>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d145      	bne.n	8001970 <HAL_UART_MspInit+0xbc>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018e4:	2301      	movs	r3, #1
 80018e6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018e8:	2300      	movs	r3, #0
 80018ea:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4618      	mov	r0, r3
 80018f2:	f003 fbb5 	bl	8005060 <HAL_RCCEx_PeriphCLKConfig>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018fc:	f7ff fe49 	bl	8001592 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001900:	4b3f      	ldr	r3, [pc, #252]	; (8001a00 <HAL_UART_MspInit+0x14c>)
 8001902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001904:	4a3e      	ldr	r2, [pc, #248]	; (8001a00 <HAL_UART_MspInit+0x14c>)
 8001906:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800190a:	6613      	str	r3, [r2, #96]	; 0x60
 800190c:	4b3c      	ldr	r3, [pc, #240]	; (8001a00 <HAL_UART_MspInit+0x14c>)
 800190e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001918:	4b39      	ldr	r3, [pc, #228]	; (8001a00 <HAL_UART_MspInit+0x14c>)
 800191a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191c:	4a38      	ldr	r2, [pc, #224]	; (8001a00 <HAL_UART_MspInit+0x14c>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001924:	4b36      	ldr	r3, [pc, #216]	; (8001a00 <HAL_UART_MspInit+0x14c>)
 8001926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001930:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001934:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001944:	2303      	movs	r3, #3
 8001946:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800194a:	2307      	movs	r3, #7
 800194c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001954:	4619      	mov	r1, r3
 8001956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195a:	f002 fb43 	bl	8003fe4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2100      	movs	r1, #0
 8001962:	2025      	movs	r0, #37	; 0x25
 8001964:	f002 f891 	bl	8003a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001968:	2025      	movs	r0, #37	; 0x25
 800196a:	f002 f8aa 	bl	8003ac2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800196e:	e040      	b.n	80019f2 <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a23      	ldr	r2, [pc, #140]	; (8001a04 <HAL_UART_MspInit+0x150>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d13b      	bne.n	80019f2 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800197a:	2302      	movs	r3, #2
 800197c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800197e:	2300      	movs	r3, #0
 8001980:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001982:	f107 031c 	add.w	r3, r7, #28
 8001986:	4618      	mov	r0, r3
 8001988:	f003 fb6a 	bl	8005060 <HAL_RCCEx_PeriphCLKConfig>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001992:	f7ff fdfe 	bl	8001592 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <HAL_UART_MspInit+0x14c>)
 8001998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199a:	4a19      	ldr	r2, [pc, #100]	; (8001a00 <HAL_UART_MspInit+0x14c>)
 800199c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a0:	6593      	str	r3, [r2, #88]	; 0x58
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_UART_MspInit+0x14c>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <HAL_UART_MspInit+0x14c>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	4a13      	ldr	r2, [pc, #76]	; (8001a00 <HAL_UART_MspInit+0x14c>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ba:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <HAL_UART_MspInit+0x14c>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019c6:	230c      	movs	r3, #12
 80019c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019cc:	2302      	movs	r3, #2
 80019ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019de:	2307      	movs	r3, #7
 80019e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019e8:	4619      	mov	r1, r3
 80019ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ee:	f002 faf9 	bl	8003fe4 <HAL_GPIO_Init>
}
 80019f2:	bf00      	nop
 80019f4:	37b8      	adds	r7, #184	; 0xb8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40013800 	.word	0x40013800
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40004400 	.word	0x40004400

08001a08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a0c:	f7ff fee0 	bl	80017d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a10:	480c      	ldr	r0, [pc, #48]	; (8001a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a12:	490d      	ldr	r1, [pc, #52]	; (8001a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a14:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <LoopForever+0xe>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a18:	e002      	b.n	8001a20 <LoopCopyDataInit>

08001a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1e:	3304      	adds	r3, #4

08001a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a24:	d3f9      	bcc.n	8001a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a28:	4c0a      	ldr	r4, [pc, #40]	; (8001a54 <LoopForever+0x16>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a2c:	e001      	b.n	8001a32 <LoopFillZerobss>

08001a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a30:	3204      	adds	r2, #4

08001a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a34:	d3fb      	bcc.n	8001a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a36:	f005 fb21 	bl	800707c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a3a:	f7ff fc8b 	bl	8001354 <main>

08001a3e <LoopForever>:

LoopForever:
    b LoopForever
 8001a3e:	e7fe      	b.n	8001a3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a48:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001a4c:	08009f24 	.word	0x08009f24
  ldr r2, =_sbss
 8001a50:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001a54:	20000450 	.word	0x20000450

08001a58 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a58:	e7fe      	b.n	8001a58 <ADC3_IRQHandler>

08001a5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a64:	2003      	movs	r0, #3
 8001a66:	f002 f805 	bl	8003a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a6a:	200f      	movs	r0, #15
 8001a6c:	f000 f80e 	bl	8001a8c <HAL_InitTick>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	71fb      	strb	r3, [r7, #7]
 8001a7a:	e001      	b.n	8001a80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a7c:	f7ff fd8e 	bl	800159c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a80:	79fb      	ldrb	r3, [r7, #7]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <HAL_InitTick+0x6c>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d023      	beq.n	8001ae8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001aa0:	4b16      	ldr	r3, [pc, #88]	; (8001afc <HAL_InitTick+0x70>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <HAL_InitTick+0x6c>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f002 f811 	bl	8003ade <HAL_SYSTICK_Config>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10f      	bne.n	8001ae2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b0f      	cmp	r3, #15
 8001ac6:	d809      	bhi.n	8001adc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ad0:	f001 ffdb 	bl	8003a8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <HAL_InitTick+0x74>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e007      	b.n	8001aec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
 8001ae0:	e004      	b.n	8001aec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	73fb      	strb	r3, [r7, #15]
 8001ae6:	e001      	b.n	8001aec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000008 	.word	0x20000008
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000004 	.word	0x20000004

08001b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_IncTick+0x20>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_IncTick+0x24>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_IncTick+0x24>)
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000008 	.word	0x20000008
 8001b28:	2000043c 	.word	0x2000043c

08001b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_GetTick+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	2000043c 	.word	0x2000043c

08001b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b4c:	f7ff ffee 	bl	8001b2c <HAL_GetTick>
 8001b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b5c:	d005      	beq.n	8001b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_Delay+0x44>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b6a:	bf00      	nop
 8001b6c:	f7ff ffde 	bl	8001b2c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d8f7      	bhi.n	8001b6c <HAL_Delay+0x28>
  {
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000008 	.word	0x20000008

08001b8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	609a      	str	r2, [r3, #8]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	3360      	adds	r3, #96	; 0x60
 8001c06:	461a      	mov	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <LL_ADC_SetOffset+0x44>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	4313      	orrs	r3, r2
 8001c24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c2c:	bf00      	nop
 8001c2e:	371c      	adds	r7, #28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	03fff000 	.word	0x03fff000

08001c3c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3360      	adds	r3, #96	; 0x60
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3360      	adds	r3, #96	; 0x60
 8001c78:	461a      	mov	r2, r3
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c92:	bf00      	nop
 8001c94:	371c      	adds	r7, #28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	3330      	adds	r3, #48	; 0x30
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	f003 030c 	and.w	r3, r3, #12
 8001ce0:	4413      	add	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f003 031f 	and.w	r3, r3, #31
 8001cee:	211f      	movs	r1, #31
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	0e9b      	lsrs	r3, r3, #26
 8001cfc:	f003 011f 	and.w	r1, r3, #31
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f003 031f 	and.w	r3, r3, #31
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d10:	bf00      	nop
 8001d12:	371c      	adds	r7, #28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d28:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b087      	sub	sp, #28
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3314      	adds	r3, #20
 8001d52:	461a      	mov	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	0e5b      	lsrs	r3, r3, #25
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	4413      	add	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	0d1b      	lsrs	r3, r3, #20
 8001d6a:	f003 031f 	and.w	r3, r3, #31
 8001d6e:	2107      	movs	r1, #7
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	401a      	ands	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	0d1b      	lsrs	r3, r3, #20
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	431a      	orrs	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d8c:	bf00      	nop
 8001d8e:	371c      	adds	r7, #28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db0:	43db      	mvns	r3, r3
 8001db2:	401a      	ands	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f003 0318 	and.w	r3, r3, #24
 8001dba:	4908      	ldr	r1, [pc, #32]	; (8001ddc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001dbc:	40d9      	lsrs	r1, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	400b      	ands	r3, r1
 8001dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	0007ffff 	.word	0x0007ffff

08001de0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 031f 	and.w	r3, r3, #31
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6093      	str	r3, [r2, #8]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e50:	d101      	bne.n	8001e56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ea0:	d101      	bne.n	8001ea6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ec4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ec8:	f043 0201 	orr.w	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001eec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ef0:	f043 0202 	orr.w	r2, r3, #2
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <LL_ADC_IsEnabled+0x18>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <LL_ADC_IsEnabled+0x1a>
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d101      	bne.n	8001f42 <LL_ADC_IsDisableOngoing+0x18>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <LL_ADC_IsDisableOngoing+0x1a>
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f64:	f043 0204 	orr.w	r2, r3, #4
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d101      	bne.n	8001f90 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d101      	bne.n	8001fb6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b089      	sub	sp, #36	; 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e136      	b.n	800224c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d109      	bne.n	8002000 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff f83d 	bl	800106c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff19 	bl	8001e3c <LL_ADC_IsDeepPowerDownEnabled>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d004      	beq.n	800201a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff feff 	bl	8001e18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff ff34 	bl	8001e8c <LL_ADC_IsInternalRegulatorEnabled>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d115      	bne.n	8002056 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff18 	bl	8001e64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002034:	4b87      	ldr	r3, [pc, #540]	; (8002254 <HAL_ADC_Init+0x290>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	099b      	lsrs	r3, r3, #6
 800203a:	4a87      	ldr	r2, [pc, #540]	; (8002258 <HAL_ADC_Init+0x294>)
 800203c:	fba2 2303 	umull	r2, r3, r2, r3
 8002040:	099b      	lsrs	r3, r3, #6
 8002042:	3301      	adds	r3, #1
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002048:	e002      	b.n	8002050 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	3b01      	subs	r3, #1
 800204e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f9      	bne.n	800204a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff ff16 	bl	8001e8c <LL_ADC_IsInternalRegulatorEnabled>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10d      	bne.n	8002082 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206a:	f043 0210 	orr.w	r2, r3, #16
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002076:	f043 0201 	orr.w	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff76 	bl	8001f78 <LL_ADC_REG_IsConversionOngoing>
 800208c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	2b00      	cmp	r3, #0
 8002098:	f040 80cf 	bne.w	800223a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f040 80cb 	bne.w	800223a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020ac:	f043 0202 	orr.w	r2, r3, #2
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff23 	bl	8001f04 <LL_ADC_IsEnabled>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d115      	bne.n	80020f0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020c4:	4865      	ldr	r0, [pc, #404]	; (800225c <HAL_ADC_Init+0x298>)
 80020c6:	f7ff ff1d 	bl	8001f04 <LL_ADC_IsEnabled>
 80020ca:	4604      	mov	r4, r0
 80020cc:	4864      	ldr	r0, [pc, #400]	; (8002260 <HAL_ADC_Init+0x29c>)
 80020ce:	f7ff ff19 	bl	8001f04 <LL_ADC_IsEnabled>
 80020d2:	4603      	mov	r3, r0
 80020d4:	431c      	orrs	r4, r3
 80020d6:	4863      	ldr	r0, [pc, #396]	; (8002264 <HAL_ADC_Init+0x2a0>)
 80020d8:	f7ff ff14 	bl	8001f04 <LL_ADC_IsEnabled>
 80020dc:	4603      	mov	r3, r0
 80020de:	4323      	orrs	r3, r4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d105      	bne.n	80020f0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	4619      	mov	r1, r3
 80020ea:	485f      	ldr	r0, [pc, #380]	; (8002268 <HAL_ADC_Init+0x2a4>)
 80020ec:	f7ff fd4e 	bl	8001b8c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	7e5b      	ldrb	r3, [r3, #25]
 80020f4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020fa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002100:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002106:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800210e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3020 	ldrb.w	r3, [r3, #32]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d106      	bne.n	800212c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	3b01      	subs	r3, #1
 8002124:	045b      	lsls	r3, r3, #17
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002130:	2b00      	cmp	r3, #0
 8002132:	d009      	beq.n	8002148 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	4b47      	ldr	r3, [pc, #284]	; (800226c <HAL_ADC_Init+0x2a8>)
 8002150:	4013      	ands	r3, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	69b9      	ldr	r1, [r7, #24]
 8002158:	430b      	orrs	r3, r1
 800215a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff09 	bl	8001f78 <LL_ADC_REG_IsConversionOngoing>
 8002166:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff16 	bl	8001f9e <LL_ADC_INJ_IsConversionOngoing>
 8002172:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d13d      	bne.n	80021f6 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d13a      	bne.n	80021f6 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002184:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800218c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800219c:	f023 0302 	bic.w	r3, r3, #2
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	69b9      	ldr	r1, [r7, #24]
 80021a6:	430b      	orrs	r3, r1
 80021a8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d118      	bne.n	80021e6 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80021be:	f023 0304 	bic.w	r3, r3, #4
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021ca:	4311      	orrs	r1, r2
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021d0:	4311      	orrs	r1, r2
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021d6:	430a      	orrs	r2, r1
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	611a      	str	r2, [r3, #16]
 80021e4:	e007      	b.n	80021f6 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0201 	bic.w	r2, r2, #1
 80021f4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d10c      	bne.n	8002218 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	f023 010f 	bic.w	r1, r3, #15
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	1e5a      	subs	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	631a      	str	r2, [r3, #48]	; 0x30
 8002216:	e007      	b.n	8002228 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 020f 	bic.w	r2, r2, #15
 8002226:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222c:	f023 0303 	bic.w	r3, r3, #3
 8002230:	f043 0201 	orr.w	r2, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	655a      	str	r2, [r3, #84]	; 0x54
 8002238:	e007      	b.n	800224a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	f043 0210 	orr.w	r2, r3, #16
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800224a:	7ffb      	ldrb	r3, [r7, #31]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3724      	adds	r7, #36	; 0x24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd90      	pop	{r4, r7, pc}
 8002254:	20000000 	.word	0x20000000
 8002258:	053e2d63 	.word	0x053e2d63
 800225c:	50040000 	.word	0x50040000
 8002260:	50040100 	.word	0x50040100
 8002264:	50040200 	.word	0x50040200
 8002268:	50040300 	.word	0x50040300
 800226c:	fff0c007 	.word	0xfff0c007

08002270 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002278:	4893      	ldr	r0, [pc, #588]	; (80024c8 <HAL_ADC_Start_IT+0x258>)
 800227a:	f7ff fdb1 	bl	8001de0 <LL_ADC_GetMultimode>
 800227e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fe77 	bl	8001f78 <LL_ADC_REG_IsConversionOngoing>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	f040 8111 	bne.w	80024b4 <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_ADC_Start_IT+0x30>
 800229c:	2302      	movs	r3, #2
 800229e:	e10e      	b.n	80024be <HAL_ADC_Start_IT+0x24e>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f001 f805 	bl	80032b8 <ADC_Enable>
 80022ae:	4603      	mov	r3, r0
 80022b0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022b2:	7dfb      	ldrb	r3, [r7, #23]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f040 80f8 	bne.w	80024aa <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a7e      	ldr	r2, [pc, #504]	; (80024cc <HAL_ADC_Start_IT+0x25c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d002      	beq.n	80022de <HAL_ADC_Start_IT+0x6e>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	e000      	b.n	80022e0 <HAL_ADC_Start_IT+0x70>
 80022de:	4b7c      	ldr	r3, [pc, #496]	; (80024d0 <HAL_ADC_Start_IT+0x260>)
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d002      	beq.n	80022ee <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d105      	bne.n	80022fa <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d006      	beq.n	8002314 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230a:	f023 0206 	bic.w	r2, r3, #6
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	659a      	str	r2, [r3, #88]	; 0x58
 8002312:	e002      	b.n	800231a <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	221c      	movs	r2, #28
 8002320:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 021c 	bic.w	r2, r2, #28
 8002338:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	2b08      	cmp	r3, #8
 8002340:	d108      	bne.n	8002354 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f042 0208 	orr.w	r2, r2, #8
 8002350:	605a      	str	r2, [r3, #4]
          break;
 8002352:	e008      	b.n	8002366 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0204 	orr.w	r2, r2, #4
 8002362:	605a      	str	r2, [r3, #4]
          break;
 8002364:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236a:	2b00      	cmp	r3, #0
 800236c:	d107      	bne.n	800237e <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0210 	orr.w	r2, r2, #16
 800237c:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a52      	ldr	r2, [pc, #328]	; (80024cc <HAL_ADC_Start_IT+0x25c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d002      	beq.n	800238e <HAL_ADC_Start_IT+0x11e>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	e000      	b.n	8002390 <HAL_ADC_Start_IT+0x120>
 800238e:	4b50      	ldr	r3, [pc, #320]	; (80024d0 <HAL_ADC_Start_IT+0x260>)
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	4293      	cmp	r3, r2
 8002396:	d008      	beq.n	80023aa <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2b05      	cmp	r3, #5
 80023a2:	d002      	beq.n	80023aa <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	2b09      	cmp	r3, #9
 80023a8:	d13b      	bne.n	8002422 <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d02d      	beq.n	8002414 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d110      	bne.n	80023f2 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0220 	bic.w	r2, r2, #32
 80023de:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023ee:	605a      	str	r2, [r3, #4]
              break;
 80023f0:	e011      	b.n	8002416 <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002400:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0220 	orr.w	r2, r2, #32
 8002410:	605a      	str	r2, [r3, #4]
              break;
 8002412:	e000      	b.n	8002416 <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8002414:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fd98 	bl	8001f50 <LL_ADC_REG_StartConversion>
 8002420:	e04c      	b.n	80024bc <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002426:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a26      	ldr	r2, [pc, #152]	; (80024cc <HAL_ADC_Start_IT+0x25c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d002      	beq.n	800243e <HAL_ADC_Start_IT+0x1ce>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	e000      	b.n	8002440 <HAL_ADC_Start_IT+0x1d0>
 800243e:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <HAL_ADC_Start_IT+0x260>)
 8002440:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d035      	beq.n	80024ba <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002452:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002456:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	2b08      	cmp	r3, #8
 8002464:	d110      	bne.n	8002488 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0220 	bic.w	r2, r2, #32
 8002474:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002484:	605a      	str	r2, [r3, #4]
              break;
 8002486:	e019      	b.n	80024bc <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002496:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0220 	orr.w	r2, r2, #32
 80024a6:	605a      	str	r2, [r3, #4]
              break;
 80024a8:	e008      	b.n	80024bc <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80024b2:	e003      	b.n	80024bc <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024b4:	2302      	movs	r3, #2
 80024b6:	75fb      	strb	r3, [r7, #23]
 80024b8:	e000      	b.n	80024bc <HAL_ADC_Start_IT+0x24c>
        }
 80024ba:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	50040300 	.word	0x50040300
 80024cc:	50040100 	.word	0x50040100
 80024d0:	50040000 	.word	0x50040000

080024d4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024e0:	4853      	ldr	r0, [pc, #332]	; (8002630 <HAL_ADC_Start_DMA+0x15c>)
 80024e2:	f7ff fc7d 	bl	8001de0 <LL_ADC_GetMultimode>
 80024e6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fd43 	bl	8001f78 <LL_ADC_REG_IsConversionOngoing>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f040 8093 	bne.w	8002620 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_ADC_Start_DMA+0x34>
 8002504:	2302      	movs	r3, #2
 8002506:	e08e      	b.n	8002626 <HAL_ADC_Start_DMA+0x152>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a47      	ldr	r2, [pc, #284]	; (8002634 <HAL_ADC_Start_DMA+0x160>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d008      	beq.n	800252c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	2b05      	cmp	r3, #5
 8002524:	d002      	beq.n	800252c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	2b09      	cmp	r3, #9
 800252a:	d172      	bne.n	8002612 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 fec3 	bl	80032b8 <ADC_Enable>
 8002532:	4603      	mov	r3, r0
 8002534:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002536:	7dfb      	ldrb	r3, [r7, #23]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d165      	bne.n	8002608 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002540:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002544:	f023 0301 	bic.w	r3, r3, #1
 8002548:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a38      	ldr	r2, [pc, #224]	; (8002638 <HAL_ADC_Start_DMA+0x164>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d002      	beq.n	8002560 <HAL_ADC_Start_DMA+0x8c>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	e000      	b.n	8002562 <HAL_ADC_Start_DMA+0x8e>
 8002560:	4b36      	ldr	r3, [pc, #216]	; (800263c <HAL_ADC_Start_DMA+0x168>)
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	4293      	cmp	r3, r2
 8002568:	d002      	beq.n	8002570 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d105      	bne.n	800257c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002574:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002580:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d006      	beq.n	8002596 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258c:	f023 0206 	bic.w	r2, r3, #6
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	659a      	str	r2, [r3, #88]	; 0x58
 8002594:	e002      	b.n	800259c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a0:	4a27      	ldr	r2, [pc, #156]	; (8002640 <HAL_ADC_Start_DMA+0x16c>)
 80025a2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a8:	4a26      	ldr	r2, [pc, #152]	; (8002644 <HAL_ADC_Start_DMA+0x170>)
 80025aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b0:	4a25      	ldr	r2, [pc, #148]	; (8002648 <HAL_ADC_Start_DMA+0x174>)
 80025b2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	221c      	movs	r2, #28
 80025ba:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0210 	orr.w	r2, r2, #16
 80025d2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3340      	adds	r3, #64	; 0x40
 80025ee:	4619      	mov	r1, r3
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f001 fb38 	bl	8003c68 <HAL_DMA_Start_IT>
 80025f8:	4603      	mov	r3, r0
 80025fa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fca5 	bl	8001f50 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002606:	e00d      	b.n	8002624 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002610:	e008      	b.n	8002624 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800261e:	e001      	b.n	8002624 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002620:	2302      	movs	r3, #2
 8002622:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002624:	7dfb      	ldrb	r3, [r7, #23]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	50040300 	.word	0x50040300
 8002634:	50040200 	.word	0x50040200
 8002638:	50040100 	.word	0x50040100
 800263c:	50040000 	.word	0x50040000
 8002640:	08003483 	.word	0x08003483
 8002644:	0800355b 	.word	0x0800355b
 8002648:	08003577 	.word	0x08003577

0800264c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800265a:	4618      	mov	r0, r3
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	; 0x28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002670:	2300      	movs	r3, #0
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002684:	4882      	ldr	r0, [pc, #520]	; (8002890 <HAL_ADC_IRQHandler+0x228>)
 8002686:	f7ff fbab 	bl	8001de0 <LL_ADC_GetMultimode>
 800268a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d017      	beq.n	80026c6 <HAL_ADC_IRQHandler+0x5e>
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d012      	beq.n	80026c6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d105      	bne.n	80026b8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f001 f851 	bl	8003760 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2202      	movs	r2, #2
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d004      	beq.n	80026da <HAL_ADC_IRQHandler+0x72>
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8083 	beq.w	80027ec <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d07d      	beq.n	80027ec <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d105      	bne.n	8002708 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002700:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fac6 	bl	8001c9e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d062      	beq.n	80027de <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a5d      	ldr	r2, [pc, #372]	; (8002894 <HAL_ADC_IRQHandler+0x22c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d002      	beq.n	8002728 <HAL_ADC_IRQHandler+0xc0>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	e000      	b.n	800272a <HAL_ADC_IRQHandler+0xc2>
 8002728:	4b5b      	ldr	r3, [pc, #364]	; (8002898 <HAL_ADC_IRQHandler+0x230>)
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	4293      	cmp	r3, r2
 8002730:	d008      	beq.n	8002744 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	2b05      	cmp	r3, #5
 800273c:	d002      	beq.n	8002744 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2b09      	cmp	r3, #9
 8002742:	d104      	bne.n	800274e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	623b      	str	r3, [r7, #32]
 800274c:	e00c      	b.n	8002768 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a50      	ldr	r2, [pc, #320]	; (8002894 <HAL_ADC_IRQHandler+0x22c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d002      	beq.n	800275e <HAL_ADC_IRQHandler+0xf6>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	e000      	b.n	8002760 <HAL_ADC_IRQHandler+0xf8>
 800275e:	4b4e      	ldr	r3, [pc, #312]	; (8002898 <HAL_ADC_IRQHandler+0x230>)
 8002760:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d135      	bne.n	80027de <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b08      	cmp	r3, #8
 800277e:	d12e      	bne.n	80027de <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fbf7 	bl	8001f78 <LL_ADC_REG_IsConversionOngoing>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d11a      	bne.n	80027c6 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 020c 	bic.w	r2, r2, #12
 800279e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d112      	bne.n	80027de <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027bc:	f043 0201 	orr.w	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	655a      	str	r2, [r3, #84]	; 0x54
 80027c4:	e00b      	b.n	80027de <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ca:	f043 0210 	orr.w	r2, r3, #16
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	f043 0201 	orr.w	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe fd80 	bl	80012e4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	220c      	movs	r2, #12
 80027ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d004      	beq.n	8002800 <HAL_ADC_IRQHandler+0x198>
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	f003 0320 	and.w	r3, r3, #32
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10b      	bne.n	8002818 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 809f 	beq.w	800294a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8099 	beq.w	800294a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	2b00      	cmp	r3, #0
 8002822:	d105      	bne.n	8002830 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fa71 	bl	8001d1c <LL_ADC_INJ_IsTriggerSourceSWStart>
 800283a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fa2c 	bl	8001c9e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002846:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a11      	ldr	r2, [pc, #68]	; (8002894 <HAL_ADC_IRQHandler+0x22c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d002      	beq.n	8002858 <HAL_ADC_IRQHandler+0x1f0>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	e000      	b.n	800285a <HAL_ADC_IRQHandler+0x1f2>
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <HAL_ADC_IRQHandler+0x230>)
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	4293      	cmp	r3, r2
 8002860:	d008      	beq.n	8002874 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b06      	cmp	r3, #6
 800286c:	d002      	beq.n	8002874 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b07      	cmp	r3, #7
 8002872:	d104      	bne.n	800287e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	623b      	str	r3, [r7, #32]
 800287c:	e013      	b.n	80028a6 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a04      	ldr	r2, [pc, #16]	; (8002894 <HAL_ADC_IRQHandler+0x22c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d009      	beq.n	800289c <HAL_ADC_IRQHandler+0x234>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	e007      	b.n	800289e <HAL_ADC_IRQHandler+0x236>
 800288e:	bf00      	nop
 8002890:	50040300 	.word	0x50040300
 8002894:	50040100 	.word	0x50040100
 8002898:	50040000 	.word	0x50040000
 800289c:	4b7d      	ldr	r3, [pc, #500]	; (8002a94 <HAL_ADC_IRQHandler+0x42c>)
 800289e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d047      	beq.n	800293c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d007      	beq.n	80028c6 <HAL_ADC_IRQHandler+0x25e>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d03f      	beq.n	800293c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d13a      	bne.n	800293c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d0:	2b40      	cmp	r3, #64	; 0x40
 80028d2:	d133      	bne.n	800293c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d12e      	bne.n	800293c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fb5b 	bl	8001f9e <LL_ADC_INJ_IsConversionOngoing>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d11a      	bne.n	8002924 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028fc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002902:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d112      	bne.n	800293c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291a:	f043 0201 	orr.w	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	655a      	str	r2, [r3, #84]	; 0x54
 8002922:	e00b      	b.n	800293c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002928:	f043 0210 	orr.w	r2, r3, #16
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	f043 0201 	orr.w	r2, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 fee7 	bl	8003710 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2260      	movs	r2, #96	; 0x60
 8002948:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002950:	2b00      	cmp	r3, #0
 8002952:	d011      	beq.n	8002978 <HAL_ADC_IRQHandler+0x310>
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00c      	beq.n	8002978 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002962:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f8a0 	bl	8002ab0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2280      	movs	r2, #128	; 0x80
 8002976:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d012      	beq.n	80029a8 <HAL_ADC_IRQHandler+0x340>
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00d      	beq.n	80029a8 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002990:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fecd 	bl	8003738 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d012      	beq.n	80029d8 <HAL_ADC_IRQHandler+0x370>
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00d      	beq.n	80029d8 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 febf 	bl	800374c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d036      	beq.n	8002a50 <HAL_ADC_IRQHandler+0x3e8>
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d031      	beq.n	8002a50 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d102      	bne.n	80029fa <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80029f4:	2301      	movs	r3, #1
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
 80029f8:	e014      	b.n	8002a24 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a00:	4825      	ldr	r0, [pc, #148]	; (8002a98 <HAL_ADC_IRQHandler+0x430>)
 8002a02:	f7ff f9fb 	bl	8001dfc <LL_ADC_GetMultiDMATransfer>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00b      	beq.n	8002a24 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a10:	e008      	b.n	8002a24 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002a20:	2301      	movs	r3, #1
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d10e      	bne.n	8002a48 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3a:	f043 0202 	orr.w	r2, r3, #2
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f83e 	bl	8002ac4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d018      	beq.n	8002a8c <HAL_ADC_IRQHandler+0x424>
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d013      	beq.n	8002a8c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a68:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a74:	f043 0208 	orr.w	r2, r3, #8
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a84:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fe4c 	bl	8003724 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002a8c:	bf00      	nop
 8002a8e:	3728      	adds	r7, #40	; 0x28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	50040000 	.word	0x50040000
 8002a98:	50040300 	.word	0x50040300

08002a9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b0b6      	sub	sp, #216	; 0xd8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x22>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e3c7      	b.n	800328a <HAL_ADC_ConfigChannel+0x7b2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fa36 	bl	8001f78 <LL_ADC_REG_IsConversionOngoing>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f040 83a8 	bne.w	8003264 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b05      	cmp	r3, #5
 8002b1a:	d824      	bhi.n	8002b66 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	3b02      	subs	r3, #2
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d81b      	bhi.n	8002b5e <HAL_ADC_ConfigChannel+0x86>
 8002b26:	a201      	add	r2, pc, #4	; (adr r2, 8002b2c <HAL_ADC_ConfigChannel+0x54>)
 8002b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2c:	08002b3d 	.word	0x08002b3d
 8002b30:	08002b45 	.word	0x08002b45
 8002b34:	08002b4d 	.word	0x08002b4d
 8002b38:	08002b55 	.word	0x08002b55
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	220c      	movs	r2, #12
 8002b40:	605a      	str	r2, [r3, #4]
          break;
 8002b42:	e011      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	2212      	movs	r2, #18
 8002b48:	605a      	str	r2, [r3, #4]
          break;
 8002b4a:	e00d      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	2218      	movs	r2, #24
 8002b50:	605a      	str	r2, [r3, #4]
          break;
 8002b52:	e009      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b5a:	605a      	str	r2, [r3, #4]
          break;
 8002b5c:	e004      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2206      	movs	r2, #6
 8002b62:	605a      	str	r2, [r3, #4]
          break;
 8002b64:	e000      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002b66:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	f7ff f8a5 	bl	8001cc4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff f9fa 	bl	8001f78 <LL_ADC_REG_IsConversionOngoing>
 8002b84:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fa06 	bl	8001f9e <LL_ADC_INJ_IsConversionOngoing>
 8002b92:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f040 81a6 	bne.w	8002eec <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ba0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f040 81a1 	bne.w	8002eec <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6819      	ldr	r1, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f7ff f8c3 	bl	8001d42 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	08db      	lsrs	r3, r3, #3
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	6919      	ldr	r1, [r3, #16]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bee:	f7ff f801 	bl	8001bf4 <LL_ADC_SetOffset>
 8002bf2:	e17b      	b.n	8002eec <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff f81e 	bl	8001c3c <LL_ADC_GetOffsetChannel>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10a      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x148>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff f813 	bl	8001c3c <LL_ADC_GetOffsetChannel>
 8002c16:	4603      	mov	r3, r0
 8002c18:	0e9b      	lsrs	r3, r3, #26
 8002c1a:	f003 021f 	and.w	r2, r3, #31
 8002c1e:	e01e      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x186>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2100      	movs	r1, #0
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff f808 	bl	8001c3c <LL_ADC_GetOffsetChannel>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002c4e:	2320      	movs	r3, #32
 8002c50:	e004      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002c52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c56:	fab3 f383 	clz	r3, r3
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d105      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x19e>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	0e9b      	lsrs	r3, r3, #26
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	e018      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x1d0>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002c9a:	2320      	movs	r3, #32
 8002c9c:	e004      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002c9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d106      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe ffd7 	bl	8001c68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fe ffbb 	bl	8001c3c <LL_ADC_GetOffsetChannel>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x20e>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fe ffb0 	bl	8001c3c <LL_ADC_GetOffsetChannel>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	0e9b      	lsrs	r3, r3, #26
 8002ce0:	f003 021f 	and.w	r2, r3, #31
 8002ce4:	e01e      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x24c>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2101      	movs	r1, #1
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fe ffa5 	bl	8001c3c <LL_ADC_GetOffsetChannel>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cfc:	fa93 f3a3 	rbit	r3, r3
 8002d00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002d04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002d0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002d14:	2320      	movs	r3, #32
 8002d16:	e004      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002d18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d1c:	fab3 f383 	clz	r3, r3
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d105      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x264>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	0e9b      	lsrs	r3, r3, #26
 8002d36:	f003 031f 	and.w	r3, r3, #31
 8002d3a:	e018      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x296>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d48:	fa93 f3a3 	rbit	r3, r3
 8002d4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002d50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002d58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002d60:	2320      	movs	r3, #32
 8002d62:	e004      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002d64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d106      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2200      	movs	r2, #0
 8002d78:	2101      	movs	r1, #1
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe ff74 	bl	8001c68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2102      	movs	r1, #2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe ff58 	bl	8001c3c <LL_ADC_GetOffsetChannel>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10a      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x2d4>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2102      	movs	r1, #2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe ff4d 	bl	8001c3c <LL_ADC_GetOffsetChannel>
 8002da2:	4603      	mov	r3, r0
 8002da4:	0e9b      	lsrs	r3, r3, #26
 8002da6:	f003 021f 	and.w	r2, r3, #31
 8002daa:	e01e      	b.n	8002dea <HAL_ADC_ConfigChannel+0x312>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2102      	movs	r1, #2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe ff42 	bl	8001c3c <LL_ADC_GetOffsetChannel>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dc2:	fa93 f3a3 	rbit	r3, r3
 8002dc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002dca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002dd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002dda:	2320      	movs	r3, #32
 8002ddc:	e004      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002dde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002de2:	fab3 f383 	clz	r3, r3
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d105      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x32a>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	0e9b      	lsrs	r3, r3, #26
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	e016      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x358>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002e14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002e1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002e22:	2320      	movs	r3, #32
 8002e24:	e004      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002e26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e2a:	fab3 f383 	clz	r3, r3
 8002e2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d106      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	2102      	movs	r1, #2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe ff13 	bl	8001c68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2103      	movs	r1, #3
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fe fef7 	bl	8001c3c <LL_ADC_GetOffsetChannel>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10a      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x396>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2103      	movs	r1, #3
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fe feec 	bl	8001c3c <LL_ADC_GetOffsetChannel>
 8002e64:	4603      	mov	r3, r0
 8002e66:	0e9b      	lsrs	r3, r3, #26
 8002e68:	f003 021f 	and.w	r2, r3, #31
 8002e6c:	e017      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x3c6>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2103      	movs	r1, #3
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fe fee1 	bl	8001c3c <LL_ADC_GetOffsetChannel>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e80:	fa93 f3a3 	rbit	r3, r3
 8002e84:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e88:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002e90:	2320      	movs	r3, #32
 8002e92:	e003      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d105      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x3de>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	0e9b      	lsrs	r3, r3, #26
 8002eb0:	f003 031f 	and.w	r3, r3, #31
 8002eb4:	e011      	b.n	8002eda <HAL_ADC_ConfigChannel+0x402>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ec6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002ece:	2320      	movs	r3, #32
 8002ed0:	e003      	b.n	8002eda <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed4:	fab3 f383 	clz	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d106      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2103      	movs	r1, #3
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe febe 	bl	8001c68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff f807 	bl	8001f04 <LL_ADC_IsEnabled>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f040 813f 	bne.w	800317c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6818      	ldr	r0, [r3, #0]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	6819      	ldr	r1, [r3, #0]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f7fe ff44 	bl	8001d98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	4a8e      	ldr	r2, [pc, #568]	; (8003150 <HAL_ADC_ConfigChannel+0x678>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	f040 8130 	bne.w	800317c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10b      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x46c>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	0e9b      	lsrs	r3, r3, #26
 8002f32:	3301      	adds	r3, #1
 8002f34:	f003 031f 	and.w	r3, r3, #31
 8002f38:	2b09      	cmp	r3, #9
 8002f3a:	bf94      	ite	ls
 8002f3c:	2301      	movls	r3, #1
 8002f3e:	2300      	movhi	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	e019      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x4a0>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f4c:	fa93 f3a3 	rbit	r3, r3
 8002f50:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002f52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f54:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002f56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002f5c:	2320      	movs	r3, #32
 8002f5e:	e003      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002f60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f62:	fab3 f383 	clz	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	3301      	adds	r3, #1
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	2b09      	cmp	r3, #9
 8002f70:	bf94      	ite	ls
 8002f72:	2301      	movls	r3, #1
 8002f74:	2300      	movhi	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d079      	beq.n	8003070 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d107      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x4c0>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	0e9b      	lsrs	r3, r3, #26
 8002f8e:	3301      	adds	r3, #1
 8002f90:	069b      	lsls	r3, r3, #26
 8002f92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f96:	e015      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x4ec>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa0:	fa93 f3a3 	rbit	r3, r3
 8002fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002fb0:	2320      	movs	r3, #32
 8002fb2:	e003      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	069b      	lsls	r3, r3, #26
 8002fc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d109      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x50c>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	0e9b      	lsrs	r3, r3, #26
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	2101      	movs	r1, #1
 8002fde:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe2:	e017      	b.n	8003014 <HAL_ADC_ConfigChannel+0x53c>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	e003      	b.n	8003008 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003002:	fab3 f383 	clz	r3, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	3301      	adds	r3, #1
 800300a:	f003 031f 	and.w	r3, r3, #31
 800300e:	2101      	movs	r1, #1
 8003010:	fa01 f303 	lsl.w	r3, r1, r3
 8003014:	ea42 0103 	orr.w	r1, r2, r3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10a      	bne.n	800303a <HAL_ADC_ConfigChannel+0x562>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	0e9b      	lsrs	r3, r3, #26
 800302a:	3301      	adds	r3, #1
 800302c:	f003 021f 	and.w	r2, r3, #31
 8003030:	4613      	mov	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4413      	add	r3, r2
 8003036:	051b      	lsls	r3, r3, #20
 8003038:	e018      	b.n	800306c <HAL_ADC_ConfigChannel+0x594>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800304c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003052:	2320      	movs	r3, #32
 8003054:	e003      	b.n	800305e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003058:	fab3 f383 	clz	r3, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	3301      	adds	r3, #1
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	4613      	mov	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4413      	add	r3, r2
 800306a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800306c:	430b      	orrs	r3, r1
 800306e:	e080      	b.n	8003172 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003078:	2b00      	cmp	r3, #0
 800307a:	d107      	bne.n	800308c <HAL_ADC_ConfigChannel+0x5b4>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	0e9b      	lsrs	r3, r3, #26
 8003082:	3301      	adds	r3, #1
 8003084:	069b      	lsls	r3, r3, #26
 8003086:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800308a:	e015      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x5e0>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003094:	fa93 f3a3 	rbit	r3, r3
 8003098:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80030a4:	2320      	movs	r3, #32
 80030a6:	e003      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80030a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030aa:	fab3 f383 	clz	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	3301      	adds	r3, #1
 80030b2:	069b      	lsls	r3, r3, #26
 80030b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d109      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x600>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	0e9b      	lsrs	r3, r3, #26
 80030ca:	3301      	adds	r3, #1
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	2101      	movs	r1, #1
 80030d2:	fa01 f303 	lsl.w	r3, r1, r3
 80030d6:	e017      	b.n	8003108 <HAL_ADC_ConfigChannel+0x630>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	fa93 f3a3 	rbit	r3, r3
 80030e4:	61fb      	str	r3, [r7, #28]
  return result;
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80030f0:	2320      	movs	r3, #32
 80030f2:	e003      	b.n	80030fc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	fab3 f383 	clz	r3, r3
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	3301      	adds	r3, #1
 80030fe:	f003 031f 	and.w	r3, r3, #31
 8003102:	2101      	movs	r1, #1
 8003104:	fa01 f303 	lsl.w	r3, r1, r3
 8003108:	ea42 0103 	orr.w	r1, r2, r3
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10d      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x65c>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	0e9b      	lsrs	r3, r3, #26
 800311e:	3301      	adds	r3, #1
 8003120:	f003 021f 	and.w	r2, r3, #31
 8003124:	4613      	mov	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	4413      	add	r3, r2
 800312a:	3b1e      	subs	r3, #30
 800312c:	051b      	lsls	r3, r3, #20
 800312e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003132:	e01d      	b.n	8003170 <HAL_ADC_ConfigChannel+0x698>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	fa93 f3a3 	rbit	r3, r3
 8003140:	613b      	str	r3, [r7, #16]
  return result;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d103      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800314c:	2320      	movs	r3, #32
 800314e:	e005      	b.n	800315c <HAL_ADC_ConfigChannel+0x684>
 8003150:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	3301      	adds	r3, #1
 800315e:	f003 021f 	and.w	r2, r3, #31
 8003162:	4613      	mov	r3, r2
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	4413      	add	r3, r2
 8003168:	3b1e      	subs	r3, #30
 800316a:	051b      	lsls	r3, r3, #20
 800316c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003170:	430b      	orrs	r3, r1
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	6892      	ldr	r2, [r2, #8]
 8003176:	4619      	mov	r1, r3
 8003178:	f7fe fde3 	bl	8001d42 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4b44      	ldr	r3, [pc, #272]	; (8003294 <HAL_ADC_ConfigChannel+0x7bc>)
 8003182:	4013      	ands	r3, r2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d07a      	beq.n	800327e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003188:	4843      	ldr	r0, [pc, #268]	; (8003298 <HAL_ADC_ConfigChannel+0x7c0>)
 800318a:	f7fe fd25 	bl	8001bd8 <LL_ADC_GetCommonPathInternalCh>
 800318e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a41      	ldr	r2, [pc, #260]	; (800329c <HAL_ADC_ConfigChannel+0x7c4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d12c      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800319c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d126      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a3c      	ldr	r2, [pc, #240]	; (80032a0 <HAL_ADC_ConfigChannel+0x7c8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d004      	beq.n	80031bc <HAL_ADC_ConfigChannel+0x6e4>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a3b      	ldr	r2, [pc, #236]	; (80032a4 <HAL_ADC_ConfigChannel+0x7cc>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d15d      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031c4:	4619      	mov	r1, r3
 80031c6:	4834      	ldr	r0, [pc, #208]	; (8003298 <HAL_ADC_ConfigChannel+0x7c0>)
 80031c8:	f7fe fcf3 	bl	8001bb2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031cc:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <HAL_ADC_ConfigChannel+0x7d0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	099b      	lsrs	r3, r3, #6
 80031d2:	4a36      	ldr	r2, [pc, #216]	; (80032ac <HAL_ADC_ConfigChannel+0x7d4>)
 80031d4:	fba2 2303 	umull	r2, r3, r2, r3
 80031d8:	099b      	lsrs	r3, r3, #6
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	4613      	mov	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031e6:	e002      	b.n	80031ee <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f9      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031f4:	e040      	b.n	8003278 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a2d      	ldr	r2, [pc, #180]	; (80032b0 <HAL_ADC_ConfigChannel+0x7d8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d118      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x75a>
 8003200:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d112      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a23      	ldr	r2, [pc, #140]	; (80032a0 <HAL_ADC_ConfigChannel+0x7c8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d004      	beq.n	8003220 <HAL_ADC_ConfigChannel+0x748>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a22      	ldr	r2, [pc, #136]	; (80032a4 <HAL_ADC_ConfigChannel+0x7cc>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d12d      	bne.n	800327c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003220:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003224:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003228:	4619      	mov	r1, r3
 800322a:	481b      	ldr	r0, [pc, #108]	; (8003298 <HAL_ADC_ConfigChannel+0x7c0>)
 800322c:	f7fe fcc1 	bl	8001bb2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003230:	e024      	b.n	800327c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a1f      	ldr	r2, [pc, #124]	; (80032b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d120      	bne.n	800327e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800323c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d11a      	bne.n	800327e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a14      	ldr	r2, [pc, #80]	; (80032a0 <HAL_ADC_ConfigChannel+0x7c8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d115      	bne.n	800327e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003252:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003256:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800325a:	4619      	mov	r1, r3
 800325c:	480e      	ldr	r0, [pc, #56]	; (8003298 <HAL_ADC_ConfigChannel+0x7c0>)
 800325e:	f7fe fca8 	bl	8001bb2 <LL_ADC_SetCommonPathInternalCh>
 8003262:	e00c      	b.n	800327e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003268:	f043 0220 	orr.w	r2, r3, #32
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003276:	e002      	b.n	800327e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003278:	bf00      	nop
 800327a:	e000      	b.n	800327e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800327c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003286:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800328a:	4618      	mov	r0, r3
 800328c:	37d8      	adds	r7, #216	; 0xd8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	80080000 	.word	0x80080000
 8003298:	50040300 	.word	0x50040300
 800329c:	c7520000 	.word	0xc7520000
 80032a0:	50040000 	.word	0x50040000
 80032a4:	50040200 	.word	0x50040200
 80032a8:	20000000 	.word	0x20000000
 80032ac:	053e2d63 	.word	0x053e2d63
 80032b0:	cb840000 	.word	0xcb840000
 80032b4:	80000001 	.word	0x80000001

080032b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fe fe1b 	bl	8001f04 <LL_ADC_IsEnabled>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d169      	bne.n	80033a8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	4b36      	ldr	r3, [pc, #216]	; (80033b4 <ADC_Enable+0xfc>)
 80032dc:	4013      	ands	r3, r2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00d      	beq.n	80032fe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e6:	f043 0210 	orr.w	r2, r3, #16
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f2:	f043 0201 	orr.w	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e055      	b.n	80033aa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe fdd6 	bl	8001eb4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003308:	482b      	ldr	r0, [pc, #172]	; (80033b8 <ADC_Enable+0x100>)
 800330a:	f7fe fc65 	bl	8001bd8 <LL_ADC_GetCommonPathInternalCh>
 800330e:	4603      	mov	r3, r0
 8003310:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d013      	beq.n	8003340 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003318:	4b28      	ldr	r3, [pc, #160]	; (80033bc <ADC_Enable+0x104>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	099b      	lsrs	r3, r3, #6
 800331e:	4a28      	ldr	r2, [pc, #160]	; (80033c0 <ADC_Enable+0x108>)
 8003320:	fba2 2303 	umull	r2, r3, r2, r3
 8003324:	099b      	lsrs	r3, r3, #6
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	4613      	mov	r3, r2
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003332:	e002      	b.n	800333a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	3b01      	subs	r3, #1
 8003338:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1f9      	bne.n	8003334 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003340:	f7fe fbf4 	bl	8001b2c <HAL_GetTick>
 8003344:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003346:	e028      	b.n	800339a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f7fe fdd9 	bl	8001f04 <LL_ADC_IsEnabled>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d104      	bne.n	8003362 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f7fe fda9 	bl	8001eb4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003362:	f7fe fbe3 	bl	8001b2c <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d914      	bls.n	800339a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b01      	cmp	r3, #1
 800337c:	d00d      	beq.n	800339a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003382:	f043 0210 	orr.w	r2, r3, #16
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338e:	f043 0201 	orr.w	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e007      	b.n	80033aa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d1cf      	bne.n	8003348 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	8000003f 	.word	0x8000003f
 80033b8:	50040300 	.word	0x50040300
 80033bc:	20000000 	.word	0x20000000
 80033c0:	053e2d63 	.word	0x053e2d63

080033c4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fe fdaa 	bl	8001f2a <LL_ADC_IsDisableOngoing>
 80033d6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fe fd91 	bl	8001f04 <LL_ADC_IsEnabled>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d047      	beq.n	8003478 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d144      	bne.n	8003478 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 030d 	and.w	r3, r3, #13
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d10c      	bne.n	8003416 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe fd6b 	bl	8001edc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2203      	movs	r2, #3
 800340c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800340e:	f7fe fb8d 	bl	8001b2c <HAL_GetTick>
 8003412:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003414:	e029      	b.n	800346a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341a:	f043 0210 	orr.w	r2, r3, #16
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003426:	f043 0201 	orr.w	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e023      	b.n	800347a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003432:	f7fe fb7b 	bl	8001b2c <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d914      	bls.n	800346a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00d      	beq.n	800346a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003452:	f043 0210 	orr.w	r2, r3, #16
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345e:	f043 0201 	orr.w	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e007      	b.n	800347a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1dc      	bne.n	8003432 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003498:	2b00      	cmp	r3, #0
 800349a:	d14b      	bne.n	8003534 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d021      	beq.n	80034fa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe fbef 	bl	8001c9e <LL_ADC_REG_IsTriggerSourceSWStart>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d032      	beq.n	800352c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d12b      	bne.n	800352c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d11f      	bne.n	800352c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f0:	f043 0201 	orr.w	r2, r3, #1
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54
 80034f8:	e018      	b.n	800352c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d111      	bne.n	800352c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d105      	bne.n	800352c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003524:	f043 0201 	orr.w	r2, r3, #1
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f7fd fed9 	bl	80012e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003532:	e00e      	b.n	8003552 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f7ff fabf 	bl	8002ac4 <HAL_ADC_ErrorCallback>
}
 8003546:	e004      	b.n	8003552 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	4798      	blx	r3
}
 8003552:	bf00      	nop
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003566:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f7ff fa97 	bl	8002a9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800356e:	bf00      	nop
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003594:	f043 0204 	orr.w	r2, r3, #4
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f7ff fa91 	bl	8002ac4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <LL_ADC_IsEnabled>:
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <LL_ADC_IsEnabled+0x18>
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <LL_ADC_IsEnabled+0x1a>
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <LL_ADC_StartCalibration>:
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80035e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	609a      	str	r2, [r3, #8]
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <LL_ADC_IsCalibrationOnGoing>:
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003612:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003616:	d101      	bne.n	800361c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <LL_ADC_REG_IsConversionOngoing>:
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b04      	cmp	r3, #4
 800363c:	d101      	bne.n	8003642 <LL_ADC_REG_IsConversionOngoing+0x18>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800365a:	2300      	movs	r3, #0
 800365c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_ADCEx_Calibration_Start+0x1c>
 8003668:	2302      	movs	r3, #2
 800366a:	e04d      	b.n	8003708 <HAL_ADCEx_Calibration_Start+0xb8>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff fea5 	bl	80033c4 <ADC_Disable>
 800367a:	4603      	mov	r3, r0
 800367c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d136      	bne.n	80036f2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003688:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800368c:	f023 0302 	bic.w	r3, r3, #2
 8003690:	f043 0202 	orr.w	r2, r3, #2
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6839      	ldr	r1, [r7, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff ff96 	bl	80035d0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80036a4:	e014      	b.n	80036d0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	3301      	adds	r3, #1
 80036aa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80036b2:	d30d      	bcc.n	80036d0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b8:	f023 0312 	bic.w	r3, r3, #18
 80036bc:	f043 0210 	orr.w	r2, r3, #16
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e01b      	b.n	8003708 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff94 	bl	8003602 <LL_ADC_IsCalibrationOnGoing>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1e2      	bne.n	80036a6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e4:	f023 0303 	bic.w	r3, r3, #3
 80036e8:	f043 0201 	orr.w	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	655a      	str	r2, [r3, #84]	; 0x54
 80036f0:	e005      	b.n	80036fe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f6:	f043 0210 	orr.w	r2, r3, #16
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003706:	7bfb      	ldrb	r3, [r7, #15]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003774:	b590      	push	{r4, r7, lr}
 8003776:	b09f      	sub	sp, #124	; 0x7c
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800378e:	2302      	movs	r3, #2
 8003790:	e093      	b.n	80038ba <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800379a:	2300      	movs	r3, #0
 800379c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800379e:	2300      	movs	r3, #0
 80037a0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a47      	ldr	r2, [pc, #284]	; (80038c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d102      	bne.n	80037b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80037ac:	4b46      	ldr	r3, [pc, #280]	; (80038c8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80037ae:	60bb      	str	r3, [r7, #8]
 80037b0:	e001      	b.n	80037b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80037b2:	2300      	movs	r3, #0
 80037b4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10b      	bne.n	80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c0:	f043 0220 	orr.w	r2, r3, #32
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e072      	b.n	80038ba <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff ff27 	bl	800362a <LL_ADC_REG_IsConversionOngoing>
 80037dc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff ff21 	bl	800362a <LL_ADC_REG_IsConversionOngoing>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d154      	bne.n	8003898 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80037ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d151      	bne.n	8003898 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80037f4:	4b35      	ldr	r3, [pc, #212]	; (80038cc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80037f6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d02c      	beq.n	800385a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	6859      	ldr	r1, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003812:	035b      	lsls	r3, r3, #13
 8003814:	430b      	orrs	r3, r1
 8003816:	431a      	orrs	r2, r3
 8003818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800381a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800381c:	4829      	ldr	r0, [pc, #164]	; (80038c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800381e:	f7ff fec4 	bl	80035aa <LL_ADC_IsEnabled>
 8003822:	4604      	mov	r4, r0
 8003824:	4828      	ldr	r0, [pc, #160]	; (80038c8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003826:	f7ff fec0 	bl	80035aa <LL_ADC_IsEnabled>
 800382a:	4603      	mov	r3, r0
 800382c:	431c      	orrs	r4, r3
 800382e:	4828      	ldr	r0, [pc, #160]	; (80038d0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003830:	f7ff febb 	bl	80035aa <LL_ADC_IsEnabled>
 8003834:	4603      	mov	r3, r0
 8003836:	4323      	orrs	r3, r4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d137      	bne.n	80038ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800383c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003844:	f023 030f 	bic.w	r3, r3, #15
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	6811      	ldr	r1, [r2, #0]
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	6892      	ldr	r2, [r2, #8]
 8003850:	430a      	orrs	r2, r1
 8003852:	431a      	orrs	r2, r3
 8003854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003856:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003858:	e028      	b.n	80038ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800385a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003864:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003866:	4817      	ldr	r0, [pc, #92]	; (80038c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003868:	f7ff fe9f 	bl	80035aa <LL_ADC_IsEnabled>
 800386c:	4604      	mov	r4, r0
 800386e:	4816      	ldr	r0, [pc, #88]	; (80038c8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003870:	f7ff fe9b 	bl	80035aa <LL_ADC_IsEnabled>
 8003874:	4603      	mov	r3, r0
 8003876:	431c      	orrs	r4, r3
 8003878:	4815      	ldr	r0, [pc, #84]	; (80038d0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800387a:	f7ff fe96 	bl	80035aa <LL_ADC_IsEnabled>
 800387e:	4603      	mov	r3, r0
 8003880:	4323      	orrs	r3, r4
 8003882:	2b00      	cmp	r3, #0
 8003884:	d112      	bne.n	80038ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800388e:	f023 030f 	bic.w	r3, r3, #15
 8003892:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003894:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003896:	e009      	b.n	80038ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389c:	f043 0220 	orr.w	r2, r3, #32
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80038aa:	e000      	b.n	80038ae <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80038b6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	377c      	adds	r7, #124	; 0x7c
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd90      	pop	{r4, r7, pc}
 80038c2:	bf00      	nop
 80038c4:	50040000 	.word	0x50040000
 80038c8:	50040100 	.word	0x50040100
 80038cc:	50040300 	.word	0x50040300
 80038d0:	50040200 	.word	0x50040200

080038d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038e4:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <__NVIC_SetPriorityGrouping+0x44>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038f0:	4013      	ands	r3, r2
 80038f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003906:	4a04      	ldr	r2, [pc, #16]	; (8003918 <__NVIC_SetPriorityGrouping+0x44>)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	60d3      	str	r3, [r2, #12]
}
 800390c:	bf00      	nop
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	e000ed00 	.word	0xe000ed00

0800391c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003920:	4b04      	ldr	r3, [pc, #16]	; (8003934 <__NVIC_GetPriorityGrouping+0x18>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	0a1b      	lsrs	r3, r3, #8
 8003926:	f003 0307 	and.w	r3, r3, #7
}
 800392a:	4618      	mov	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003946:	2b00      	cmp	r3, #0
 8003948:	db0b      	blt.n	8003962 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	f003 021f 	and.w	r2, r3, #31
 8003950:	4907      	ldr	r1, [pc, #28]	; (8003970 <__NVIC_EnableIRQ+0x38>)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	2001      	movs	r0, #1
 800395a:	fa00 f202 	lsl.w	r2, r0, r2
 800395e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	e000e100 	.word	0xe000e100

08003974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	6039      	str	r1, [r7, #0]
 800397e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003984:	2b00      	cmp	r3, #0
 8003986:	db0a      	blt.n	800399e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	b2da      	uxtb	r2, r3
 800398c:	490c      	ldr	r1, [pc, #48]	; (80039c0 <__NVIC_SetPriority+0x4c>)
 800398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003992:	0112      	lsls	r2, r2, #4
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	440b      	add	r3, r1
 8003998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800399c:	e00a      	b.n	80039b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	4908      	ldr	r1, [pc, #32]	; (80039c4 <__NVIC_SetPriority+0x50>)
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	3b04      	subs	r3, #4
 80039ac:	0112      	lsls	r2, r2, #4
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	440b      	add	r3, r1
 80039b2:	761a      	strb	r2, [r3, #24]
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	e000e100 	.word	0xe000e100
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b089      	sub	sp, #36	; 0x24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f1c3 0307 	rsb	r3, r3, #7
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	bf28      	it	cs
 80039e6:	2304      	movcs	r3, #4
 80039e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	3304      	adds	r3, #4
 80039ee:	2b06      	cmp	r3, #6
 80039f0:	d902      	bls.n	80039f8 <NVIC_EncodePriority+0x30>
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	3b03      	subs	r3, #3
 80039f6:	e000      	b.n	80039fa <NVIC_EncodePriority+0x32>
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43da      	mvns	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	43d9      	mvns	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a20:	4313      	orrs	r3, r2
         );
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3724      	adds	r7, #36	; 0x24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a40:	d301      	bcc.n	8003a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a42:	2301      	movs	r3, #1
 8003a44:	e00f      	b.n	8003a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a46:	4a0a      	ldr	r2, [pc, #40]	; (8003a70 <SysTick_Config+0x40>)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a4e:	210f      	movs	r1, #15
 8003a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a54:	f7ff ff8e 	bl	8003974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <SysTick_Config+0x40>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a5e:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <SysTick_Config+0x40>)
 8003a60:	2207      	movs	r2, #7
 8003a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	e000e010 	.word	0xe000e010

08003a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff ff29 	bl	80038d4 <__NVIC_SetPriorityGrouping>
}
 8003a82:	bf00      	nop
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b086      	sub	sp, #24
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	4603      	mov	r3, r0
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a9c:	f7ff ff3e 	bl	800391c <__NVIC_GetPriorityGrouping>
 8003aa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	6978      	ldr	r0, [r7, #20]
 8003aa8:	f7ff ff8e 	bl	80039c8 <NVIC_EncodePriority>
 8003aac:	4602      	mov	r2, r0
 8003aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff ff5d 	bl	8003974 <__NVIC_SetPriority>
}
 8003aba:	bf00      	nop
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	4603      	mov	r3, r0
 8003aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff ff31 	bl	8003938 <__NVIC_EnableIRQ>
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff ffa2 	bl	8003a30 <SysTick_Config>
 8003aec:	4603      	mov	r3, r0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e098      	b.n	8003c3c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	4b4d      	ldr	r3, [pc, #308]	; (8003c48 <HAL_DMA_Init+0x150>)
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d80f      	bhi.n	8003b36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	4b4b      	ldr	r3, [pc, #300]	; (8003c4c <HAL_DMA_Init+0x154>)
 8003b1e:	4413      	add	r3, r2
 8003b20:	4a4b      	ldr	r2, [pc, #300]	; (8003c50 <HAL_DMA_Init+0x158>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	091b      	lsrs	r3, r3, #4
 8003b28:	009a      	lsls	r2, r3, #2
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a48      	ldr	r2, [pc, #288]	; (8003c54 <HAL_DMA_Init+0x15c>)
 8003b32:	641a      	str	r2, [r3, #64]	; 0x40
 8003b34:	e00e      	b.n	8003b54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4b46      	ldr	r3, [pc, #280]	; (8003c58 <HAL_DMA_Init+0x160>)
 8003b3e:	4413      	add	r3, r2
 8003b40:	4a43      	ldr	r2, [pc, #268]	; (8003c50 <HAL_DMA_Init+0x158>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	091b      	lsrs	r3, r3, #4
 8003b48:	009a      	lsls	r2, r3, #2
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a42      	ldr	r2, [pc, #264]	; (8003c5c <HAL_DMA_Init+0x164>)
 8003b52:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bae:	d039      	beq.n	8003c24 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	4a27      	ldr	r2, [pc, #156]	; (8003c54 <HAL_DMA_Init+0x15c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d11a      	bne.n	8003bf0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003bba:	4b29      	ldr	r3, [pc, #164]	; (8003c60 <HAL_DMA_Init+0x168>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	f003 031c 	and.w	r3, r3, #28
 8003bc6:	210f      	movs	r1, #15
 8003bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	4924      	ldr	r1, [pc, #144]	; (8003c60 <HAL_DMA_Init+0x168>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003bd4:	4b22      	ldr	r3, [pc, #136]	; (8003c60 <HAL_DMA_Init+0x168>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be0:	f003 031c 	and.w	r3, r3, #28
 8003be4:	fa01 f303 	lsl.w	r3, r1, r3
 8003be8:	491d      	ldr	r1, [pc, #116]	; (8003c60 <HAL_DMA_Init+0x168>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]
 8003bee:	e019      	b.n	8003c24 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003bf0:	4b1c      	ldr	r3, [pc, #112]	; (8003c64 <HAL_DMA_Init+0x16c>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf8:	f003 031c 	and.w	r3, r3, #28
 8003bfc:	210f      	movs	r1, #15
 8003bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	4917      	ldr	r1, [pc, #92]	; (8003c64 <HAL_DMA_Init+0x16c>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c0a:	4b16      	ldr	r3, [pc, #88]	; (8003c64 <HAL_DMA_Init+0x16c>)
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6859      	ldr	r1, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	f003 031c 	and.w	r3, r3, #28
 8003c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1e:	4911      	ldr	r1, [pc, #68]	; (8003c64 <HAL_DMA_Init+0x16c>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	40020407 	.word	0x40020407
 8003c4c:	bffdfff8 	.word	0xbffdfff8
 8003c50:	cccccccd 	.word	0xcccccccd
 8003c54:	40020000 	.word	0x40020000
 8003c58:	bffdfbf8 	.word	0xbffdfbf8
 8003c5c:	40020400 	.word	0x40020400
 8003c60:	400200a8 	.word	0x400200a8
 8003c64:	400204a8 	.word	0x400204a8

08003c68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_DMA_Start_IT+0x20>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e04b      	b.n	8003d20 <HAL_DMA_Start_IT+0xb8>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d13a      	bne.n	8003d12 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0201 	bic.w	r2, r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f95f 	bl	8003f84 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 020e 	orr.w	r2, r2, #14
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	e00f      	b.n	8003d00 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0204 	bic.w	r2, r2, #4
 8003cee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 020a 	orr.w	r2, r2, #10
 8003cfe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	e005      	b.n	8003d1e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d008      	beq.n	8003d52 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2204      	movs	r2, #4
 8003d44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e022      	b.n	8003d98 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 020e 	bic.w	r2, r2, #14
 8003d60:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0201 	bic.w	r2, r2, #1
 8003d70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f003 021c 	and.w	r2, r3, #28
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	2101      	movs	r1, #1
 8003d80:	fa01 f202 	lsl.w	r2, r1, r2
 8003d84:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d005      	beq.n	8003dc8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2204      	movs	r2, #4
 8003dc0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
 8003dc6:	e029      	b.n	8003e1c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 020e 	bic.w	r2, r2, #14
 8003dd6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0201 	bic.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dec:	f003 021c 	and.w	r2, r3, #28
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	2101      	movs	r1, #1
 8003df6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	4798      	blx	r3
    }
  }
  return status;
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	f003 031c 	and.w	r3, r3, #28
 8003e46:	2204      	movs	r2, #4
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d026      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x7a>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d021      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d107      	bne.n	8003e7a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0204 	bic.w	r2, r2, #4
 8003e78:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	f003 021c 	and.w	r2, r3, #28
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	2104      	movs	r1, #4
 8003e88:	fa01 f202 	lsl.w	r2, r1, r2
 8003e8c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d071      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003e9e:	e06c      	b.n	8003f7a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea4:	f003 031c 	and.w	r3, r3, #28
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d02e      	beq.n	8003f12 <HAL_DMA_IRQHandler+0xec>
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d029      	beq.n	8003f12 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10b      	bne.n	8003ee4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 020a 	bic.w	r2, r2, #10
 8003eda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee8:	f003 021c 	and.w	r2, r3, #28
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	2102      	movs	r1, #2
 8003ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d038      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003f10:	e033      	b.n	8003f7a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	f003 031c 	and.w	r3, r3, #28
 8003f1a:	2208      	movs	r2, #8
 8003f1c:	409a      	lsls	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4013      	ands	r3, r2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d02a      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x156>
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d025      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 020e 	bic.w	r2, r2, #14
 8003f3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f44:	f003 021c 	and.w	r2, r3, #28
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d004      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f7a:	bf00      	nop
 8003f7c:	bf00      	nop
}
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	f003 021c 	and.w	r2, r3, #28
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b10      	cmp	r3, #16
 8003fb4:	d108      	bne.n	8003fc8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003fc6:	e007      	b.n	8003fd8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	60da      	str	r2, [r3, #12]
}
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ff2:	e17f      	b.n	80042f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8004000:	4013      	ands	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 8171 	beq.w	80042ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 0303 	and.w	r3, r3, #3
 8004014:	2b01      	cmp	r3, #1
 8004016:	d005      	beq.n	8004024 <HAL_GPIO_Init+0x40>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d130      	bne.n	8004086 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	2203      	movs	r2, #3
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4013      	ands	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800405a:	2201      	movs	r2, #1
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	43db      	mvns	r3, r3
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4013      	ands	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	091b      	lsrs	r3, r3, #4
 8004070:	f003 0201 	and.w	r2, r3, #1
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	4313      	orrs	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	2b03      	cmp	r3, #3
 8004090:	d118      	bne.n	80040c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004098:	2201      	movs	r2, #1
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4013      	ands	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	08db      	lsrs	r3, r3, #3
 80040ae:	f003 0201 	and.w	r2, r3, #1
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 0303 	and.w	r3, r3, #3
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d017      	beq.n	8004100 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	2203      	movs	r2, #3
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	43db      	mvns	r3, r3
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4013      	ands	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d123      	bne.n	8004154 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	08da      	lsrs	r2, r3, #3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3208      	adds	r2, #8
 8004114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004118:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	220f      	movs	r2, #15
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4013      	ands	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	08da      	lsrs	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3208      	adds	r2, #8
 800414e:	6939      	ldr	r1, [r7, #16]
 8004150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	2203      	movs	r2, #3
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	43db      	mvns	r3, r3
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4013      	ands	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 0203 	and.w	r2, r3, #3
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 80ac 	beq.w	80042ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004196:	4b5f      	ldr	r3, [pc, #380]	; (8004314 <HAL_GPIO_Init+0x330>)
 8004198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800419a:	4a5e      	ldr	r2, [pc, #376]	; (8004314 <HAL_GPIO_Init+0x330>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	6613      	str	r3, [r2, #96]	; 0x60
 80041a2:	4b5c      	ldr	r3, [pc, #368]	; (8004314 <HAL_GPIO_Init+0x330>)
 80041a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80041ae:	4a5a      	ldr	r2, [pc, #360]	; (8004318 <HAL_GPIO_Init+0x334>)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	089b      	lsrs	r3, r3, #2
 80041b4:	3302      	adds	r3, #2
 80041b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	220f      	movs	r2, #15
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	43db      	mvns	r3, r3
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4013      	ands	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041d8:	d025      	beq.n	8004226 <HAL_GPIO_Init+0x242>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a4f      	ldr	r2, [pc, #316]	; (800431c <HAL_GPIO_Init+0x338>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01f      	beq.n	8004222 <HAL_GPIO_Init+0x23e>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a4e      	ldr	r2, [pc, #312]	; (8004320 <HAL_GPIO_Init+0x33c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d019      	beq.n	800421e <HAL_GPIO_Init+0x23a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a4d      	ldr	r2, [pc, #308]	; (8004324 <HAL_GPIO_Init+0x340>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <HAL_GPIO_Init+0x236>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a4c      	ldr	r2, [pc, #304]	; (8004328 <HAL_GPIO_Init+0x344>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00d      	beq.n	8004216 <HAL_GPIO_Init+0x232>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a4b      	ldr	r2, [pc, #300]	; (800432c <HAL_GPIO_Init+0x348>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d007      	beq.n	8004212 <HAL_GPIO_Init+0x22e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a4a      	ldr	r2, [pc, #296]	; (8004330 <HAL_GPIO_Init+0x34c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d101      	bne.n	800420e <HAL_GPIO_Init+0x22a>
 800420a:	2306      	movs	r3, #6
 800420c:	e00c      	b.n	8004228 <HAL_GPIO_Init+0x244>
 800420e:	2307      	movs	r3, #7
 8004210:	e00a      	b.n	8004228 <HAL_GPIO_Init+0x244>
 8004212:	2305      	movs	r3, #5
 8004214:	e008      	b.n	8004228 <HAL_GPIO_Init+0x244>
 8004216:	2304      	movs	r3, #4
 8004218:	e006      	b.n	8004228 <HAL_GPIO_Init+0x244>
 800421a:	2303      	movs	r3, #3
 800421c:	e004      	b.n	8004228 <HAL_GPIO_Init+0x244>
 800421e:	2302      	movs	r3, #2
 8004220:	e002      	b.n	8004228 <HAL_GPIO_Init+0x244>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <HAL_GPIO_Init+0x244>
 8004226:	2300      	movs	r3, #0
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	f002 0203 	and.w	r2, r2, #3
 800422e:	0092      	lsls	r2, r2, #2
 8004230:	4093      	lsls	r3, r2
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004238:	4937      	ldr	r1, [pc, #220]	; (8004318 <HAL_GPIO_Init+0x334>)
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	089b      	lsrs	r3, r3, #2
 800423e:	3302      	adds	r3, #2
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004246:	4b3b      	ldr	r3, [pc, #236]	; (8004334 <HAL_GPIO_Init+0x350>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	43db      	mvns	r3, r3
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4013      	ands	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800426a:	4a32      	ldr	r2, [pc, #200]	; (8004334 <HAL_GPIO_Init+0x350>)
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004270:	4b30      	ldr	r3, [pc, #192]	; (8004334 <HAL_GPIO_Init+0x350>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	43db      	mvns	r3, r3
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4013      	ands	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004294:	4a27      	ldr	r2, [pc, #156]	; (8004334 <HAL_GPIO_Init+0x350>)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800429a:	4b26      	ldr	r3, [pc, #152]	; (8004334 <HAL_GPIO_Init+0x350>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	43db      	mvns	r3, r3
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4013      	ands	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042be:	4a1d      	ldr	r2, [pc, #116]	; (8004334 <HAL_GPIO_Init+0x350>)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80042c4:	4b1b      	ldr	r3, [pc, #108]	; (8004334 <HAL_GPIO_Init+0x350>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	43db      	mvns	r3, r3
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4013      	ands	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042e8:	4a12      	ldr	r2, [pc, #72]	; (8004334 <HAL_GPIO_Init+0x350>)
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	3301      	adds	r3, #1
 80042f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	fa22 f303 	lsr.w	r3, r2, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f47f ae78 	bne.w	8003ff4 <HAL_GPIO_Init+0x10>
  }
}
 8004304:	bf00      	nop
 8004306:	bf00      	nop
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000
 8004318:	40010000 	.word	0x40010000
 800431c:	48000400 	.word	0x48000400
 8004320:	48000800 	.word	0x48000800
 8004324:	48000c00 	.word	0x48000c00
 8004328:	48001000 	.word	0x48001000
 800432c:	48001400 	.word	0x48001400
 8004330:	48001800 	.word	0x48001800
 8004334:	40010400 	.word	0x40010400

08004338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	807b      	strh	r3, [r7, #2]
 8004344:	4613      	mov	r3, r2
 8004346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004348:	787b      	ldrb	r3, [r7, #1]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800434e:	887a      	ldrh	r2, [r7, #2]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004354:	e002      	b.n	800435c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004356:	887a      	ldrh	r2, [r7, #2]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800437a:	887a      	ldrh	r2, [r7, #2]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4013      	ands	r3, r2
 8004380:	041a      	lsls	r2, r3, #16
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	43d9      	mvns	r1, r3
 8004386:	887b      	ldrh	r3, [r7, #2]
 8004388:	400b      	ands	r3, r1
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	619a      	str	r2, [r3, #24]
}
 8004390:	bf00      	nop
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80043a0:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40007000 	.word	0x40007000

080043b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c6:	d130      	bne.n	800442a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043c8:	4b23      	ldr	r3, [pc, #140]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043d4:	d038      	beq.n	8004448 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043d6:	4b20      	ldr	r3, [pc, #128]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043de:	4a1e      	ldr	r2, [pc, #120]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043e6:	4b1d      	ldr	r3, [pc, #116]	; (800445c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2232      	movs	r2, #50	; 0x32
 80043ec:	fb02 f303 	mul.w	r3, r2, r3
 80043f0:	4a1b      	ldr	r2, [pc, #108]	; (8004460 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80043f2:	fba2 2303 	umull	r2, r3, r2, r3
 80043f6:	0c9b      	lsrs	r3, r3, #18
 80043f8:	3301      	adds	r3, #1
 80043fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043fc:	e002      	b.n	8004404 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3b01      	subs	r3, #1
 8004402:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004404:	4b14      	ldr	r3, [pc, #80]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004410:	d102      	bne.n	8004418 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1f2      	bne.n	80043fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004418:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004424:	d110      	bne.n	8004448 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e00f      	b.n	800444a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800442a:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004436:	d007      	beq.n	8004448 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004438:	4b07      	ldr	r3, [pc, #28]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004440:	4a05      	ldr	r2, [pc, #20]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004446:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40007000 	.word	0x40007000
 800445c:	20000000 	.word	0x20000000
 8004460:	431bde83 	.word	0x431bde83

08004464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e3c6      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004476:	4ba1      	ldr	r3, [pc, #644]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 030c 	and.w	r3, r3, #12
 800447e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004480:	4b9e      	ldr	r3, [pc, #632]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f003 0303 	and.w	r3, r3, #3
 8004488:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0310 	and.w	r3, r3, #16
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 80e4 	beq.w	8004660 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d007      	beq.n	80044ae <HAL_RCC_OscConfig+0x4a>
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	2b0c      	cmp	r3, #12
 80044a2:	f040 808b 	bne.w	80045bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	f040 8087 	bne.w	80045bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044ae:	4b93      	ldr	r3, [pc, #588]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <HAL_RCC_OscConfig+0x62>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e39e      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1a      	ldr	r2, [r3, #32]
 80044ca:	4b8c      	ldr	r3, [pc, #560]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d004      	beq.n	80044e0 <HAL_RCC_OscConfig+0x7c>
 80044d6:	4b89      	ldr	r3, [pc, #548]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044de:	e005      	b.n	80044ec <HAL_RCC_OscConfig+0x88>
 80044e0:	4b86      	ldr	r3, [pc, #536]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80044e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044e6:	091b      	lsrs	r3, r3, #4
 80044e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d223      	bcs.n	8004538 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 fd53 	bl	8004fa0 <RCC_SetFlashLatencyFromMSIRange>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e37f      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004504:	4b7d      	ldr	r3, [pc, #500]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a7c      	ldr	r2, [pc, #496]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 800450a:	f043 0308 	orr.w	r3, r3, #8
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	4b7a      	ldr	r3, [pc, #488]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	4977      	ldr	r1, [pc, #476]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 800451e:	4313      	orrs	r3, r2
 8004520:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004522:	4b76      	ldr	r3, [pc, #472]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	021b      	lsls	r3, r3, #8
 8004530:	4972      	ldr	r1, [pc, #456]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004532:	4313      	orrs	r3, r2
 8004534:	604b      	str	r3, [r1, #4]
 8004536:	e025      	b.n	8004584 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004538:	4b70      	ldr	r3, [pc, #448]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a6f      	ldr	r2, [pc, #444]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 800453e:	f043 0308 	orr.w	r3, r3, #8
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	4b6d      	ldr	r3, [pc, #436]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	496a      	ldr	r1, [pc, #424]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004552:	4313      	orrs	r3, r2
 8004554:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004556:	4b69      	ldr	r3, [pc, #420]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	021b      	lsls	r3, r3, #8
 8004564:	4965      	ldr	r1, [pc, #404]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004566:	4313      	orrs	r3, r2
 8004568:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d109      	bne.n	8004584 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fd13 	bl	8004fa0 <RCC_SetFlashLatencyFromMSIRange>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e33f      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004584:	f000 fc48 	bl	8004e18 <HAL_RCC_GetSysClockFreq>
 8004588:	4602      	mov	r2, r0
 800458a:	4b5c      	ldr	r3, [pc, #368]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	091b      	lsrs	r3, r3, #4
 8004590:	f003 030f 	and.w	r3, r3, #15
 8004594:	495a      	ldr	r1, [pc, #360]	; (8004700 <HAL_RCC_OscConfig+0x29c>)
 8004596:	5ccb      	ldrb	r3, [r1, r3]
 8004598:	f003 031f 	and.w	r3, r3, #31
 800459c:	fa22 f303 	lsr.w	r3, r2, r3
 80045a0:	4a58      	ldr	r2, [pc, #352]	; (8004704 <HAL_RCC_OscConfig+0x2a0>)
 80045a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045a4:	4b58      	ldr	r3, [pc, #352]	; (8004708 <HAL_RCC_OscConfig+0x2a4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fd fa6f 	bl	8001a8c <HAL_InitTick>
 80045ae:	4603      	mov	r3, r0
 80045b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d052      	beq.n	800465e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	e323      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d032      	beq.n	800462a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045c4:	4b4d      	ldr	r3, [pc, #308]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a4c      	ldr	r2, [pc, #304]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045d0:	f7fd faac 	bl	8001b2c <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045d8:	f7fd faa8 	bl	8001b2c <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e30c      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045ea:	4b44      	ldr	r3, [pc, #272]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f0      	beq.n	80045d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f6:	4b41      	ldr	r3, [pc, #260]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a40      	ldr	r2, [pc, #256]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80045fc:	f043 0308 	orr.w	r3, r3, #8
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	4b3e      	ldr	r3, [pc, #248]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	493b      	ldr	r1, [pc, #236]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004610:	4313      	orrs	r3, r2
 8004612:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004614:	4b39      	ldr	r3, [pc, #228]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	021b      	lsls	r3, r3, #8
 8004622:	4936      	ldr	r1, [pc, #216]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004624:	4313      	orrs	r3, r2
 8004626:	604b      	str	r3, [r1, #4]
 8004628:	e01a      	b.n	8004660 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800462a:	4b34      	ldr	r3, [pc, #208]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a33      	ldr	r2, [pc, #204]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004630:	f023 0301 	bic.w	r3, r3, #1
 8004634:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004636:	f7fd fa79 	bl	8001b2c <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800463e:	f7fd fa75 	bl	8001b2c <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e2d9      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004650:	4b2a      	ldr	r3, [pc, #168]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1f0      	bne.n	800463e <HAL_RCC_OscConfig+0x1da>
 800465c:	e000      	b.n	8004660 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800465e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d074      	beq.n	8004756 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2b08      	cmp	r3, #8
 8004670:	d005      	beq.n	800467e <HAL_RCC_OscConfig+0x21a>
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	2b0c      	cmp	r3, #12
 8004676:	d10e      	bne.n	8004696 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2b03      	cmp	r3, #3
 800467c:	d10b      	bne.n	8004696 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800467e:	4b1f      	ldr	r3, [pc, #124]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d064      	beq.n	8004754 <HAL_RCC_OscConfig+0x2f0>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d160      	bne.n	8004754 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e2b6      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469e:	d106      	bne.n	80046ae <HAL_RCC_OscConfig+0x24a>
 80046a0:	4b16      	ldr	r3, [pc, #88]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a15      	ldr	r2, [pc, #84]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80046a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	e01d      	b.n	80046ea <HAL_RCC_OscConfig+0x286>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046b6:	d10c      	bne.n	80046d2 <HAL_RCC_OscConfig+0x26e>
 80046b8:	4b10      	ldr	r3, [pc, #64]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a0f      	ldr	r2, [pc, #60]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80046be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046c2:	6013      	str	r3, [r2, #0]
 80046c4:	4b0d      	ldr	r3, [pc, #52]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a0c      	ldr	r2, [pc, #48]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80046ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	e00b      	b.n	80046ea <HAL_RCC_OscConfig+0x286>
 80046d2:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a09      	ldr	r2, [pc, #36]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80046d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	4b07      	ldr	r3, [pc, #28]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a06      	ldr	r2, [pc, #24]	; (80046fc <HAL_RCC_OscConfig+0x298>)
 80046e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d01c      	beq.n	800472c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f2:	f7fd fa1b 	bl	8001b2c <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046f8:	e011      	b.n	800471e <HAL_RCC_OscConfig+0x2ba>
 80046fa:	bf00      	nop
 80046fc:	40021000 	.word	0x40021000
 8004700:	08009aec 	.word	0x08009aec
 8004704:	20000000 	.word	0x20000000
 8004708:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800470c:	f7fd fa0e 	bl	8001b2c <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b64      	cmp	r3, #100	; 0x64
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e272      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800471e:	4baf      	ldr	r3, [pc, #700]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0x2a8>
 800472a:	e014      	b.n	8004756 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472c:	f7fd f9fe 	bl	8001b2c <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004734:	f7fd f9fa 	bl	8001b2c <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b64      	cmp	r3, #100	; 0x64
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e25e      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004746:	4ba5      	ldr	r3, [pc, #660]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x2d0>
 8004752:	e000      	b.n	8004756 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d060      	beq.n	8004824 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	2b04      	cmp	r3, #4
 8004766:	d005      	beq.n	8004774 <HAL_RCC_OscConfig+0x310>
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	2b0c      	cmp	r3, #12
 800476c:	d119      	bne.n	80047a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b02      	cmp	r3, #2
 8004772:	d116      	bne.n	80047a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004774:	4b99      	ldr	r3, [pc, #612]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_RCC_OscConfig+0x328>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e23b      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800478c:	4b93      	ldr	r3, [pc, #588]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	061b      	lsls	r3, r3, #24
 800479a:	4990      	ldr	r1, [pc, #576]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800479c:	4313      	orrs	r3, r2
 800479e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047a0:	e040      	b.n	8004824 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d023      	beq.n	80047f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047aa:	4b8c      	ldr	r3, [pc, #560]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a8b      	ldr	r2, [pc, #556]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80047b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b6:	f7fd f9b9 	bl	8001b2c <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047be:	f7fd f9b5 	bl	8001b2c <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e219      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047d0:	4b82      	ldr	r3, [pc, #520]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0f0      	beq.n	80047be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047dc:	4b7f      	ldr	r3, [pc, #508]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	061b      	lsls	r3, r3, #24
 80047ea:	497c      	ldr	r1, [pc, #496]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	604b      	str	r3, [r1, #4]
 80047f0:	e018      	b.n	8004824 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047f2:	4b7a      	ldr	r3, [pc, #488]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a79      	ldr	r2, [pc, #484]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80047f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fe:	f7fd f995 	bl	8001b2c <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004806:	f7fd f991 	bl	8001b2c <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e1f5      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004818:	4b70      	ldr	r3, [pc, #448]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1f0      	bne.n	8004806 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b00      	cmp	r3, #0
 800482e:	d03c      	beq.n	80048aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d01c      	beq.n	8004872 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004838:	4b68      	ldr	r3, [pc, #416]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800483a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800483e:	4a67      	ldr	r2, [pc, #412]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004840:	f043 0301 	orr.w	r3, r3, #1
 8004844:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004848:	f7fd f970 	bl	8001b2c <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004850:	f7fd f96c 	bl	8001b2c <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e1d0      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004862:	4b5e      	ldr	r3, [pc, #376]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0ef      	beq.n	8004850 <HAL_RCC_OscConfig+0x3ec>
 8004870:	e01b      	b.n	80048aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004872:	4b5a      	ldr	r3, [pc, #360]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004878:	4a58      	ldr	r2, [pc, #352]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800487a:	f023 0301 	bic.w	r3, r3, #1
 800487e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004882:	f7fd f953 	bl	8001b2c <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800488a:	f7fd f94f 	bl	8001b2c <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e1b3      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800489c:	4b4f      	ldr	r3, [pc, #316]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800489e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1ef      	bne.n	800488a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 80a6 	beq.w	8004a04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b8:	2300      	movs	r3, #0
 80048ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048bc:	4b47      	ldr	r3, [pc, #284]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80048be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10d      	bne.n	80048e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c8:	4b44      	ldr	r3, [pc, #272]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80048ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048cc:	4a43      	ldr	r2, [pc, #268]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80048ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d2:	6593      	str	r3, [r2, #88]	; 0x58
 80048d4:	4b41      	ldr	r3, [pc, #260]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80048d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048dc:	60bb      	str	r3, [r7, #8]
 80048de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048e0:	2301      	movs	r3, #1
 80048e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048e4:	4b3e      	ldr	r3, [pc, #248]	; (80049e0 <HAL_RCC_OscConfig+0x57c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d118      	bne.n	8004922 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048f0:	4b3b      	ldr	r3, [pc, #236]	; (80049e0 <HAL_RCC_OscConfig+0x57c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a3a      	ldr	r2, [pc, #232]	; (80049e0 <HAL_RCC_OscConfig+0x57c>)
 80048f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048fc:	f7fd f916 	bl	8001b2c <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004904:	f7fd f912 	bl	8001b2c <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e176      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004916:	4b32      	ldr	r3, [pc, #200]	; (80049e0 <HAL_RCC_OscConfig+0x57c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0f0      	beq.n	8004904 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d108      	bne.n	800493c <HAL_RCC_OscConfig+0x4d8>
 800492a:	4b2c      	ldr	r3, [pc, #176]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800492c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004930:	4a2a      	ldr	r2, [pc, #168]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800493a:	e024      	b.n	8004986 <HAL_RCC_OscConfig+0x522>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b05      	cmp	r3, #5
 8004942:	d110      	bne.n	8004966 <HAL_RCC_OscConfig+0x502>
 8004944:	4b25      	ldr	r3, [pc, #148]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494a:	4a24      	ldr	r2, [pc, #144]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800494c:	f043 0304 	orr.w	r3, r3, #4
 8004950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004954:	4b21      	ldr	r3, [pc, #132]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495a:	4a20      	ldr	r2, [pc, #128]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800495c:	f043 0301 	orr.w	r3, r3, #1
 8004960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004964:	e00f      	b.n	8004986 <HAL_RCC_OscConfig+0x522>
 8004966:	4b1d      	ldr	r3, [pc, #116]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496c:	4a1b      	ldr	r2, [pc, #108]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800496e:	f023 0301 	bic.w	r3, r3, #1
 8004972:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004976:	4b19      	ldr	r3, [pc, #100]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 8004978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497c:	4a17      	ldr	r2, [pc, #92]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 800497e:	f023 0304 	bic.w	r3, r3, #4
 8004982:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d016      	beq.n	80049bc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498e:	f7fd f8cd 	bl	8001b2c <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004994:	e00a      	b.n	80049ac <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004996:	f7fd f8c9 	bl	8001b2c <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e12b      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ac:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <HAL_RCC_OscConfig+0x578>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0ed      	beq.n	8004996 <HAL_RCC_OscConfig+0x532>
 80049ba:	e01a      	b.n	80049f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049bc:	f7fd f8b6 	bl	8001b2c <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049c2:	e00f      	b.n	80049e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c4:	f7fd f8b2 	bl	8001b2c <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d906      	bls.n	80049e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e114      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
 80049da:	bf00      	nop
 80049dc:	40021000 	.word	0x40021000
 80049e0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049e4:	4b89      	ldr	r3, [pc, #548]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 80049e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e8      	bne.n	80049c4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049f2:	7ffb      	ldrb	r3, [r7, #31]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d105      	bne.n	8004a04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f8:	4b84      	ldr	r3, [pc, #528]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 80049fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fc:	4a83      	ldr	r2, [pc, #524]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 80049fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a02:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 80fa 	beq.w	8004c02 <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	f040 80d0 	bne.w	8004bb8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a18:	4b7c      	ldr	r3, [pc, #496]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f003 0203 	and.w	r2, r3, #3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d130      	bne.n	8004a8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a36:	3b01      	subs	r3, #1
 8004a38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d127      	bne.n	8004a8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a48:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d11f      	bne.n	8004a8e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a58:	2a07      	cmp	r2, #7
 8004a5a:	bf14      	ite	ne
 8004a5c:	2201      	movne	r2, #1
 8004a5e:	2200      	moveq	r2, #0
 8004a60:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d113      	bne.n	8004a8e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a70:	085b      	lsrs	r3, r3, #1
 8004a72:	3b01      	subs	r3, #1
 8004a74:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d109      	bne.n	8004a8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	085b      	lsrs	r3, r3, #1
 8004a86:	3b01      	subs	r3, #1
 8004a88:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d06e      	beq.n	8004b6c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b0c      	cmp	r3, #12
 8004a92:	d069      	beq.n	8004b68 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a94:	4b5d      	ldr	r3, [pc, #372]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d105      	bne.n	8004aac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004aa0:	4b5a      	ldr	r3, [pc, #360]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0a9      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ab0:	4b56      	ldr	r3, [pc, #344]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a55      	ldr	r2, [pc, #340]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004ab6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004abc:	f7fd f836 	bl	8001b2c <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac4:	f7fd f832 	bl	8001b2c <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e096      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ad6:	4b4d      	ldr	r3, [pc, #308]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f0      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ae2:	4b4a      	ldr	r3, [pc, #296]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	4b4a      	ldr	r3, [pc, #296]	; (8004c10 <HAL_RCC_OscConfig+0x7ac>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004af2:	3a01      	subs	r2, #1
 8004af4:	0112      	lsls	r2, r2, #4
 8004af6:	4311      	orrs	r1, r2
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004afc:	0212      	lsls	r2, r2, #8
 8004afe:	4311      	orrs	r1, r2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b04:	0852      	lsrs	r2, r2, #1
 8004b06:	3a01      	subs	r2, #1
 8004b08:	0552      	lsls	r2, r2, #21
 8004b0a:	4311      	orrs	r1, r2
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b10:	0852      	lsrs	r2, r2, #1
 8004b12:	3a01      	subs	r2, #1
 8004b14:	0652      	lsls	r2, r2, #25
 8004b16:	4311      	orrs	r1, r2
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b1c:	0912      	lsrs	r2, r2, #4
 8004b1e:	0452      	lsls	r2, r2, #17
 8004b20:	430a      	orrs	r2, r1
 8004b22:	493a      	ldr	r1, [pc, #232]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b28:	4b38      	ldr	r3, [pc, #224]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a37      	ldr	r2, [pc, #220]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b34:	4b35      	ldr	r3, [pc, #212]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	4a34      	ldr	r2, [pc, #208]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b40:	f7fc fff4 	bl	8001b2c <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b48:	f7fc fff0 	bl	8001b2c <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e054      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b5a:	4b2c      	ldr	r3, [pc, #176]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f0      	beq.n	8004b48 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b66:	e04c      	b.n	8004c02 <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e04b      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b6c:	4b27      	ldr	r3, [pc, #156]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d144      	bne.n	8004c02 <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b78:	4b24      	ldr	r3, [pc, #144]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a23      	ldr	r2, [pc, #140]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b84:	4b21      	ldr	r3, [pc, #132]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	4a20      	ldr	r2, [pc, #128]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b90:	f7fc ffcc 	bl	8001b2c <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b98:	f7fc ffc8 	bl	8001b2c <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e02c      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004baa:	4b18      	ldr	r3, [pc, #96]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0f0      	beq.n	8004b98 <HAL_RCC_OscConfig+0x734>
 8004bb6:	e024      	b.n	8004c02 <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	2b0c      	cmp	r3, #12
 8004bbc:	d01f      	beq.n	8004bfe <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bbe:	4b13      	ldr	r3, [pc, #76]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a12      	ldr	r2, [pc, #72]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004bc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bca:	f7fc ffaf 	bl	8001b2c <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd2:	f7fc ffab 	bl	8001b2c <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e00f      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004be4:	4b09      	ldr	r3, [pc, #36]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f0      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004bf0:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	4905      	ldr	r1, [pc, #20]	; (8004c0c <HAL_RCC_OscConfig+0x7a8>)
 8004bf6:	4b07      	ldr	r3, [pc, #28]	; (8004c14 <HAL_RCC_OscConfig+0x7b0>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	60cb      	str	r3, [r1, #12]
 8004bfc:	e001      	b.n	8004c02 <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3720      	adds	r7, #32
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	f99d808c 	.word	0xf99d808c
 8004c14:	feeefffc 	.word	0xfeeefffc

08004c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e0e7      	b.n	8004dfc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c2c:	4b75      	ldr	r3, [pc, #468]	; (8004e04 <HAL_RCC_ClockConfig+0x1ec>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d910      	bls.n	8004c5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3a:	4b72      	ldr	r3, [pc, #456]	; (8004e04 <HAL_RCC_ClockConfig+0x1ec>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f023 0207 	bic.w	r2, r3, #7
 8004c42:	4970      	ldr	r1, [pc, #448]	; (8004e04 <HAL_RCC_ClockConfig+0x1ec>)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4a:	4b6e      	ldr	r3, [pc, #440]	; (8004e04 <HAL_RCC_ClockConfig+0x1ec>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d001      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e0cf      	b.n	8004dfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d010      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	4b66      	ldr	r3, [pc, #408]	; (8004e08 <HAL_RCC_ClockConfig+0x1f0>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d908      	bls.n	8004c8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c78:	4b63      	ldr	r3, [pc, #396]	; (8004e08 <HAL_RCC_ClockConfig+0x1f0>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	4960      	ldr	r1, [pc, #384]	; (8004e08 <HAL_RCC_ClockConfig+0x1f0>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d04c      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	d107      	bne.n	8004cae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c9e:	4b5a      	ldr	r3, [pc, #360]	; (8004e08 <HAL_RCC_ClockConfig+0x1f0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d121      	bne.n	8004cee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e0a6      	b.n	8004dfc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d107      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cb6:	4b54      	ldr	r3, [pc, #336]	; (8004e08 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d115      	bne.n	8004cee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e09a      	b.n	8004dfc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d107      	bne.n	8004cde <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cce:	4b4e      	ldr	r3, [pc, #312]	; (8004e08 <HAL_RCC_ClockConfig+0x1f0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d109      	bne.n	8004cee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e08e      	b.n	8004dfc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cde:	4b4a      	ldr	r3, [pc, #296]	; (8004e08 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e086      	b.n	8004dfc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cee:	4b46      	ldr	r3, [pc, #280]	; (8004e08 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f023 0203 	bic.w	r2, r3, #3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	4943      	ldr	r1, [pc, #268]	; (8004e08 <HAL_RCC_ClockConfig+0x1f0>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d00:	f7fc ff14 	bl	8001b2c <HAL_GetTick>
 8004d04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d06:	e00a      	b.n	8004d1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d08:	f7fc ff10 	bl	8001b2c <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e06e      	b.n	8004dfc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d1e:	4b3a      	ldr	r3, [pc, #232]	; (8004e08 <HAL_RCC_ClockConfig+0x1f0>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 020c 	and.w	r2, r3, #12
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d1eb      	bne.n	8004d08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d010      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	4b31      	ldr	r3, [pc, #196]	; (8004e08 <HAL_RCC_ClockConfig+0x1f0>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d208      	bcs.n	8004d5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d4c:	4b2e      	ldr	r3, [pc, #184]	; (8004e08 <HAL_RCC_ClockConfig+0x1f0>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	492b      	ldr	r1, [pc, #172]	; (8004e08 <HAL_RCC_ClockConfig+0x1f0>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d5e:	4b29      	ldr	r3, [pc, #164]	; (8004e04 <HAL_RCC_ClockConfig+0x1ec>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d210      	bcs.n	8004d8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d6c:	4b25      	ldr	r3, [pc, #148]	; (8004e04 <HAL_RCC_ClockConfig+0x1ec>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f023 0207 	bic.w	r2, r3, #7
 8004d74:	4923      	ldr	r1, [pc, #140]	; (8004e04 <HAL_RCC_ClockConfig+0x1ec>)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d7c:	4b21      	ldr	r3, [pc, #132]	; (8004e04 <HAL_RCC_ClockConfig+0x1ec>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d001      	beq.n	8004d8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e036      	b.n	8004dfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d008      	beq.n	8004dac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d9a:	4b1b      	ldr	r3, [pc, #108]	; (8004e08 <HAL_RCC_ClockConfig+0x1f0>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	4918      	ldr	r1, [pc, #96]	; (8004e08 <HAL_RCC_ClockConfig+0x1f0>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d009      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004db8:	4b13      	ldr	r3, [pc, #76]	; (8004e08 <HAL_RCC_ClockConfig+0x1f0>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	4910      	ldr	r1, [pc, #64]	; (8004e08 <HAL_RCC_ClockConfig+0x1f0>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004dcc:	f000 f824 	bl	8004e18 <HAL_RCC_GetSysClockFreq>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	4b0d      	ldr	r3, [pc, #52]	; (8004e08 <HAL_RCC_ClockConfig+0x1f0>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	091b      	lsrs	r3, r3, #4
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	490b      	ldr	r1, [pc, #44]	; (8004e0c <HAL_RCC_ClockConfig+0x1f4>)
 8004dde:	5ccb      	ldrb	r3, [r1, r3]
 8004de0:	f003 031f 	and.w	r3, r3, #31
 8004de4:	fa22 f303 	lsr.w	r3, r2, r3
 8004de8:	4a09      	ldr	r2, [pc, #36]	; (8004e10 <HAL_RCC_ClockConfig+0x1f8>)
 8004dea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004dec:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <HAL_RCC_ClockConfig+0x1fc>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7fc fe4b 	bl	8001a8c <HAL_InitTick>
 8004df6:	4603      	mov	r3, r0
 8004df8:	72fb      	strb	r3, [r7, #11]

  return status;
 8004dfa:	7afb      	ldrb	r3, [r7, #11]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40022000 	.word	0x40022000
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	08009aec 	.word	0x08009aec
 8004e10:	20000000 	.word	0x20000000
 8004e14:	20000004 	.word	0x20000004

08004e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b089      	sub	sp, #36	; 0x24
 8004e1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61fb      	str	r3, [r7, #28]
 8004e22:	2300      	movs	r3, #0
 8004e24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e26:	4b3e      	ldr	r3, [pc, #248]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
 8004e2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e30:	4b3b      	ldr	r3, [pc, #236]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f003 0303 	and.w	r3, r3, #3
 8004e38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <HAL_RCC_GetSysClockFreq+0x34>
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	2b0c      	cmp	r3, #12
 8004e44:	d121      	bne.n	8004e8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d11e      	bne.n	8004e8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e4c:	4b34      	ldr	r3, [pc, #208]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d107      	bne.n	8004e68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e58:	4b31      	ldr	r3, [pc, #196]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e5e:	0a1b      	lsrs	r3, r3, #8
 8004e60:	f003 030f 	and.w	r3, r3, #15
 8004e64:	61fb      	str	r3, [r7, #28]
 8004e66:	e005      	b.n	8004e74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e68:	4b2d      	ldr	r3, [pc, #180]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	091b      	lsrs	r3, r3, #4
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e74:	4a2b      	ldr	r2, [pc, #172]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10d      	bne.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e88:	e00a      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	2b04      	cmp	r3, #4
 8004e8e:	d102      	bne.n	8004e96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e90:	4b25      	ldr	r3, [pc, #148]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e92:	61bb      	str	r3, [r7, #24]
 8004e94:	e004      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d101      	bne.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e9c:	4b23      	ldr	r3, [pc, #140]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x114>)
 8004e9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	2b0c      	cmp	r3, #12
 8004ea4:	d134      	bne.n	8004f10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ea6:	4b1e      	ldr	r3, [pc, #120]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d003      	beq.n	8004ebe <HAL_RCC_GetSysClockFreq+0xa6>
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d003      	beq.n	8004ec4 <HAL_RCC_GetSysClockFreq+0xac>
 8004ebc:	e005      	b.n	8004eca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ebe:	4b1a      	ldr	r3, [pc, #104]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ec0:	617b      	str	r3, [r7, #20]
      break;
 8004ec2:	e005      	b.n	8004ed0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ec4:	4b19      	ldr	r3, [pc, #100]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x114>)
 8004ec6:	617b      	str	r3, [r7, #20]
      break;
 8004ec8:	e002      	b.n	8004ed0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	617b      	str	r3, [r7, #20]
      break;
 8004ece:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ed0:	4b13      	ldr	r3, [pc, #76]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	091b      	lsrs	r3, r3, #4
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	3301      	adds	r3, #1
 8004edc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ede:	4b10      	ldr	r3, [pc, #64]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	0a1b      	lsrs	r3, r3, #8
 8004ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	fb02 f203 	mul.w	r2, r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ef6:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	0e5b      	lsrs	r3, r3, #25
 8004efc:	f003 0303 	and.w	r3, r3, #3
 8004f00:	3301      	adds	r3, #1
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f10:	69bb      	ldr	r3, [r7, #24]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3724      	adds	r7, #36	; 0x24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40021000 	.word	0x40021000
 8004f24:	08009b04 	.word	0x08009b04
 8004f28:	00f42400 	.word	0x00f42400
 8004f2c:	007a1200 	.word	0x007a1200

08004f30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f34:	4b03      	ldr	r3, [pc, #12]	; (8004f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f36:	681b      	ldr	r3, [r3, #0]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	20000000 	.word	0x20000000

08004f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f4c:	f7ff fff0 	bl	8004f30 <HAL_RCC_GetHCLKFreq>
 8004f50:	4602      	mov	r2, r0
 8004f52:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	0a1b      	lsrs	r3, r3, #8
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	4904      	ldr	r1, [pc, #16]	; (8004f70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f5e:	5ccb      	ldrb	r3, [r1, r3]
 8004f60:	f003 031f 	and.w	r3, r3, #31
 8004f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	08009afc 	.word	0x08009afc

08004f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f78:	f7ff ffda 	bl	8004f30 <HAL_RCC_GetHCLKFreq>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	0adb      	lsrs	r3, r3, #11
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	4904      	ldr	r1, [pc, #16]	; (8004f9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f8a:	5ccb      	ldrb	r3, [r1, r3]
 8004f8c:	f003 031f 	and.w	r3, r3, #31
 8004f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	08009afc 	.word	0x08009afc

08004fa0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004fa8:	2300      	movs	r3, #0
 8004faa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004fac:	4b2a      	ldr	r3, [pc, #168]	; (8005058 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004fb8:	f7ff f9f0 	bl	800439c <HAL_PWREx_GetVoltageRange>
 8004fbc:	6178      	str	r0, [r7, #20]
 8004fbe:	e014      	b.n	8004fea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fc0:	4b25      	ldr	r3, [pc, #148]	; (8005058 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc4:	4a24      	ldr	r2, [pc, #144]	; (8005058 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fca:	6593      	str	r3, [r2, #88]	; 0x58
 8004fcc:	4b22      	ldr	r3, [pc, #136]	; (8005058 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fd8:	f7ff f9e0 	bl	800439c <HAL_PWREx_GetVoltageRange>
 8004fdc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004fde:	4b1e      	ldr	r3, [pc, #120]	; (8005058 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe2:	4a1d      	ldr	r2, [pc, #116]	; (8005058 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ff0:	d10b      	bne.n	800500a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b80      	cmp	r3, #128	; 0x80
 8004ff6:	d919      	bls.n	800502c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2ba0      	cmp	r3, #160	; 0xa0
 8004ffc:	d902      	bls.n	8005004 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ffe:	2302      	movs	r3, #2
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	e013      	b.n	800502c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005004:	2301      	movs	r3, #1
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	e010      	b.n	800502c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b80      	cmp	r3, #128	; 0x80
 800500e:	d902      	bls.n	8005016 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005010:	2303      	movs	r3, #3
 8005012:	613b      	str	r3, [r7, #16]
 8005014:	e00a      	b.n	800502c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b80      	cmp	r3, #128	; 0x80
 800501a:	d102      	bne.n	8005022 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800501c:	2302      	movs	r3, #2
 800501e:	613b      	str	r3, [r7, #16]
 8005020:	e004      	b.n	800502c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b70      	cmp	r3, #112	; 0x70
 8005026:	d101      	bne.n	800502c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005028:	2301      	movs	r3, #1
 800502a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800502c:	4b0b      	ldr	r3, [pc, #44]	; (800505c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f023 0207 	bic.w	r2, r3, #7
 8005034:	4909      	ldr	r1, [pc, #36]	; (800505c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800503c:	4b07      	ldr	r3, [pc, #28]	; (800505c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	429a      	cmp	r2, r3
 8005048:	d001      	beq.n	800504e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e000      	b.n	8005050 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	40021000 	.word	0x40021000
 800505c:	40022000 	.word	0x40022000

08005060 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005068:	2300      	movs	r3, #0
 800506a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800506c:	2300      	movs	r3, #0
 800506e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005078:	2b00      	cmp	r3, #0
 800507a:	d041      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005080:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005084:	d02a      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005086:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800508a:	d824      	bhi.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800508c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005090:	d008      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005092:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005096:	d81e      	bhi.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800509c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050a0:	d010      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050a2:	e018      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050a4:	4b86      	ldr	r3, [pc, #536]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	4a85      	ldr	r2, [pc, #532]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050b0:	e015      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3304      	adds	r3, #4
 80050b6:	2100      	movs	r1, #0
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 fabb 	bl	8005634 <RCCEx_PLLSAI1_Config>
 80050be:	4603      	mov	r3, r0
 80050c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050c2:	e00c      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3320      	adds	r3, #32
 80050c8:	2100      	movs	r1, #0
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fba6 	bl	800581c <RCCEx_PLLSAI2_Config>
 80050d0:	4603      	mov	r3, r0
 80050d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050d4:	e003      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	74fb      	strb	r3, [r7, #19]
      break;
 80050da:	e000      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80050dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050de:	7cfb      	ldrb	r3, [r7, #19]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10b      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050e4:	4b76      	ldr	r3, [pc, #472]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050f2:	4973      	ldr	r1, [pc, #460]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050fa:	e001      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fc:	7cfb      	ldrb	r3, [r7, #19]
 80050fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d041      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005110:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005114:	d02a      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005116:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800511a:	d824      	bhi.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800511c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005120:	d008      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005122:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005126:	d81e      	bhi.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800512c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005130:	d010      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005132:	e018      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005134:	4b62      	ldr	r3, [pc, #392]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	4a61      	ldr	r2, [pc, #388]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800513a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800513e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005140:	e015      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3304      	adds	r3, #4
 8005146:	2100      	movs	r1, #0
 8005148:	4618      	mov	r0, r3
 800514a:	f000 fa73 	bl	8005634 <RCCEx_PLLSAI1_Config>
 800514e:	4603      	mov	r3, r0
 8005150:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005152:	e00c      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3320      	adds	r3, #32
 8005158:	2100      	movs	r1, #0
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fb5e 	bl	800581c <RCCEx_PLLSAI2_Config>
 8005160:	4603      	mov	r3, r0
 8005162:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005164:	e003      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	74fb      	strb	r3, [r7, #19]
      break;
 800516a:	e000      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800516c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800516e:	7cfb      	ldrb	r3, [r7, #19]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10b      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005174:	4b52      	ldr	r3, [pc, #328]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005182:	494f      	ldr	r1, [pc, #316]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800518a:	e001      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518c:	7cfb      	ldrb	r3, [r7, #19]
 800518e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 80a0 	beq.w	80052de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800519e:	2300      	movs	r3, #0
 80051a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051a2:	4b47      	ldr	r3, [pc, #284]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80051ae:	2301      	movs	r3, #1
 80051b0:	e000      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80051b2:	2300      	movs	r3, #0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00d      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051b8:	4b41      	ldr	r3, [pc, #260]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051bc:	4a40      	ldr	r2, [pc, #256]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c2:	6593      	str	r3, [r2, #88]	; 0x58
 80051c4:	4b3e      	ldr	r3, [pc, #248]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051cc:	60bb      	str	r3, [r7, #8]
 80051ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051d0:	2301      	movs	r3, #1
 80051d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051d4:	4b3b      	ldr	r3, [pc, #236]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a3a      	ldr	r2, [pc, #232]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051e0:	f7fc fca4 	bl	8001b2c <HAL_GetTick>
 80051e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051e6:	e009      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e8:	f7fc fca0 	bl	8001b2c <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d902      	bls.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	74fb      	strb	r3, [r7, #19]
        break;
 80051fa:	e005      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051fc:	4b31      	ldr	r3, [pc, #196]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005204:	2b00      	cmp	r3, #0
 8005206:	d0ef      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005208:	7cfb      	ldrb	r3, [r7, #19]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d15c      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800520e:	4b2c      	ldr	r3, [pc, #176]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005214:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005218:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d01f      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	429a      	cmp	r2, r3
 800522a:	d019      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800522c:	4b24      	ldr	r3, [pc, #144]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800522e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005236:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005238:	4b21      	ldr	r3, [pc, #132]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800523a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523e:	4a20      	ldr	r2, [pc, #128]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005248:	4b1d      	ldr	r3, [pc, #116]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524e:	4a1c      	ldr	r2, [pc, #112]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005258:	4a19      	ldr	r2, [pc, #100]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d016      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526a:	f7fc fc5f 	bl	8001b2c <HAL_GetTick>
 800526e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005270:	e00b      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005272:	f7fc fc5b 	bl	8001b2c <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005280:	4293      	cmp	r3, r2
 8005282:	d902      	bls.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	74fb      	strb	r3, [r7, #19]
            break;
 8005288:	e006      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800528a:	4b0d      	ldr	r3, [pc, #52]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800528c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0ec      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005298:	7cfb      	ldrb	r3, [r7, #19]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10c      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800529e:	4b08      	ldr	r3, [pc, #32]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ae:	4904      	ldr	r1, [pc, #16]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80052b6:	e009      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052b8:	7cfb      	ldrb	r3, [r7, #19]
 80052ba:	74bb      	strb	r3, [r7, #18]
 80052bc:	e006      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80052be:	bf00      	nop
 80052c0:	40021000 	.word	0x40021000
 80052c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c8:	7cfb      	ldrb	r3, [r7, #19]
 80052ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052cc:	7c7b      	ldrb	r3, [r7, #17]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d105      	bne.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052d2:	4b9e      	ldr	r3, [pc, #632]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d6:	4a9d      	ldr	r2, [pc, #628]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052ea:	4b98      	ldr	r3, [pc, #608]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f0:	f023 0203 	bic.w	r2, r3, #3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f8:	4994      	ldr	r1, [pc, #592]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00a      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800530c:	4b8f      	ldr	r3, [pc, #572]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005312:	f023 020c 	bic.w	r2, r3, #12
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531a:	498c      	ldr	r1, [pc, #560]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800532e:	4b87      	ldr	r3, [pc, #540]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005334:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	4983      	ldr	r1, [pc, #524]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0308 	and.w	r3, r3, #8
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005350:	4b7e      	ldr	r3, [pc, #504]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005356:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535e:	497b      	ldr	r1, [pc, #492]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0310 	and.w	r3, r3, #16
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005372:	4b76      	ldr	r3, [pc, #472]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005378:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005380:	4972      	ldr	r1, [pc, #456]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005394:	4b6d      	ldr	r3, [pc, #436]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a2:	496a      	ldr	r1, [pc, #424]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053b6:	4b65      	ldr	r3, [pc, #404]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c4:	4961      	ldr	r1, [pc, #388]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053d8:	4b5c      	ldr	r3, [pc, #368]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e6:	4959      	ldr	r1, [pc, #356]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053fa:	4b54      	ldr	r3, [pc, #336]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005400:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005408:	4950      	ldr	r1, [pc, #320]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800541c:	4b4b      	ldr	r3, [pc, #300]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005422:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542a:	4948      	ldr	r1, [pc, #288]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800543e:	4b43      	ldr	r3, [pc, #268]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005444:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800544c:	493f      	ldr	r1, [pc, #252]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d028      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005460:	4b3a      	ldr	r3, [pc, #232]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005466:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800546e:	4937      	ldr	r1, [pc, #220]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800547a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800547e:	d106      	bne.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005480:	4b32      	ldr	r3, [pc, #200]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	4a31      	ldr	r2, [pc, #196]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800548a:	60d3      	str	r3, [r2, #12]
 800548c:	e011      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005492:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005496:	d10c      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3304      	adds	r3, #4
 800549c:	2101      	movs	r1, #1
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 f8c8 	bl	8005634 <RCCEx_PLLSAI1_Config>
 80054a4:	4603      	mov	r3, r0
 80054a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80054a8:	7cfb      	ldrb	r3, [r7, #19]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80054ae:	7cfb      	ldrb	r3, [r7, #19]
 80054b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d028      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054be:	4b23      	ldr	r3, [pc, #140]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054cc:	491f      	ldr	r1, [pc, #124]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054dc:	d106      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054de:	4b1b      	ldr	r3, [pc, #108]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	4a1a      	ldr	r2, [pc, #104]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054e8:	60d3      	str	r3, [r2, #12]
 80054ea:	e011      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054f4:	d10c      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	3304      	adds	r3, #4
 80054fa:	2101      	movs	r1, #1
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 f899 	bl	8005634 <RCCEx_PLLSAI1_Config>
 8005502:	4603      	mov	r3, r0
 8005504:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005506:	7cfb      	ldrb	r3, [r7, #19]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800550c:	7cfb      	ldrb	r3, [r7, #19]
 800550e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d02b      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800551c:	4b0b      	ldr	r3, [pc, #44]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800551e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005522:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800552a:	4908      	ldr	r1, [pc, #32]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800552c:	4313      	orrs	r3, r2
 800552e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005536:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800553a:	d109      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800553c:	4b03      	ldr	r3, [pc, #12]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	4a02      	ldr	r2, [pc, #8]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005542:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005546:	60d3      	str	r3, [r2, #12]
 8005548:	e014      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800554a:	bf00      	nop
 800554c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005554:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005558:	d10c      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	3304      	adds	r3, #4
 800555e:	2101      	movs	r1, #1
 8005560:	4618      	mov	r0, r3
 8005562:	f000 f867 	bl	8005634 <RCCEx_PLLSAI1_Config>
 8005566:	4603      	mov	r3, r0
 8005568:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800556a:	7cfb      	ldrb	r3, [r7, #19]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005570:	7cfb      	ldrb	r3, [r7, #19]
 8005572:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d02f      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005580:	4b2b      	ldr	r3, [pc, #172]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005586:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800558e:	4928      	ldr	r1, [pc, #160]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800559a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800559e:	d10d      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3304      	adds	r3, #4
 80055a4:	2102      	movs	r1, #2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 f844 	bl	8005634 <RCCEx_PLLSAI1_Config>
 80055ac:	4603      	mov	r3, r0
 80055ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055b0:	7cfb      	ldrb	r3, [r7, #19]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d014      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80055b6:	7cfb      	ldrb	r3, [r7, #19]
 80055b8:	74bb      	strb	r3, [r7, #18]
 80055ba:	e011      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055c4:	d10c      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	3320      	adds	r3, #32
 80055ca:	2102      	movs	r1, #2
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 f925 	bl	800581c <RCCEx_PLLSAI2_Config>
 80055d2:	4603      	mov	r3, r0
 80055d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055d6:	7cfb      	ldrb	r3, [r7, #19]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80055dc:	7cfb      	ldrb	r3, [r7, #19]
 80055de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00a      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055ec:	4b10      	ldr	r3, [pc, #64]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055fa:	490d      	ldr	r1, [pc, #52]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00b      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800560e:	4b08      	ldr	r3, [pc, #32]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005614:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800561e:	4904      	ldr	r1, [pc, #16]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005620:	4313      	orrs	r3, r2
 8005622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005626:	7cbb      	ldrb	r3, [r7, #18]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40021000 	.word	0x40021000

08005634 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005642:	4b75      	ldr	r3, [pc, #468]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d018      	beq.n	8005680 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800564e:	4b72      	ldr	r3, [pc, #456]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f003 0203 	and.w	r2, r3, #3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d10d      	bne.n	800567a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
       ||
 8005662:	2b00      	cmp	r3, #0
 8005664:	d009      	beq.n	800567a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005666:	4b6c      	ldr	r3, [pc, #432]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	091b      	lsrs	r3, r3, #4
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
       ||
 8005676:	429a      	cmp	r2, r3
 8005678:	d047      	beq.n	800570a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	73fb      	strb	r3, [r7, #15]
 800567e:	e044      	b.n	800570a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b03      	cmp	r3, #3
 8005686:	d018      	beq.n	80056ba <RCCEx_PLLSAI1_Config+0x86>
 8005688:	2b03      	cmp	r3, #3
 800568a:	d825      	bhi.n	80056d8 <RCCEx_PLLSAI1_Config+0xa4>
 800568c:	2b01      	cmp	r3, #1
 800568e:	d002      	beq.n	8005696 <RCCEx_PLLSAI1_Config+0x62>
 8005690:	2b02      	cmp	r3, #2
 8005692:	d009      	beq.n	80056a8 <RCCEx_PLLSAI1_Config+0x74>
 8005694:	e020      	b.n	80056d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005696:	4b60      	ldr	r3, [pc, #384]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d11d      	bne.n	80056de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056a6:	e01a      	b.n	80056de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056a8:	4b5b      	ldr	r3, [pc, #364]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d116      	bne.n	80056e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056b8:	e013      	b.n	80056e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056ba:	4b57      	ldr	r3, [pc, #348]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10f      	bne.n	80056e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056c6:	4b54      	ldr	r3, [pc, #336]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d109      	bne.n	80056e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056d6:	e006      	b.n	80056e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	73fb      	strb	r3, [r7, #15]
      break;
 80056dc:	e004      	b.n	80056e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056de:	bf00      	nop
 80056e0:	e002      	b.n	80056e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056e2:	bf00      	nop
 80056e4:	e000      	b.n	80056e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10d      	bne.n	800570a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056ee:	4b4a      	ldr	r3, [pc, #296]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6819      	ldr	r1, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	3b01      	subs	r3, #1
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	430b      	orrs	r3, r1
 8005704:	4944      	ldr	r1, [pc, #272]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005706:	4313      	orrs	r3, r2
 8005708:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800570a:	7bfb      	ldrb	r3, [r7, #15]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d17d      	bne.n	800580c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005710:	4b41      	ldr	r3, [pc, #260]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a40      	ldr	r2, [pc, #256]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005716:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800571a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800571c:	f7fc fa06 	bl	8001b2c <HAL_GetTick>
 8005720:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005722:	e009      	b.n	8005738 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005724:	f7fc fa02 	bl	8001b2c <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d902      	bls.n	8005738 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	73fb      	strb	r3, [r7, #15]
        break;
 8005736:	e005      	b.n	8005744 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005738:	4b37      	ldr	r3, [pc, #220]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1ef      	bne.n	8005724 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005744:	7bfb      	ldrb	r3, [r7, #15]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d160      	bne.n	800580c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d111      	bne.n	8005774 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005750:	4b31      	ldr	r3, [pc, #196]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	6892      	ldr	r2, [r2, #8]
 8005760:	0211      	lsls	r1, r2, #8
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	68d2      	ldr	r2, [r2, #12]
 8005766:	0912      	lsrs	r2, r2, #4
 8005768:	0452      	lsls	r2, r2, #17
 800576a:	430a      	orrs	r2, r1
 800576c:	492a      	ldr	r1, [pc, #168]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 800576e:	4313      	orrs	r3, r2
 8005770:	610b      	str	r3, [r1, #16]
 8005772:	e027      	b.n	80057c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d112      	bne.n	80057a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800577a:	4b27      	ldr	r3, [pc, #156]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005782:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6892      	ldr	r2, [r2, #8]
 800578a:	0211      	lsls	r1, r2, #8
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	6912      	ldr	r2, [r2, #16]
 8005790:	0852      	lsrs	r2, r2, #1
 8005792:	3a01      	subs	r2, #1
 8005794:	0552      	lsls	r2, r2, #21
 8005796:	430a      	orrs	r2, r1
 8005798:	491f      	ldr	r1, [pc, #124]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 800579a:	4313      	orrs	r3, r2
 800579c:	610b      	str	r3, [r1, #16]
 800579e:	e011      	b.n	80057c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057a0:	4b1d      	ldr	r3, [pc, #116]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6892      	ldr	r2, [r2, #8]
 80057b0:	0211      	lsls	r1, r2, #8
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6952      	ldr	r2, [r2, #20]
 80057b6:	0852      	lsrs	r2, r2, #1
 80057b8:	3a01      	subs	r2, #1
 80057ba:	0652      	lsls	r2, r2, #25
 80057bc:	430a      	orrs	r2, r1
 80057be:	4916      	ldr	r1, [pc, #88]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80057c4:	4b14      	ldr	r3, [pc, #80]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a13      	ldr	r2, [pc, #76]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d0:	f7fc f9ac 	bl	8001b2c <HAL_GetTick>
 80057d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057d6:	e009      	b.n	80057ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057d8:	f7fc f9a8 	bl	8001b2c <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d902      	bls.n	80057ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	73fb      	strb	r3, [r7, #15]
          break;
 80057ea:	e005      	b.n	80057f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057ec:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0ef      	beq.n	80057d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80057fe:	4b06      	ldr	r3, [pc, #24]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005800:	691a      	ldr	r2, [r3, #16]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	4904      	ldr	r1, [pc, #16]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005808:	4313      	orrs	r3, r2
 800580a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800580c:	7bfb      	ldrb	r3, [r7, #15]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	40021000 	.word	0x40021000

0800581c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800582a:	4b6a      	ldr	r3, [pc, #424]	; (80059d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f003 0303 	and.w	r3, r3, #3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d018      	beq.n	8005868 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005836:	4b67      	ldr	r3, [pc, #412]	; (80059d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f003 0203 	and.w	r2, r3, #3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	429a      	cmp	r2, r3
 8005844:	d10d      	bne.n	8005862 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
       ||
 800584a:	2b00      	cmp	r3, #0
 800584c:	d009      	beq.n	8005862 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800584e:	4b61      	ldr	r3, [pc, #388]	; (80059d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	091b      	lsrs	r3, r3, #4
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
       ||
 800585e:	429a      	cmp	r2, r3
 8005860:	d047      	beq.n	80058f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	73fb      	strb	r3, [r7, #15]
 8005866:	e044      	b.n	80058f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b03      	cmp	r3, #3
 800586e:	d018      	beq.n	80058a2 <RCCEx_PLLSAI2_Config+0x86>
 8005870:	2b03      	cmp	r3, #3
 8005872:	d825      	bhi.n	80058c0 <RCCEx_PLLSAI2_Config+0xa4>
 8005874:	2b01      	cmp	r3, #1
 8005876:	d002      	beq.n	800587e <RCCEx_PLLSAI2_Config+0x62>
 8005878:	2b02      	cmp	r3, #2
 800587a:	d009      	beq.n	8005890 <RCCEx_PLLSAI2_Config+0x74>
 800587c:	e020      	b.n	80058c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800587e:	4b55      	ldr	r3, [pc, #340]	; (80059d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d11d      	bne.n	80058c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800588e:	e01a      	b.n	80058c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005890:	4b50      	ldr	r3, [pc, #320]	; (80059d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005898:	2b00      	cmp	r3, #0
 800589a:	d116      	bne.n	80058ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058a0:	e013      	b.n	80058ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058a2:	4b4c      	ldr	r3, [pc, #304]	; (80059d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10f      	bne.n	80058ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058ae:	4b49      	ldr	r3, [pc, #292]	; (80059d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d109      	bne.n	80058ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058be:	e006      	b.n	80058ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	73fb      	strb	r3, [r7, #15]
      break;
 80058c4:	e004      	b.n	80058d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058c6:	bf00      	nop
 80058c8:	e002      	b.n	80058d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058ca:	bf00      	nop
 80058cc:	e000      	b.n	80058d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80058d0:	7bfb      	ldrb	r3, [r7, #15]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10d      	bne.n	80058f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80058d6:	4b3f      	ldr	r3, [pc, #252]	; (80059d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6819      	ldr	r1, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	011b      	lsls	r3, r3, #4
 80058ea:	430b      	orrs	r3, r1
 80058ec:	4939      	ldr	r1, [pc, #228]	; (80059d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d167      	bne.n	80059c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80058f8:	4b36      	ldr	r3, [pc, #216]	; (80059d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a35      	ldr	r2, [pc, #212]	; (80059d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005904:	f7fc f912 	bl	8001b2c <HAL_GetTick>
 8005908:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800590a:	e009      	b.n	8005920 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800590c:	f7fc f90e 	bl	8001b2c <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d902      	bls.n	8005920 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	73fb      	strb	r3, [r7, #15]
        break;
 800591e:	e005      	b.n	800592c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005920:	4b2c      	ldr	r3, [pc, #176]	; (80059d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1ef      	bne.n	800590c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800592c:	7bfb      	ldrb	r3, [r7, #15]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d14a      	bne.n	80059c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d111      	bne.n	800595c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005938:	4b26      	ldr	r3, [pc, #152]	; (80059d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6892      	ldr	r2, [r2, #8]
 8005948:	0211      	lsls	r1, r2, #8
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	68d2      	ldr	r2, [r2, #12]
 800594e:	0912      	lsrs	r2, r2, #4
 8005950:	0452      	lsls	r2, r2, #17
 8005952:	430a      	orrs	r2, r1
 8005954:	491f      	ldr	r1, [pc, #124]	; (80059d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005956:	4313      	orrs	r3, r2
 8005958:	614b      	str	r3, [r1, #20]
 800595a:	e011      	b.n	8005980 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800595c:	4b1d      	ldr	r3, [pc, #116]	; (80059d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005964:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6892      	ldr	r2, [r2, #8]
 800596c:	0211      	lsls	r1, r2, #8
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6912      	ldr	r2, [r2, #16]
 8005972:	0852      	lsrs	r2, r2, #1
 8005974:	3a01      	subs	r2, #1
 8005976:	0652      	lsls	r2, r2, #25
 8005978:	430a      	orrs	r2, r1
 800597a:	4916      	ldr	r1, [pc, #88]	; (80059d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800597c:	4313      	orrs	r3, r2
 800597e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005980:	4b14      	ldr	r3, [pc, #80]	; (80059d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a13      	ldr	r2, [pc, #76]	; (80059d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800598a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598c:	f7fc f8ce 	bl	8001b2c <HAL_GetTick>
 8005990:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005992:	e009      	b.n	80059a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005994:	f7fc f8ca 	bl	8001b2c <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d902      	bls.n	80059a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	73fb      	strb	r3, [r7, #15]
          break;
 80059a6:	e005      	b.n	80059b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059a8:	4b0a      	ldr	r3, [pc, #40]	; (80059d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0ef      	beq.n	8005994 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d106      	bne.n	80059c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80059ba:	4b06      	ldr	r3, [pc, #24]	; (80059d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059bc:	695a      	ldr	r2, [r3, #20]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	4904      	ldr	r1, [pc, #16]	; (80059d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	40021000 	.word	0x40021000

080059d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e040      	b.n	8005a6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d106      	bne.n	8005a00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7fb ff5a 	bl	80018b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2224      	movs	r2, #36	; 0x24
 8005a04:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0201 	bic.w	r2, r2, #1
 8005a14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fc18 	bl	800624c <UART_SetConfig>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e022      	b.n	8005a6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fe96 	bl	8006760 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 ff1d 	bl	80068a4 <UART_CheckIdleState>
 8005a6a:	4603      	mov	r3, r0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08a      	sub	sp, #40	; 0x28
 8005a78:	af02      	add	r7, sp, #8
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	603b      	str	r3, [r7, #0]
 8005a80:	4613      	mov	r3, r2
 8005a82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a88:	2b20      	cmp	r3, #32
 8005a8a:	f040 8082 	bne.w	8005b92 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <HAL_UART_Transmit+0x26>
 8005a94:	88fb      	ldrh	r3, [r7, #6]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e07a      	b.n	8005b94 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_UART_Transmit+0x38>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e073      	b.n	8005b94 <HAL_UART_Transmit+0x120>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2221      	movs	r2, #33	; 0x21
 8005ac0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ac2:	f7fc f833 	bl	8001b2c <HAL_GetTick>
 8005ac6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	88fa      	ldrh	r2, [r7, #6]
 8005acc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	88fa      	ldrh	r2, [r7, #6]
 8005ad4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae0:	d108      	bne.n	8005af4 <HAL_UART_Transmit+0x80>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d104      	bne.n	8005af4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	61bb      	str	r3, [r7, #24]
 8005af2:	e003      	b.n	8005afc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005af8:	2300      	movs	r3, #0
 8005afa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b04:	e02d      	b.n	8005b62 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	2180      	movs	r1, #128	; 0x80
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 ff10 	bl	8006936 <UART_WaitOnFlagUntilTimeout>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e039      	b.n	8005b94 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10b      	bne.n	8005b3e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	881a      	ldrh	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b32:	b292      	uxth	r2, r2
 8005b34:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	3302      	adds	r3, #2
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	e008      	b.n	8005b50 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	781a      	ldrb	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	b292      	uxth	r2, r2
 8005b48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1cb      	bne.n	8005b06 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2200      	movs	r2, #0
 8005b76:	2140      	movs	r1, #64	; 0x40
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 fedc 	bl	8006936 <UART_WaitOnFlagUntilTimeout>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d001      	beq.n	8005b88 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e005      	b.n	8005b94 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	e000      	b.n	8005b94 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005b92:	2302      	movs	r3, #2
  }
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3720      	adds	r7, #32
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08a      	sub	sp, #40	; 0x28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bae:	2b20      	cmp	r3, #32
 8005bb0:	d142      	bne.n	8005c38 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <HAL_UART_Receive_IT+0x22>
 8005bb8:	88fb      	ldrh	r3, [r7, #6]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e03b      	b.n	8005c3a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <HAL_UART_Receive_IT+0x34>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e034      	b.n	8005c3a <HAL_UART_Receive_IT+0x9e>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a18      	ldr	r2, [pc, #96]	; (8005c44 <HAL_UART_Receive_IT+0xa8>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d01f      	beq.n	8005c28 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d018      	beq.n	8005c28 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	e853 3f00 	ldrex	r3, [r3]
 8005c02:	613b      	str	r3, [r7, #16]
   return(result);
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	461a      	mov	r2, r3
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	623b      	str	r3, [r7, #32]
 8005c16:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	69f9      	ldr	r1, [r7, #28]
 8005c1a:	6a3a      	ldr	r2, [r7, #32]
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e6      	bne.n	8005bf6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c28:	88fb      	ldrh	r3, [r7, #6]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	68b9      	ldr	r1, [r7, #8]
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 ff46 	bl	8006ac0 <UART_Start_Receive_IT>
 8005c34:	4603      	mov	r3, r0
 8005c36:	e000      	b.n	8005c3a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005c38:	2302      	movs	r3, #2
  }
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3728      	adds	r7, #40	; 0x28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	40008000 	.word	0x40008000

08005c48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b0ba      	sub	sp, #232	; 0xe8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005c72:	f640 030f 	movw	r3, #2063	; 0x80f
 8005c76:	4013      	ands	r3, r2
 8005c78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005c7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d115      	bne.n	8005cb0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c88:	f003 0320 	and.w	r3, r3, #32
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00f      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c94:	f003 0320 	and.w	r3, r3, #32
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d009      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 82a6 	beq.w	80061f2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	4798      	blx	r3
      }
      return;
 8005cae:	e2a0      	b.n	80061f2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005cb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 8117 	beq.w	8005ee8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d106      	bne.n	8005cd4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005cc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005cca:	4b85      	ldr	r3, [pc, #532]	; (8005ee0 <HAL_UART_IRQHandler+0x298>)
 8005ccc:	4013      	ands	r3, r2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 810a 	beq.w	8005ee8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d011      	beq.n	8005d04 <HAL_UART_IRQHandler+0xbc>
 8005ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00b      	beq.n	8005d04 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cfa:	f043 0201 	orr.w	r2, r3, #1
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d011      	beq.n	8005d34 <HAL_UART_IRQHandler+0xec>
 8005d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00b      	beq.n	8005d34 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2202      	movs	r2, #2
 8005d22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d2a:	f043 0204 	orr.w	r2, r3, #4
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d38:	f003 0304 	and.w	r3, r3, #4
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d011      	beq.n	8005d64 <HAL_UART_IRQHandler+0x11c>
 8005d40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00b      	beq.n	8005d64 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2204      	movs	r2, #4
 8005d52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d5a:	f043 0202 	orr.w	r2, r3, #2
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d017      	beq.n	8005da0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d74:	f003 0320 	and.w	r3, r3, #32
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d105      	bne.n	8005d88 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d80:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00b      	beq.n	8005da0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2208      	movs	r2, #8
 8005d8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d96:	f043 0208 	orr.w	r2, r3, #8
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d012      	beq.n	8005dd2 <HAL_UART_IRQHandler+0x18a>
 8005dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005db0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00c      	beq.n	8005dd2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dc8:	f043 0220 	orr.w	r2, r3, #32
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 820c 	beq.w	80061f6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00d      	beq.n	8005e06 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d007      	beq.n	8005e06 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1a:	2b40      	cmp	r3, #64	; 0x40
 8005e1c:	d005      	beq.n	8005e2a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d04f      	beq.n	8005eca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 ff12 	bl	8006c54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3a:	2b40      	cmp	r3, #64	; 0x40
 8005e3c:	d141      	bne.n	8005ec2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3308      	adds	r3, #8
 8005e44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e4c:	e853 3f00 	ldrex	r3, [r3]
 8005e50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3308      	adds	r3, #8
 8005e66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e7a:	e841 2300 	strex	r3, r2, [r1]
 8005e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1d9      	bne.n	8005e3e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d013      	beq.n	8005eba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e96:	4a13      	ldr	r2, [pc, #76]	; (8005ee4 <HAL_UART_IRQHandler+0x29c>)
 8005e98:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fd ff80 	bl	8003da4 <HAL_DMA_Abort_IT>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d017      	beq.n	8005eda <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb8:	e00f      	b.n	8005eda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f9b0 	bl	8006220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec0:	e00b      	b.n	8005eda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f9ac 	bl	8006220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec8:	e007      	b.n	8005eda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f9a8 	bl	8006220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005ed8:	e18d      	b.n	80061f6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eda:	bf00      	nop
    return;
 8005edc:	e18b      	b.n	80061f6 <HAL_UART_IRQHandler+0x5ae>
 8005ede:	bf00      	nop
 8005ee0:	04000120 	.word	0x04000120
 8005ee4:	08006d1b 	.word	0x08006d1b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	f040 8146 	bne.w	800617e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef6:	f003 0310 	and.w	r3, r3, #16
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 813f 	beq.w	800617e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f04:	f003 0310 	and.w	r3, r3, #16
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 8138 	beq.w	800617e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2210      	movs	r2, #16
 8005f14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f20:	2b40      	cmp	r3, #64	; 0x40
 8005f22:	f040 80b4 	bne.w	800608e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f32:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 815f 	beq.w	80061fa <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f46:	429a      	cmp	r2, r3
 8005f48:	f080 8157 	bcs.w	80061fa <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0320 	and.w	r3, r3, #32
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f040 8085 	bne.w	8006072 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f74:	e853 3f00 	ldrex	r3, [r3]
 8005f78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f96:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1da      	bne.n	8005f68 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3308      	adds	r3, #8
 8005fb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005fc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fc4:	f023 0301 	bic.w	r3, r3, #1
 8005fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3308      	adds	r3, #8
 8005fd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005fd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005fda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005fde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e1      	bne.n	8005fb2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ff8:	e853 3f00 	ldrex	r3, [r3]
 8005ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006004:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3308      	adds	r3, #8
 800600e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006012:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006014:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006018:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1e3      	bne.n	8005fee <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800603a:	e853 3f00 	ldrex	r3, [r3]
 800603e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006042:	f023 0310 	bic.w	r3, r3, #16
 8006046:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006054:	65bb      	str	r3, [r7, #88]	; 0x58
 8006056:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006058:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800605a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800605c:	e841 2300 	strex	r3, r2, [r1]
 8006060:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e4      	bne.n	8006032 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606c:	4618      	mov	r0, r3
 800606e:	f7fd fe5b 	bl	8003d28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800607e:	b29b      	uxth	r3, r3
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	b29b      	uxth	r3, r3
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f8d4 	bl	8006234 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800608c:	e0b5      	b.n	80061fa <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800609a:	b29b      	uxth	r3, r3
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 80a7 	beq.w	80061fe <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80060b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 80a2 	beq.w	80061fe <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c2:	e853 3f00 	ldrex	r3, [r3]
 80060c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	461a      	mov	r2, r3
 80060d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060dc:	647b      	str	r3, [r7, #68]	; 0x44
 80060de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060e4:	e841 2300 	strex	r3, r2, [r1]
 80060e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1e4      	bne.n	80060ba <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3308      	adds	r3, #8
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	e853 3f00 	ldrex	r3, [r3]
 80060fe:	623b      	str	r3, [r7, #32]
   return(result);
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	f023 0301 	bic.w	r3, r3, #1
 8006106:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3308      	adds	r3, #8
 8006110:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006114:	633a      	str	r2, [r7, #48]	; 0x30
 8006116:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006118:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800611a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800611c:	e841 2300 	strex	r3, r2, [r1]
 8006120:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1e3      	bne.n	80060f0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2220      	movs	r2, #32
 800612c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	e853 3f00 	ldrex	r3, [r3]
 8006146:	60fb      	str	r3, [r7, #12]
   return(result);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0310 	bic.w	r3, r3, #16
 800614e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800615c:	61fb      	str	r3, [r7, #28]
 800615e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006160:	69b9      	ldr	r1, [r7, #24]
 8006162:	69fa      	ldr	r2, [r7, #28]
 8006164:	e841 2300 	strex	r3, r2, [r1]
 8006168:	617b      	str	r3, [r7, #20]
   return(result);
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1e4      	bne.n	800613a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006170:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f85c 	bl	8006234 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800617c:	e03f      	b.n	80061fe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800617e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00e      	beq.n	80061a8 <HAL_UART_IRQHandler+0x560>
 800618a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800618e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d008      	beq.n	80061a8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800619e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 ff5a 	bl	800705a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061a6:	e02d      	b.n	8006204 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80061a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00e      	beq.n	80061d2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80061b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d008      	beq.n	80061d2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d01c      	beq.n	8006202 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	4798      	blx	r3
    }
    return;
 80061d0:	e017      	b.n	8006202 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80061d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d012      	beq.n	8006204 <HAL_UART_IRQHandler+0x5bc>
 80061de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00c      	beq.n	8006204 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fdab 	bl	8006d46 <UART_EndTransmit_IT>
    return;
 80061f0:	e008      	b.n	8006204 <HAL_UART_IRQHandler+0x5bc>
      return;
 80061f2:	bf00      	nop
 80061f4:	e006      	b.n	8006204 <HAL_UART_IRQHandler+0x5bc>
    return;
 80061f6:	bf00      	nop
 80061f8:	e004      	b.n	8006204 <HAL_UART_IRQHandler+0x5bc>
      return;
 80061fa:	bf00      	nop
 80061fc:	e002      	b.n	8006204 <HAL_UART_IRQHandler+0x5bc>
      return;
 80061fe:	bf00      	nop
 8006200:	e000      	b.n	8006204 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006202:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006204:	37e8      	adds	r7, #232	; 0xe8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop

0800620c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	460b      	mov	r3, r1
 800623e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800624c:	b5b0      	push	{r4, r5, r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006254:	2300      	movs	r3, #0
 8006256:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	431a      	orrs	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	431a      	orrs	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	4313      	orrs	r3, r2
 800626e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	4bad      	ldr	r3, [pc, #692]	; (800652c <UART_SetConfig+0x2e0>)
 8006278:	4013      	ands	r3, r2
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	6812      	ldr	r2, [r2, #0]
 800627e:	69f9      	ldr	r1, [r7, #28]
 8006280:	430b      	orrs	r3, r1
 8006282:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4aa2      	ldr	r2, [pc, #648]	; (8006530 <UART_SetConfig+0x2e4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d004      	beq.n	80062b4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	69fa      	ldr	r2, [r7, #28]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69fa      	ldr	r2, [r7, #28]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a99      	ldr	r2, [pc, #612]	; (8006534 <UART_SetConfig+0x2e8>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d121      	bne.n	8006316 <UART_SetConfig+0xca>
 80062d2:	4b99      	ldr	r3, [pc, #612]	; (8006538 <UART_SetConfig+0x2ec>)
 80062d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d8:	f003 0303 	and.w	r3, r3, #3
 80062dc:	2b03      	cmp	r3, #3
 80062de:	d817      	bhi.n	8006310 <UART_SetConfig+0xc4>
 80062e0:	a201      	add	r2, pc, #4	; (adr r2, 80062e8 <UART_SetConfig+0x9c>)
 80062e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e6:	bf00      	nop
 80062e8:	080062f9 	.word	0x080062f9
 80062ec:	08006305 	.word	0x08006305
 80062f0:	080062ff 	.word	0x080062ff
 80062f4:	0800630b 	.word	0x0800630b
 80062f8:	2301      	movs	r3, #1
 80062fa:	76fb      	strb	r3, [r7, #27]
 80062fc:	e0e7      	b.n	80064ce <UART_SetConfig+0x282>
 80062fe:	2302      	movs	r3, #2
 8006300:	76fb      	strb	r3, [r7, #27]
 8006302:	e0e4      	b.n	80064ce <UART_SetConfig+0x282>
 8006304:	2304      	movs	r3, #4
 8006306:	76fb      	strb	r3, [r7, #27]
 8006308:	e0e1      	b.n	80064ce <UART_SetConfig+0x282>
 800630a:	2308      	movs	r3, #8
 800630c:	76fb      	strb	r3, [r7, #27]
 800630e:	e0de      	b.n	80064ce <UART_SetConfig+0x282>
 8006310:	2310      	movs	r3, #16
 8006312:	76fb      	strb	r3, [r7, #27]
 8006314:	e0db      	b.n	80064ce <UART_SetConfig+0x282>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a88      	ldr	r2, [pc, #544]	; (800653c <UART_SetConfig+0x2f0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d132      	bne.n	8006386 <UART_SetConfig+0x13a>
 8006320:	4b85      	ldr	r3, [pc, #532]	; (8006538 <UART_SetConfig+0x2ec>)
 8006322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006326:	f003 030c 	and.w	r3, r3, #12
 800632a:	2b0c      	cmp	r3, #12
 800632c:	d828      	bhi.n	8006380 <UART_SetConfig+0x134>
 800632e:	a201      	add	r2, pc, #4	; (adr r2, 8006334 <UART_SetConfig+0xe8>)
 8006330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006334:	08006369 	.word	0x08006369
 8006338:	08006381 	.word	0x08006381
 800633c:	08006381 	.word	0x08006381
 8006340:	08006381 	.word	0x08006381
 8006344:	08006375 	.word	0x08006375
 8006348:	08006381 	.word	0x08006381
 800634c:	08006381 	.word	0x08006381
 8006350:	08006381 	.word	0x08006381
 8006354:	0800636f 	.word	0x0800636f
 8006358:	08006381 	.word	0x08006381
 800635c:	08006381 	.word	0x08006381
 8006360:	08006381 	.word	0x08006381
 8006364:	0800637b 	.word	0x0800637b
 8006368:	2300      	movs	r3, #0
 800636a:	76fb      	strb	r3, [r7, #27]
 800636c:	e0af      	b.n	80064ce <UART_SetConfig+0x282>
 800636e:	2302      	movs	r3, #2
 8006370:	76fb      	strb	r3, [r7, #27]
 8006372:	e0ac      	b.n	80064ce <UART_SetConfig+0x282>
 8006374:	2304      	movs	r3, #4
 8006376:	76fb      	strb	r3, [r7, #27]
 8006378:	e0a9      	b.n	80064ce <UART_SetConfig+0x282>
 800637a:	2308      	movs	r3, #8
 800637c:	76fb      	strb	r3, [r7, #27]
 800637e:	e0a6      	b.n	80064ce <UART_SetConfig+0x282>
 8006380:	2310      	movs	r3, #16
 8006382:	76fb      	strb	r3, [r7, #27]
 8006384:	e0a3      	b.n	80064ce <UART_SetConfig+0x282>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a6d      	ldr	r2, [pc, #436]	; (8006540 <UART_SetConfig+0x2f4>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d120      	bne.n	80063d2 <UART_SetConfig+0x186>
 8006390:	4b69      	ldr	r3, [pc, #420]	; (8006538 <UART_SetConfig+0x2ec>)
 8006392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006396:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800639a:	2b30      	cmp	r3, #48	; 0x30
 800639c:	d013      	beq.n	80063c6 <UART_SetConfig+0x17a>
 800639e:	2b30      	cmp	r3, #48	; 0x30
 80063a0:	d814      	bhi.n	80063cc <UART_SetConfig+0x180>
 80063a2:	2b20      	cmp	r3, #32
 80063a4:	d009      	beq.n	80063ba <UART_SetConfig+0x16e>
 80063a6:	2b20      	cmp	r3, #32
 80063a8:	d810      	bhi.n	80063cc <UART_SetConfig+0x180>
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <UART_SetConfig+0x168>
 80063ae:	2b10      	cmp	r3, #16
 80063b0:	d006      	beq.n	80063c0 <UART_SetConfig+0x174>
 80063b2:	e00b      	b.n	80063cc <UART_SetConfig+0x180>
 80063b4:	2300      	movs	r3, #0
 80063b6:	76fb      	strb	r3, [r7, #27]
 80063b8:	e089      	b.n	80064ce <UART_SetConfig+0x282>
 80063ba:	2302      	movs	r3, #2
 80063bc:	76fb      	strb	r3, [r7, #27]
 80063be:	e086      	b.n	80064ce <UART_SetConfig+0x282>
 80063c0:	2304      	movs	r3, #4
 80063c2:	76fb      	strb	r3, [r7, #27]
 80063c4:	e083      	b.n	80064ce <UART_SetConfig+0x282>
 80063c6:	2308      	movs	r3, #8
 80063c8:	76fb      	strb	r3, [r7, #27]
 80063ca:	e080      	b.n	80064ce <UART_SetConfig+0x282>
 80063cc:	2310      	movs	r3, #16
 80063ce:	76fb      	strb	r3, [r7, #27]
 80063d0:	e07d      	b.n	80064ce <UART_SetConfig+0x282>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a5b      	ldr	r2, [pc, #364]	; (8006544 <UART_SetConfig+0x2f8>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d120      	bne.n	800641e <UART_SetConfig+0x1d2>
 80063dc:	4b56      	ldr	r3, [pc, #344]	; (8006538 <UART_SetConfig+0x2ec>)
 80063de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063e6:	2bc0      	cmp	r3, #192	; 0xc0
 80063e8:	d013      	beq.n	8006412 <UART_SetConfig+0x1c6>
 80063ea:	2bc0      	cmp	r3, #192	; 0xc0
 80063ec:	d814      	bhi.n	8006418 <UART_SetConfig+0x1cc>
 80063ee:	2b80      	cmp	r3, #128	; 0x80
 80063f0:	d009      	beq.n	8006406 <UART_SetConfig+0x1ba>
 80063f2:	2b80      	cmp	r3, #128	; 0x80
 80063f4:	d810      	bhi.n	8006418 <UART_SetConfig+0x1cc>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <UART_SetConfig+0x1b4>
 80063fa:	2b40      	cmp	r3, #64	; 0x40
 80063fc:	d006      	beq.n	800640c <UART_SetConfig+0x1c0>
 80063fe:	e00b      	b.n	8006418 <UART_SetConfig+0x1cc>
 8006400:	2300      	movs	r3, #0
 8006402:	76fb      	strb	r3, [r7, #27]
 8006404:	e063      	b.n	80064ce <UART_SetConfig+0x282>
 8006406:	2302      	movs	r3, #2
 8006408:	76fb      	strb	r3, [r7, #27]
 800640a:	e060      	b.n	80064ce <UART_SetConfig+0x282>
 800640c:	2304      	movs	r3, #4
 800640e:	76fb      	strb	r3, [r7, #27]
 8006410:	e05d      	b.n	80064ce <UART_SetConfig+0x282>
 8006412:	2308      	movs	r3, #8
 8006414:	76fb      	strb	r3, [r7, #27]
 8006416:	e05a      	b.n	80064ce <UART_SetConfig+0x282>
 8006418:	2310      	movs	r3, #16
 800641a:	76fb      	strb	r3, [r7, #27]
 800641c:	e057      	b.n	80064ce <UART_SetConfig+0x282>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a49      	ldr	r2, [pc, #292]	; (8006548 <UART_SetConfig+0x2fc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d125      	bne.n	8006474 <UART_SetConfig+0x228>
 8006428:	4b43      	ldr	r3, [pc, #268]	; (8006538 <UART_SetConfig+0x2ec>)
 800642a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006436:	d017      	beq.n	8006468 <UART_SetConfig+0x21c>
 8006438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800643c:	d817      	bhi.n	800646e <UART_SetConfig+0x222>
 800643e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006442:	d00b      	beq.n	800645c <UART_SetConfig+0x210>
 8006444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006448:	d811      	bhi.n	800646e <UART_SetConfig+0x222>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <UART_SetConfig+0x20a>
 800644e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006452:	d006      	beq.n	8006462 <UART_SetConfig+0x216>
 8006454:	e00b      	b.n	800646e <UART_SetConfig+0x222>
 8006456:	2300      	movs	r3, #0
 8006458:	76fb      	strb	r3, [r7, #27]
 800645a:	e038      	b.n	80064ce <UART_SetConfig+0x282>
 800645c:	2302      	movs	r3, #2
 800645e:	76fb      	strb	r3, [r7, #27]
 8006460:	e035      	b.n	80064ce <UART_SetConfig+0x282>
 8006462:	2304      	movs	r3, #4
 8006464:	76fb      	strb	r3, [r7, #27]
 8006466:	e032      	b.n	80064ce <UART_SetConfig+0x282>
 8006468:	2308      	movs	r3, #8
 800646a:	76fb      	strb	r3, [r7, #27]
 800646c:	e02f      	b.n	80064ce <UART_SetConfig+0x282>
 800646e:	2310      	movs	r3, #16
 8006470:	76fb      	strb	r3, [r7, #27]
 8006472:	e02c      	b.n	80064ce <UART_SetConfig+0x282>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a2d      	ldr	r2, [pc, #180]	; (8006530 <UART_SetConfig+0x2e4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d125      	bne.n	80064ca <UART_SetConfig+0x27e>
 800647e:	4b2e      	ldr	r3, [pc, #184]	; (8006538 <UART_SetConfig+0x2ec>)
 8006480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006484:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006488:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800648c:	d017      	beq.n	80064be <UART_SetConfig+0x272>
 800648e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006492:	d817      	bhi.n	80064c4 <UART_SetConfig+0x278>
 8006494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006498:	d00b      	beq.n	80064b2 <UART_SetConfig+0x266>
 800649a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800649e:	d811      	bhi.n	80064c4 <UART_SetConfig+0x278>
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <UART_SetConfig+0x260>
 80064a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a8:	d006      	beq.n	80064b8 <UART_SetConfig+0x26c>
 80064aa:	e00b      	b.n	80064c4 <UART_SetConfig+0x278>
 80064ac:	2300      	movs	r3, #0
 80064ae:	76fb      	strb	r3, [r7, #27]
 80064b0:	e00d      	b.n	80064ce <UART_SetConfig+0x282>
 80064b2:	2302      	movs	r3, #2
 80064b4:	76fb      	strb	r3, [r7, #27]
 80064b6:	e00a      	b.n	80064ce <UART_SetConfig+0x282>
 80064b8:	2304      	movs	r3, #4
 80064ba:	76fb      	strb	r3, [r7, #27]
 80064bc:	e007      	b.n	80064ce <UART_SetConfig+0x282>
 80064be:	2308      	movs	r3, #8
 80064c0:	76fb      	strb	r3, [r7, #27]
 80064c2:	e004      	b.n	80064ce <UART_SetConfig+0x282>
 80064c4:	2310      	movs	r3, #16
 80064c6:	76fb      	strb	r3, [r7, #27]
 80064c8:	e001      	b.n	80064ce <UART_SetConfig+0x282>
 80064ca:	2310      	movs	r3, #16
 80064cc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a17      	ldr	r2, [pc, #92]	; (8006530 <UART_SetConfig+0x2e4>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	f040 8087 	bne.w	80065e8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064da:	7efb      	ldrb	r3, [r7, #27]
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d837      	bhi.n	8006550 <UART_SetConfig+0x304>
 80064e0:	a201      	add	r2, pc, #4	; (adr r2, 80064e8 <UART_SetConfig+0x29c>)
 80064e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e6:	bf00      	nop
 80064e8:	0800650d 	.word	0x0800650d
 80064ec:	08006551 	.word	0x08006551
 80064f0:	08006515 	.word	0x08006515
 80064f4:	08006551 	.word	0x08006551
 80064f8:	0800651b 	.word	0x0800651b
 80064fc:	08006551 	.word	0x08006551
 8006500:	08006551 	.word	0x08006551
 8006504:	08006551 	.word	0x08006551
 8006508:	08006523 	.word	0x08006523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800650c:	f7fe fd1c 	bl	8004f48 <HAL_RCC_GetPCLK1Freq>
 8006510:	6178      	str	r0, [r7, #20]
        break;
 8006512:	e022      	b.n	800655a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006514:	4b0d      	ldr	r3, [pc, #52]	; (800654c <UART_SetConfig+0x300>)
 8006516:	617b      	str	r3, [r7, #20]
        break;
 8006518:	e01f      	b.n	800655a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800651a:	f7fe fc7d 	bl	8004e18 <HAL_RCC_GetSysClockFreq>
 800651e:	6178      	str	r0, [r7, #20]
        break;
 8006520:	e01b      	b.n	800655a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006526:	617b      	str	r3, [r7, #20]
        break;
 8006528:	e017      	b.n	800655a <UART_SetConfig+0x30e>
 800652a:	bf00      	nop
 800652c:	efff69f3 	.word	0xefff69f3
 8006530:	40008000 	.word	0x40008000
 8006534:	40013800 	.word	0x40013800
 8006538:	40021000 	.word	0x40021000
 800653c:	40004400 	.word	0x40004400
 8006540:	40004800 	.word	0x40004800
 8006544:	40004c00 	.word	0x40004c00
 8006548:	40005000 	.word	0x40005000
 800654c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	76bb      	strb	r3, [r7, #26]
        break;
 8006558:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 80f1 	beq.w	8006744 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	4613      	mov	r3, r2
 8006568:	005b      	lsls	r3, r3, #1
 800656a:	4413      	add	r3, r2
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	429a      	cmp	r2, r3
 8006570:	d305      	bcc.n	800657e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	429a      	cmp	r2, r3
 800657c:	d902      	bls.n	8006584 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	76bb      	strb	r3, [r7, #26]
 8006582:	e0df      	b.n	8006744 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	4618      	mov	r0, r3
 8006588:	f04f 0100 	mov.w	r1, #0
 800658c:	f04f 0200 	mov.w	r2, #0
 8006590:	f04f 0300 	mov.w	r3, #0
 8006594:	020b      	lsls	r3, r1, #8
 8006596:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800659a:	0202      	lsls	r2, r0, #8
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	6849      	ldr	r1, [r1, #4]
 80065a0:	0849      	lsrs	r1, r1, #1
 80065a2:	4608      	mov	r0, r1
 80065a4:	f04f 0100 	mov.w	r1, #0
 80065a8:	1814      	adds	r4, r2, r0
 80065aa:	eb43 0501 	adc.w	r5, r3, r1
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	461a      	mov	r2, r3
 80065b4:	f04f 0300 	mov.w	r3, #0
 80065b8:	4620      	mov	r0, r4
 80065ba:	4629      	mov	r1, r5
 80065bc:	f7fa faf4 	bl	8000ba8 <__aeabi_uldivmod>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4613      	mov	r3, r2
 80065c6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065ce:	d308      	bcc.n	80065e2 <UART_SetConfig+0x396>
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065d6:	d204      	bcs.n	80065e2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	60da      	str	r2, [r3, #12]
 80065e0:	e0b0      	b.n	8006744 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	76bb      	strb	r3, [r7, #26]
 80065e6:	e0ad      	b.n	8006744 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065f0:	d15b      	bne.n	80066aa <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80065f2:	7efb      	ldrb	r3, [r7, #27]
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	d828      	bhi.n	800664a <UART_SetConfig+0x3fe>
 80065f8:	a201      	add	r2, pc, #4	; (adr r2, 8006600 <UART_SetConfig+0x3b4>)
 80065fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fe:	bf00      	nop
 8006600:	08006625 	.word	0x08006625
 8006604:	0800662d 	.word	0x0800662d
 8006608:	08006635 	.word	0x08006635
 800660c:	0800664b 	.word	0x0800664b
 8006610:	0800663b 	.word	0x0800663b
 8006614:	0800664b 	.word	0x0800664b
 8006618:	0800664b 	.word	0x0800664b
 800661c:	0800664b 	.word	0x0800664b
 8006620:	08006643 	.word	0x08006643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006624:	f7fe fc90 	bl	8004f48 <HAL_RCC_GetPCLK1Freq>
 8006628:	6178      	str	r0, [r7, #20]
        break;
 800662a:	e013      	b.n	8006654 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800662c:	f7fe fca2 	bl	8004f74 <HAL_RCC_GetPCLK2Freq>
 8006630:	6178      	str	r0, [r7, #20]
        break;
 8006632:	e00f      	b.n	8006654 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006634:	4b49      	ldr	r3, [pc, #292]	; (800675c <UART_SetConfig+0x510>)
 8006636:	617b      	str	r3, [r7, #20]
        break;
 8006638:	e00c      	b.n	8006654 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800663a:	f7fe fbed 	bl	8004e18 <HAL_RCC_GetSysClockFreq>
 800663e:	6178      	str	r0, [r7, #20]
        break;
 8006640:	e008      	b.n	8006654 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006646:	617b      	str	r3, [r7, #20]
        break;
 8006648:	e004      	b.n	8006654 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	76bb      	strb	r3, [r7, #26]
        break;
 8006652:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d074      	beq.n	8006744 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	005a      	lsls	r2, r3, #1
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	085b      	lsrs	r3, r3, #1
 8006664:	441a      	add	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	fbb2 f3f3 	udiv	r3, r2, r3
 800666e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	2b0f      	cmp	r3, #15
 8006674:	d916      	bls.n	80066a4 <UART_SetConfig+0x458>
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800667c:	d212      	bcs.n	80066a4 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	b29b      	uxth	r3, r3
 8006682:	f023 030f 	bic.w	r3, r3, #15
 8006686:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	085b      	lsrs	r3, r3, #1
 800668c:	b29b      	uxth	r3, r3
 800668e:	f003 0307 	and.w	r3, r3, #7
 8006692:	b29a      	uxth	r2, r3
 8006694:	89fb      	ldrh	r3, [r7, #14]
 8006696:	4313      	orrs	r3, r2
 8006698:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	89fa      	ldrh	r2, [r7, #14]
 80066a0:	60da      	str	r2, [r3, #12]
 80066a2:	e04f      	b.n	8006744 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	76bb      	strb	r3, [r7, #26]
 80066a8:	e04c      	b.n	8006744 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066aa:	7efb      	ldrb	r3, [r7, #27]
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	d828      	bhi.n	8006702 <UART_SetConfig+0x4b6>
 80066b0:	a201      	add	r2, pc, #4	; (adr r2, 80066b8 <UART_SetConfig+0x46c>)
 80066b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b6:	bf00      	nop
 80066b8:	080066dd 	.word	0x080066dd
 80066bc:	080066e5 	.word	0x080066e5
 80066c0:	080066ed 	.word	0x080066ed
 80066c4:	08006703 	.word	0x08006703
 80066c8:	080066f3 	.word	0x080066f3
 80066cc:	08006703 	.word	0x08006703
 80066d0:	08006703 	.word	0x08006703
 80066d4:	08006703 	.word	0x08006703
 80066d8:	080066fb 	.word	0x080066fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066dc:	f7fe fc34 	bl	8004f48 <HAL_RCC_GetPCLK1Freq>
 80066e0:	6178      	str	r0, [r7, #20]
        break;
 80066e2:	e013      	b.n	800670c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066e4:	f7fe fc46 	bl	8004f74 <HAL_RCC_GetPCLK2Freq>
 80066e8:	6178      	str	r0, [r7, #20]
        break;
 80066ea:	e00f      	b.n	800670c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066ec:	4b1b      	ldr	r3, [pc, #108]	; (800675c <UART_SetConfig+0x510>)
 80066ee:	617b      	str	r3, [r7, #20]
        break;
 80066f0:	e00c      	b.n	800670c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066f2:	f7fe fb91 	bl	8004e18 <HAL_RCC_GetSysClockFreq>
 80066f6:	6178      	str	r0, [r7, #20]
        break;
 80066f8:	e008      	b.n	800670c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066fe:	617b      	str	r3, [r7, #20]
        break;
 8006700:	e004      	b.n	800670c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	76bb      	strb	r3, [r7, #26]
        break;
 800670a:	bf00      	nop
    }

    if (pclk != 0U)
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d018      	beq.n	8006744 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	085a      	lsrs	r2, r3, #1
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	441a      	add	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	fbb2 f3f3 	udiv	r3, r2, r3
 8006724:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	2b0f      	cmp	r3, #15
 800672a:	d909      	bls.n	8006740 <UART_SetConfig+0x4f4>
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006732:	d205      	bcs.n	8006740 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	b29a      	uxth	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	60da      	str	r2, [r3, #12]
 800673e:	e001      	b.n	8006744 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006750:	7ebb      	ldrb	r3, [r7, #26]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3720      	adds	r7, #32
 8006756:	46bd      	mov	sp, r7
 8006758:	bdb0      	pop	{r4, r5, r7, pc}
 800675a:	bf00      	nop
 800675c:	00f42400 	.word	0x00f42400

08006760 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00a      	beq.n	800678a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00a      	beq.n	80067ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00a      	beq.n	80067ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d2:	f003 0308 	and.w	r3, r3, #8
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00a      	beq.n	80067f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f4:	f003 0310 	and.w	r3, r3, #16
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00a      	beq.n	8006812 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00a      	beq.n	8006834 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683c:	2b00      	cmp	r3, #0
 800683e:	d01a      	beq.n	8006876 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800685e:	d10a      	bne.n	8006876 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00a      	beq.n	8006898 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	430a      	orrs	r2, r1
 8006896:	605a      	str	r2, [r3, #4]
  }
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af02      	add	r7, sp, #8
 80068aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068b4:	f7fb f93a 	bl	8001b2c <HAL_GetTick>
 80068b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0308 	and.w	r3, r3, #8
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d10e      	bne.n	80068e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f82d 	bl	8006936 <UART_WaitOnFlagUntilTimeout>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e023      	b.n	800692e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0304 	and.w	r3, r3, #4
 80068f0:	2b04      	cmp	r3, #4
 80068f2:	d10e      	bne.n	8006912 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f817 	bl	8006936 <UART_WaitOnFlagUntilTimeout>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e00d      	b.n	800692e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2220      	movs	r2, #32
 8006916:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2220      	movs	r2, #32
 800691c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b09c      	sub	sp, #112	; 0x70
 800693a:	af00      	add	r7, sp, #0
 800693c:	60f8      	str	r0, [r7, #12]
 800693e:	60b9      	str	r1, [r7, #8]
 8006940:	603b      	str	r3, [r7, #0]
 8006942:	4613      	mov	r3, r2
 8006944:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006946:	e0a5      	b.n	8006a94 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800694a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800694e:	f000 80a1 	beq.w	8006a94 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006952:	f7fb f8eb 	bl	8001b2c <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800695e:	429a      	cmp	r2, r3
 8006960:	d302      	bcc.n	8006968 <UART_WaitOnFlagUntilTimeout+0x32>
 8006962:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006964:	2b00      	cmp	r3, #0
 8006966:	d13e      	bne.n	80069e6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006978:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800697c:	667b      	str	r3, [r7, #100]	; 0x64
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006986:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006988:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800698c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800698e:	e841 2300 	strex	r3, r2, [r1]
 8006992:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1e6      	bne.n	8006968 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3308      	adds	r3, #8
 80069a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a4:	e853 3f00 	ldrex	r3, [r3]
 80069a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ac:	f023 0301 	bic.w	r3, r3, #1
 80069b0:	663b      	str	r3, [r7, #96]	; 0x60
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3308      	adds	r3, #8
 80069b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80069bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069c2:	e841 2300 	strex	r3, r2, [r1]
 80069c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e5      	bne.n	800699a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2220      	movs	r2, #32
 80069d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2220      	movs	r2, #32
 80069d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e067      	b.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0304 	and.w	r3, r3, #4
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d04f      	beq.n	8006a94 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a02:	d147      	bne.n	8006a94 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a0c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a16:	e853 3f00 	ldrex	r3, [r3]
 8006a1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	461a      	mov	r2, r3
 8006a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a34:	e841 2300 	strex	r3, r2, [r1]
 8006a38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e6      	bne.n	8006a0e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3308      	adds	r3, #8
 8006a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	e853 3f00 	ldrex	r3, [r3]
 8006a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	f023 0301 	bic.w	r3, r3, #1
 8006a56:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3308      	adds	r3, #8
 8006a5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a60:	623a      	str	r2, [r7, #32]
 8006a62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a64:	69f9      	ldr	r1, [r7, #28]
 8006a66:	6a3a      	ldr	r2, [r7, #32]
 8006a68:	e841 2300 	strex	r3, r2, [r1]
 8006a6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1e5      	bne.n	8006a40 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2220      	movs	r2, #32
 8006a78:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2220      	movs	r2, #32
 8006a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e010      	b.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	69da      	ldr	r2, [r3, #28]
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	bf0c      	ite	eq
 8006aa4:	2301      	moveq	r3, #1
 8006aa6:	2300      	movne	r3, #0
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	461a      	mov	r2, r3
 8006aac:	79fb      	ldrb	r3, [r7, #7]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	f43f af4a 	beq.w	8006948 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3770      	adds	r7, #112	; 0x70
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
	...

08006ac0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b097      	sub	sp, #92	; 0x5c
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	4613      	mov	r3, r2
 8006acc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	88fa      	ldrh	r2, [r7, #6]
 8006ad8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	88fa      	ldrh	r2, [r7, #6]
 8006ae0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af2:	d10e      	bne.n	8006b12 <UART_Start_Receive_IT+0x52>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d105      	bne.n	8006b08 <UART_Start_Receive_IT+0x48>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006b02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b06:	e02d      	b.n	8006b64 <UART_Start_Receive_IT+0xa4>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	22ff      	movs	r2, #255	; 0xff
 8006b0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b10:	e028      	b.n	8006b64 <UART_Start_Receive_IT+0xa4>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10d      	bne.n	8006b36 <UART_Start_Receive_IT+0x76>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d104      	bne.n	8006b2c <UART_Start_Receive_IT+0x6c>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	22ff      	movs	r2, #255	; 0xff
 8006b26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b2a:	e01b      	b.n	8006b64 <UART_Start_Receive_IT+0xa4>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	227f      	movs	r2, #127	; 0x7f
 8006b30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b34:	e016      	b.n	8006b64 <UART_Start_Receive_IT+0xa4>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b3e:	d10d      	bne.n	8006b5c <UART_Start_Receive_IT+0x9c>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d104      	bne.n	8006b52 <UART_Start_Receive_IT+0x92>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	227f      	movs	r2, #127	; 0x7f
 8006b4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b50:	e008      	b.n	8006b64 <UART_Start_Receive_IT+0xa4>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	223f      	movs	r2, #63	; 0x3f
 8006b56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b5a:	e003      	b.n	8006b64 <UART_Start_Receive_IT+0xa4>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2222      	movs	r2, #34	; 0x22
 8006b70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3308      	adds	r3, #8
 8006b78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b84:	f043 0301 	orr.w	r3, r3, #1
 8006b88:	657b      	str	r3, [r7, #84]	; 0x54
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3308      	adds	r3, #8
 8006b90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b92:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b9a:	e841 2300 	strex	r3, r2, [r1]
 8006b9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1e5      	bne.n	8006b72 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bae:	d107      	bne.n	8006bc0 <UART_Start_Receive_IT+0x100>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d103      	bne.n	8006bc0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4a24      	ldr	r2, [pc, #144]	; (8006c4c <UART_Start_Receive_IT+0x18c>)
 8006bbc:	665a      	str	r2, [r3, #100]	; 0x64
 8006bbe:	e002      	b.n	8006bc6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4a23      	ldr	r2, [pc, #140]	; (8006c50 <UART_Start_Receive_IT+0x190>)
 8006bc4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d019      	beq.n	8006c0a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bde:	e853 3f00 	ldrex	r3, [r3]
 8006be2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8006bf6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bfc:	e841 2300 	strex	r3, r2, [r1]
 8006c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1e6      	bne.n	8006bd6 <UART_Start_Receive_IT+0x116>
 8006c08:	e018      	b.n	8006c3c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	e853 3f00 	ldrex	r3, [r3]
 8006c16:	613b      	str	r3, [r7, #16]
   return(result);
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	f043 0320 	orr.w	r3, r3, #32
 8006c1e:	653b      	str	r3, [r7, #80]	; 0x50
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	461a      	mov	r2, r3
 8006c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c28:	623b      	str	r3, [r7, #32]
 8006c2a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2c:	69f9      	ldr	r1, [r7, #28]
 8006c2e:	6a3a      	ldr	r2, [r7, #32]
 8006c30:	e841 2300 	strex	r3, r2, [r1]
 8006c34:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e6      	bne.n	8006c0a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	375c      	adds	r7, #92	; 0x5c
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	08006efb 	.word	0x08006efb
 8006c50:	08006d9b 	.word	0x08006d9b

08006c54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b095      	sub	sp, #84	; 0x54
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c64:	e853 3f00 	ldrex	r3, [r3]
 8006c68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c7a:	643b      	str	r3, [r7, #64]	; 0x40
 8006c7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1e6      	bne.n	8006c5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3308      	adds	r3, #8
 8006c94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	e853 3f00 	ldrex	r3, [r3]
 8006c9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	f023 0301 	bic.w	r3, r3, #1
 8006ca4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3308      	adds	r3, #8
 8006cac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1e5      	bne.n	8006c8e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d118      	bne.n	8006cfc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f023 0310 	bic.w	r3, r3, #16
 8006cde:	647b      	str	r3, [r7, #68]	; 0x44
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ce8:	61bb      	str	r3, [r7, #24]
 8006cea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cec:	6979      	ldr	r1, [r7, #20]
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	e841 2300 	strex	r3, r2, [r1]
 8006cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1e6      	bne.n	8006cca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006d0e:	bf00      	nop
 8006d10:	3754      	adds	r7, #84	; 0x54
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f7ff fa71 	bl	8006220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d3e:	bf00      	nop
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b088      	sub	sp, #32
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	e853 3f00 	ldrex	r3, [r3]
 8006d5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d62:	61fb      	str	r3, [r7, #28]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	61bb      	str	r3, [r7, #24]
 8006d6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d70:	6979      	ldr	r1, [r7, #20]
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	e841 2300 	strex	r3, r2, [r1]
 8006d78:	613b      	str	r3, [r7, #16]
   return(result);
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1e6      	bne.n	8006d4e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2220      	movs	r2, #32
 8006d84:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff fa3d 	bl	800620c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d92:	bf00      	nop
 8006d94:	3720      	adds	r7, #32
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b096      	sub	sp, #88	; 0x58
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006da8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006db0:	2b22      	cmp	r3, #34	; 0x22
 8006db2:	f040 8094 	bne.w	8006ede <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006dbc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006dc0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006dc4:	b2d9      	uxtb	r1, r3
 8006dc6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd0:	400a      	ands	r2, r1
 8006dd2:	b2d2      	uxtb	r2, r2
 8006dd4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dda:	1c5a      	adds	r2, r3, #1
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	3b01      	subs	r3, #1
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d179      	bne.n	8006ef2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e06:	e853 3f00 	ldrex	r3, [r3]
 8006e0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e12:	653b      	str	r3, [r7, #80]	; 0x50
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e1c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e1e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e24:	e841 2300 	strex	r3, r2, [r1]
 8006e28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1e6      	bne.n	8006dfe <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3308      	adds	r3, #8
 8006e36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	e853 3f00 	ldrex	r3, [r3]
 8006e3e:	623b      	str	r3, [r7, #32]
   return(result);
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	f023 0301 	bic.w	r3, r3, #1
 8006e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e50:	633a      	str	r2, [r7, #48]	; 0x30
 8006e52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e58:	e841 2300 	strex	r3, r2, [r1]
 8006e5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1e5      	bne.n	8006e30 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2220      	movs	r2, #32
 8006e68:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d12e      	bne.n	8006ed6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	e853 3f00 	ldrex	r3, [r3]
 8006e8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f023 0310 	bic.w	r3, r3, #16
 8006e92:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e9c:	61fb      	str	r3, [r7, #28]
 8006e9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea0:	69b9      	ldr	r1, [r7, #24]
 8006ea2:	69fa      	ldr	r2, [r7, #28]
 8006ea4:	e841 2300 	strex	r3, r2, [r1]
 8006ea8:	617b      	str	r3, [r7, #20]
   return(result);
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1e6      	bne.n	8006e7e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	f003 0310 	and.w	r3, r3, #16
 8006eba:	2b10      	cmp	r3, #16
 8006ebc:	d103      	bne.n	8006ec6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2210      	movs	r2, #16
 8006ec4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ecc:	4619      	mov	r1, r3
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7ff f9b0 	bl	8006234 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ed4:	e00d      	b.n	8006ef2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7fa fa20 	bl	800131c <HAL_UART_RxCpltCallback>
}
 8006edc:	e009      	b.n	8006ef2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	8b1b      	ldrh	r3, [r3, #24]
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f042 0208 	orr.w	r2, r2, #8
 8006eee:	b292      	uxth	r2, r2
 8006ef0:	831a      	strh	r2, [r3, #24]
}
 8006ef2:	bf00      	nop
 8006ef4:	3758      	adds	r7, #88	; 0x58
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b096      	sub	sp, #88	; 0x58
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f08:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f10:	2b22      	cmp	r3, #34	; 0x22
 8006f12:	f040 8094 	bne.w	800703e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006f1c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f24:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006f26:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006f2a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006f2e:	4013      	ands	r3, r2
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f34:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f3a:	1c9a      	adds	r2, r3, #2
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d179      	bne.n	8007052 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f66:	e853 3f00 	ldrex	r3, [r3]
 8006f6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f7c:	643b      	str	r3, [r7, #64]	; 0x40
 8006f7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f84:	e841 2300 	strex	r3, r2, [r1]
 8006f88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1e6      	bne.n	8006f5e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3308      	adds	r3, #8
 8006f96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	e853 3f00 	ldrex	r3, [r3]
 8006f9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	f023 0301 	bic.w	r3, r3, #1
 8006fa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3308      	adds	r3, #8
 8006fae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fb8:	e841 2300 	strex	r3, r2, [r1]
 8006fbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e5      	bne.n	8006f90 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d12e      	bne.n	8007036 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	e853 3f00 	ldrex	r3, [r3]
 8006fea:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f023 0310 	bic.w	r3, r3, #16
 8006ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ffc:	61bb      	str	r3, [r7, #24]
 8006ffe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007000:	6979      	ldr	r1, [r7, #20]
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	e841 2300 	strex	r3, r2, [r1]
 8007008:	613b      	str	r3, [r7, #16]
   return(result);
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1e6      	bne.n	8006fde <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	f003 0310 	and.w	r3, r3, #16
 800701a:	2b10      	cmp	r3, #16
 800701c:	d103      	bne.n	8007026 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2210      	movs	r2, #16
 8007024:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800702c:	4619      	mov	r1, r3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7ff f900 	bl	8006234 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007034:	e00d      	b.n	8007052 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7fa f970 	bl	800131c <HAL_UART_RxCpltCallback>
}
 800703c:	e009      	b.n	8007052 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	8b1b      	ldrh	r3, [r3, #24]
 8007044:	b29a      	uxth	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f042 0208 	orr.w	r2, r2, #8
 800704e:	b292      	uxth	r2, r2
 8007050:	831a      	strh	r2, [r3, #24]
}
 8007052:	bf00      	nop
 8007054:	3758      	adds	r7, #88	; 0x58
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800705a:	b480      	push	{r7}
 800705c:	b083      	sub	sp, #12
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007062:	bf00      	nop
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
	...

08007070 <__errno>:
 8007070:	4b01      	ldr	r3, [pc, #4]	; (8007078 <__errno+0x8>)
 8007072:	6818      	ldr	r0, [r3, #0]
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	2000000c 	.word	0x2000000c

0800707c <__libc_init_array>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	4d0d      	ldr	r5, [pc, #52]	; (80070b4 <__libc_init_array+0x38>)
 8007080:	4c0d      	ldr	r4, [pc, #52]	; (80070b8 <__libc_init_array+0x3c>)
 8007082:	1b64      	subs	r4, r4, r5
 8007084:	10a4      	asrs	r4, r4, #2
 8007086:	2600      	movs	r6, #0
 8007088:	42a6      	cmp	r6, r4
 800708a:	d109      	bne.n	80070a0 <__libc_init_array+0x24>
 800708c:	4d0b      	ldr	r5, [pc, #44]	; (80070bc <__libc_init_array+0x40>)
 800708e:	4c0c      	ldr	r4, [pc, #48]	; (80070c0 <__libc_init_array+0x44>)
 8007090:	f002 fd08 	bl	8009aa4 <_init>
 8007094:	1b64      	subs	r4, r4, r5
 8007096:	10a4      	asrs	r4, r4, #2
 8007098:	2600      	movs	r6, #0
 800709a:	42a6      	cmp	r6, r4
 800709c:	d105      	bne.n	80070aa <__libc_init_array+0x2e>
 800709e:	bd70      	pop	{r4, r5, r6, pc}
 80070a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80070a4:	4798      	blx	r3
 80070a6:	3601      	adds	r6, #1
 80070a8:	e7ee      	b.n	8007088 <__libc_init_array+0xc>
 80070aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ae:	4798      	blx	r3
 80070b0:	3601      	adds	r6, #1
 80070b2:	e7f2      	b.n	800709a <__libc_init_array+0x1e>
 80070b4:	08009f1c 	.word	0x08009f1c
 80070b8:	08009f1c 	.word	0x08009f1c
 80070bc:	08009f1c 	.word	0x08009f1c
 80070c0:	08009f20 	.word	0x08009f20

080070c4 <memset>:
 80070c4:	4402      	add	r2, r0
 80070c6:	4603      	mov	r3, r0
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d100      	bne.n	80070ce <memset+0xa>
 80070cc:	4770      	bx	lr
 80070ce:	f803 1b01 	strb.w	r1, [r3], #1
 80070d2:	e7f9      	b.n	80070c8 <memset+0x4>

080070d4 <__cvt>:
 80070d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070d8:	ec55 4b10 	vmov	r4, r5, d0
 80070dc:	2d00      	cmp	r5, #0
 80070de:	460e      	mov	r6, r1
 80070e0:	4619      	mov	r1, r3
 80070e2:	462b      	mov	r3, r5
 80070e4:	bfbb      	ittet	lt
 80070e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80070ea:	461d      	movlt	r5, r3
 80070ec:	2300      	movge	r3, #0
 80070ee:	232d      	movlt	r3, #45	; 0x2d
 80070f0:	700b      	strb	r3, [r1, #0]
 80070f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80070f8:	4691      	mov	r9, r2
 80070fa:	f023 0820 	bic.w	r8, r3, #32
 80070fe:	bfbc      	itt	lt
 8007100:	4622      	movlt	r2, r4
 8007102:	4614      	movlt	r4, r2
 8007104:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007108:	d005      	beq.n	8007116 <__cvt+0x42>
 800710a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800710e:	d100      	bne.n	8007112 <__cvt+0x3e>
 8007110:	3601      	adds	r6, #1
 8007112:	2102      	movs	r1, #2
 8007114:	e000      	b.n	8007118 <__cvt+0x44>
 8007116:	2103      	movs	r1, #3
 8007118:	ab03      	add	r3, sp, #12
 800711a:	9301      	str	r3, [sp, #4]
 800711c:	ab02      	add	r3, sp, #8
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	ec45 4b10 	vmov	d0, r4, r5
 8007124:	4653      	mov	r3, sl
 8007126:	4632      	mov	r2, r6
 8007128:	f000 fce2 	bl	8007af0 <_dtoa_r>
 800712c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007130:	4607      	mov	r7, r0
 8007132:	d102      	bne.n	800713a <__cvt+0x66>
 8007134:	f019 0f01 	tst.w	r9, #1
 8007138:	d022      	beq.n	8007180 <__cvt+0xac>
 800713a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800713e:	eb07 0906 	add.w	r9, r7, r6
 8007142:	d110      	bne.n	8007166 <__cvt+0x92>
 8007144:	783b      	ldrb	r3, [r7, #0]
 8007146:	2b30      	cmp	r3, #48	; 0x30
 8007148:	d10a      	bne.n	8007160 <__cvt+0x8c>
 800714a:	2200      	movs	r2, #0
 800714c:	2300      	movs	r3, #0
 800714e:	4620      	mov	r0, r4
 8007150:	4629      	mov	r1, r5
 8007152:	f7f9 fcb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007156:	b918      	cbnz	r0, 8007160 <__cvt+0x8c>
 8007158:	f1c6 0601 	rsb	r6, r6, #1
 800715c:	f8ca 6000 	str.w	r6, [sl]
 8007160:	f8da 3000 	ldr.w	r3, [sl]
 8007164:	4499      	add	r9, r3
 8007166:	2200      	movs	r2, #0
 8007168:	2300      	movs	r3, #0
 800716a:	4620      	mov	r0, r4
 800716c:	4629      	mov	r1, r5
 800716e:	f7f9 fcab 	bl	8000ac8 <__aeabi_dcmpeq>
 8007172:	b108      	cbz	r0, 8007178 <__cvt+0xa4>
 8007174:	f8cd 900c 	str.w	r9, [sp, #12]
 8007178:	2230      	movs	r2, #48	; 0x30
 800717a:	9b03      	ldr	r3, [sp, #12]
 800717c:	454b      	cmp	r3, r9
 800717e:	d307      	bcc.n	8007190 <__cvt+0xbc>
 8007180:	9b03      	ldr	r3, [sp, #12]
 8007182:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007184:	1bdb      	subs	r3, r3, r7
 8007186:	4638      	mov	r0, r7
 8007188:	6013      	str	r3, [r2, #0]
 800718a:	b004      	add	sp, #16
 800718c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007190:	1c59      	adds	r1, r3, #1
 8007192:	9103      	str	r1, [sp, #12]
 8007194:	701a      	strb	r2, [r3, #0]
 8007196:	e7f0      	b.n	800717a <__cvt+0xa6>

08007198 <__exponent>:
 8007198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800719a:	4603      	mov	r3, r0
 800719c:	2900      	cmp	r1, #0
 800719e:	bfb8      	it	lt
 80071a0:	4249      	neglt	r1, r1
 80071a2:	f803 2b02 	strb.w	r2, [r3], #2
 80071a6:	bfb4      	ite	lt
 80071a8:	222d      	movlt	r2, #45	; 0x2d
 80071aa:	222b      	movge	r2, #43	; 0x2b
 80071ac:	2909      	cmp	r1, #9
 80071ae:	7042      	strb	r2, [r0, #1]
 80071b0:	dd2a      	ble.n	8007208 <__exponent+0x70>
 80071b2:	f10d 0407 	add.w	r4, sp, #7
 80071b6:	46a4      	mov	ip, r4
 80071b8:	270a      	movs	r7, #10
 80071ba:	46a6      	mov	lr, r4
 80071bc:	460a      	mov	r2, r1
 80071be:	fb91 f6f7 	sdiv	r6, r1, r7
 80071c2:	fb07 1516 	mls	r5, r7, r6, r1
 80071c6:	3530      	adds	r5, #48	; 0x30
 80071c8:	2a63      	cmp	r2, #99	; 0x63
 80071ca:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80071ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80071d2:	4631      	mov	r1, r6
 80071d4:	dcf1      	bgt.n	80071ba <__exponent+0x22>
 80071d6:	3130      	adds	r1, #48	; 0x30
 80071d8:	f1ae 0502 	sub.w	r5, lr, #2
 80071dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80071e0:	1c44      	adds	r4, r0, #1
 80071e2:	4629      	mov	r1, r5
 80071e4:	4561      	cmp	r1, ip
 80071e6:	d30a      	bcc.n	80071fe <__exponent+0x66>
 80071e8:	f10d 0209 	add.w	r2, sp, #9
 80071ec:	eba2 020e 	sub.w	r2, r2, lr
 80071f0:	4565      	cmp	r5, ip
 80071f2:	bf88      	it	hi
 80071f4:	2200      	movhi	r2, #0
 80071f6:	4413      	add	r3, r2
 80071f8:	1a18      	subs	r0, r3, r0
 80071fa:	b003      	add	sp, #12
 80071fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007202:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007206:	e7ed      	b.n	80071e4 <__exponent+0x4c>
 8007208:	2330      	movs	r3, #48	; 0x30
 800720a:	3130      	adds	r1, #48	; 0x30
 800720c:	7083      	strb	r3, [r0, #2]
 800720e:	70c1      	strb	r1, [r0, #3]
 8007210:	1d03      	adds	r3, r0, #4
 8007212:	e7f1      	b.n	80071f8 <__exponent+0x60>

08007214 <_printf_float>:
 8007214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007218:	ed2d 8b02 	vpush	{d8}
 800721c:	b08d      	sub	sp, #52	; 0x34
 800721e:	460c      	mov	r4, r1
 8007220:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007224:	4616      	mov	r6, r2
 8007226:	461f      	mov	r7, r3
 8007228:	4605      	mov	r5, r0
 800722a:	f001 fb43 	bl	80088b4 <_localeconv_r>
 800722e:	f8d0 a000 	ldr.w	sl, [r0]
 8007232:	4650      	mov	r0, sl
 8007234:	f7f8 ffcc 	bl	80001d0 <strlen>
 8007238:	2300      	movs	r3, #0
 800723a:	930a      	str	r3, [sp, #40]	; 0x28
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	9305      	str	r3, [sp, #20]
 8007240:	f8d8 3000 	ldr.w	r3, [r8]
 8007244:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007248:	3307      	adds	r3, #7
 800724a:	f023 0307 	bic.w	r3, r3, #7
 800724e:	f103 0208 	add.w	r2, r3, #8
 8007252:	f8c8 2000 	str.w	r2, [r8]
 8007256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800725e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007262:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007266:	9307      	str	r3, [sp, #28]
 8007268:	f8cd 8018 	str.w	r8, [sp, #24]
 800726c:	ee08 0a10 	vmov	s16, r0
 8007270:	4b9f      	ldr	r3, [pc, #636]	; (80074f0 <_printf_float+0x2dc>)
 8007272:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800727a:	f7f9 fc57 	bl	8000b2c <__aeabi_dcmpun>
 800727e:	bb88      	cbnz	r0, 80072e4 <_printf_float+0xd0>
 8007280:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007284:	4b9a      	ldr	r3, [pc, #616]	; (80074f0 <_printf_float+0x2dc>)
 8007286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800728a:	f7f9 fc31 	bl	8000af0 <__aeabi_dcmple>
 800728e:	bb48      	cbnz	r0, 80072e4 <_printf_float+0xd0>
 8007290:	2200      	movs	r2, #0
 8007292:	2300      	movs	r3, #0
 8007294:	4640      	mov	r0, r8
 8007296:	4649      	mov	r1, r9
 8007298:	f7f9 fc20 	bl	8000adc <__aeabi_dcmplt>
 800729c:	b110      	cbz	r0, 80072a4 <_printf_float+0x90>
 800729e:	232d      	movs	r3, #45	; 0x2d
 80072a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072a4:	4b93      	ldr	r3, [pc, #588]	; (80074f4 <_printf_float+0x2e0>)
 80072a6:	4894      	ldr	r0, [pc, #592]	; (80074f8 <_printf_float+0x2e4>)
 80072a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80072ac:	bf94      	ite	ls
 80072ae:	4698      	movls	r8, r3
 80072b0:	4680      	movhi	r8, r0
 80072b2:	2303      	movs	r3, #3
 80072b4:	6123      	str	r3, [r4, #16]
 80072b6:	9b05      	ldr	r3, [sp, #20]
 80072b8:	f023 0204 	bic.w	r2, r3, #4
 80072bc:	6022      	str	r2, [r4, #0]
 80072be:	f04f 0900 	mov.w	r9, #0
 80072c2:	9700      	str	r7, [sp, #0]
 80072c4:	4633      	mov	r3, r6
 80072c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80072c8:	4621      	mov	r1, r4
 80072ca:	4628      	mov	r0, r5
 80072cc:	f000 f9d8 	bl	8007680 <_printf_common>
 80072d0:	3001      	adds	r0, #1
 80072d2:	f040 8090 	bne.w	80073f6 <_printf_float+0x1e2>
 80072d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072da:	b00d      	add	sp, #52	; 0x34
 80072dc:	ecbd 8b02 	vpop	{d8}
 80072e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e4:	4642      	mov	r2, r8
 80072e6:	464b      	mov	r3, r9
 80072e8:	4640      	mov	r0, r8
 80072ea:	4649      	mov	r1, r9
 80072ec:	f7f9 fc1e 	bl	8000b2c <__aeabi_dcmpun>
 80072f0:	b140      	cbz	r0, 8007304 <_printf_float+0xf0>
 80072f2:	464b      	mov	r3, r9
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	bfbc      	itt	lt
 80072f8:	232d      	movlt	r3, #45	; 0x2d
 80072fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80072fe:	487f      	ldr	r0, [pc, #508]	; (80074fc <_printf_float+0x2e8>)
 8007300:	4b7f      	ldr	r3, [pc, #508]	; (8007500 <_printf_float+0x2ec>)
 8007302:	e7d1      	b.n	80072a8 <_printf_float+0x94>
 8007304:	6863      	ldr	r3, [r4, #4]
 8007306:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800730a:	9206      	str	r2, [sp, #24]
 800730c:	1c5a      	adds	r2, r3, #1
 800730e:	d13f      	bne.n	8007390 <_printf_float+0x17c>
 8007310:	2306      	movs	r3, #6
 8007312:	6063      	str	r3, [r4, #4]
 8007314:	9b05      	ldr	r3, [sp, #20]
 8007316:	6861      	ldr	r1, [r4, #4]
 8007318:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800731c:	2300      	movs	r3, #0
 800731e:	9303      	str	r3, [sp, #12]
 8007320:	ab0a      	add	r3, sp, #40	; 0x28
 8007322:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007326:	ab09      	add	r3, sp, #36	; 0x24
 8007328:	ec49 8b10 	vmov	d0, r8, r9
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	6022      	str	r2, [r4, #0]
 8007330:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007334:	4628      	mov	r0, r5
 8007336:	f7ff fecd 	bl	80070d4 <__cvt>
 800733a:	9b06      	ldr	r3, [sp, #24]
 800733c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800733e:	2b47      	cmp	r3, #71	; 0x47
 8007340:	4680      	mov	r8, r0
 8007342:	d108      	bne.n	8007356 <_printf_float+0x142>
 8007344:	1cc8      	adds	r0, r1, #3
 8007346:	db02      	blt.n	800734e <_printf_float+0x13a>
 8007348:	6863      	ldr	r3, [r4, #4]
 800734a:	4299      	cmp	r1, r3
 800734c:	dd41      	ble.n	80073d2 <_printf_float+0x1be>
 800734e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007352:	fa5f fb8b 	uxtb.w	fp, fp
 8007356:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800735a:	d820      	bhi.n	800739e <_printf_float+0x18a>
 800735c:	3901      	subs	r1, #1
 800735e:	465a      	mov	r2, fp
 8007360:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007364:	9109      	str	r1, [sp, #36]	; 0x24
 8007366:	f7ff ff17 	bl	8007198 <__exponent>
 800736a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800736c:	1813      	adds	r3, r2, r0
 800736e:	2a01      	cmp	r2, #1
 8007370:	4681      	mov	r9, r0
 8007372:	6123      	str	r3, [r4, #16]
 8007374:	dc02      	bgt.n	800737c <_printf_float+0x168>
 8007376:	6822      	ldr	r2, [r4, #0]
 8007378:	07d2      	lsls	r2, r2, #31
 800737a:	d501      	bpl.n	8007380 <_printf_float+0x16c>
 800737c:	3301      	adds	r3, #1
 800737e:	6123      	str	r3, [r4, #16]
 8007380:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007384:	2b00      	cmp	r3, #0
 8007386:	d09c      	beq.n	80072c2 <_printf_float+0xae>
 8007388:	232d      	movs	r3, #45	; 0x2d
 800738a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800738e:	e798      	b.n	80072c2 <_printf_float+0xae>
 8007390:	9a06      	ldr	r2, [sp, #24]
 8007392:	2a47      	cmp	r2, #71	; 0x47
 8007394:	d1be      	bne.n	8007314 <_printf_float+0x100>
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1bc      	bne.n	8007314 <_printf_float+0x100>
 800739a:	2301      	movs	r3, #1
 800739c:	e7b9      	b.n	8007312 <_printf_float+0xfe>
 800739e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80073a2:	d118      	bne.n	80073d6 <_printf_float+0x1c2>
 80073a4:	2900      	cmp	r1, #0
 80073a6:	6863      	ldr	r3, [r4, #4]
 80073a8:	dd0b      	ble.n	80073c2 <_printf_float+0x1ae>
 80073aa:	6121      	str	r1, [r4, #16]
 80073ac:	b913      	cbnz	r3, 80073b4 <_printf_float+0x1a0>
 80073ae:	6822      	ldr	r2, [r4, #0]
 80073b0:	07d0      	lsls	r0, r2, #31
 80073b2:	d502      	bpl.n	80073ba <_printf_float+0x1a6>
 80073b4:	3301      	adds	r3, #1
 80073b6:	440b      	add	r3, r1
 80073b8:	6123      	str	r3, [r4, #16]
 80073ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80073bc:	f04f 0900 	mov.w	r9, #0
 80073c0:	e7de      	b.n	8007380 <_printf_float+0x16c>
 80073c2:	b913      	cbnz	r3, 80073ca <_printf_float+0x1b6>
 80073c4:	6822      	ldr	r2, [r4, #0]
 80073c6:	07d2      	lsls	r2, r2, #31
 80073c8:	d501      	bpl.n	80073ce <_printf_float+0x1ba>
 80073ca:	3302      	adds	r3, #2
 80073cc:	e7f4      	b.n	80073b8 <_printf_float+0x1a4>
 80073ce:	2301      	movs	r3, #1
 80073d0:	e7f2      	b.n	80073b8 <_printf_float+0x1a4>
 80073d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80073d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d8:	4299      	cmp	r1, r3
 80073da:	db05      	blt.n	80073e8 <_printf_float+0x1d4>
 80073dc:	6823      	ldr	r3, [r4, #0]
 80073de:	6121      	str	r1, [r4, #16]
 80073e0:	07d8      	lsls	r0, r3, #31
 80073e2:	d5ea      	bpl.n	80073ba <_printf_float+0x1a6>
 80073e4:	1c4b      	adds	r3, r1, #1
 80073e6:	e7e7      	b.n	80073b8 <_printf_float+0x1a4>
 80073e8:	2900      	cmp	r1, #0
 80073ea:	bfd4      	ite	le
 80073ec:	f1c1 0202 	rsble	r2, r1, #2
 80073f0:	2201      	movgt	r2, #1
 80073f2:	4413      	add	r3, r2
 80073f4:	e7e0      	b.n	80073b8 <_printf_float+0x1a4>
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	055a      	lsls	r2, r3, #21
 80073fa:	d407      	bmi.n	800740c <_printf_float+0x1f8>
 80073fc:	6923      	ldr	r3, [r4, #16]
 80073fe:	4642      	mov	r2, r8
 8007400:	4631      	mov	r1, r6
 8007402:	4628      	mov	r0, r5
 8007404:	47b8      	blx	r7
 8007406:	3001      	adds	r0, #1
 8007408:	d12c      	bne.n	8007464 <_printf_float+0x250>
 800740a:	e764      	b.n	80072d6 <_printf_float+0xc2>
 800740c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007410:	f240 80e0 	bls.w	80075d4 <_printf_float+0x3c0>
 8007414:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007418:	2200      	movs	r2, #0
 800741a:	2300      	movs	r3, #0
 800741c:	f7f9 fb54 	bl	8000ac8 <__aeabi_dcmpeq>
 8007420:	2800      	cmp	r0, #0
 8007422:	d034      	beq.n	800748e <_printf_float+0x27a>
 8007424:	4a37      	ldr	r2, [pc, #220]	; (8007504 <_printf_float+0x2f0>)
 8007426:	2301      	movs	r3, #1
 8007428:	4631      	mov	r1, r6
 800742a:	4628      	mov	r0, r5
 800742c:	47b8      	blx	r7
 800742e:	3001      	adds	r0, #1
 8007430:	f43f af51 	beq.w	80072d6 <_printf_float+0xc2>
 8007434:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007438:	429a      	cmp	r2, r3
 800743a:	db02      	blt.n	8007442 <_printf_float+0x22e>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	07d8      	lsls	r0, r3, #31
 8007440:	d510      	bpl.n	8007464 <_printf_float+0x250>
 8007442:	ee18 3a10 	vmov	r3, s16
 8007446:	4652      	mov	r2, sl
 8007448:	4631      	mov	r1, r6
 800744a:	4628      	mov	r0, r5
 800744c:	47b8      	blx	r7
 800744e:	3001      	adds	r0, #1
 8007450:	f43f af41 	beq.w	80072d6 <_printf_float+0xc2>
 8007454:	f04f 0800 	mov.w	r8, #0
 8007458:	f104 091a 	add.w	r9, r4, #26
 800745c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800745e:	3b01      	subs	r3, #1
 8007460:	4543      	cmp	r3, r8
 8007462:	dc09      	bgt.n	8007478 <_printf_float+0x264>
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	079b      	lsls	r3, r3, #30
 8007468:	f100 8105 	bmi.w	8007676 <_printf_float+0x462>
 800746c:	68e0      	ldr	r0, [r4, #12]
 800746e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007470:	4298      	cmp	r0, r3
 8007472:	bfb8      	it	lt
 8007474:	4618      	movlt	r0, r3
 8007476:	e730      	b.n	80072da <_printf_float+0xc6>
 8007478:	2301      	movs	r3, #1
 800747a:	464a      	mov	r2, r9
 800747c:	4631      	mov	r1, r6
 800747e:	4628      	mov	r0, r5
 8007480:	47b8      	blx	r7
 8007482:	3001      	adds	r0, #1
 8007484:	f43f af27 	beq.w	80072d6 <_printf_float+0xc2>
 8007488:	f108 0801 	add.w	r8, r8, #1
 800748c:	e7e6      	b.n	800745c <_printf_float+0x248>
 800748e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007490:	2b00      	cmp	r3, #0
 8007492:	dc39      	bgt.n	8007508 <_printf_float+0x2f4>
 8007494:	4a1b      	ldr	r2, [pc, #108]	; (8007504 <_printf_float+0x2f0>)
 8007496:	2301      	movs	r3, #1
 8007498:	4631      	mov	r1, r6
 800749a:	4628      	mov	r0, r5
 800749c:	47b8      	blx	r7
 800749e:	3001      	adds	r0, #1
 80074a0:	f43f af19 	beq.w	80072d6 <_printf_float+0xc2>
 80074a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074a8:	4313      	orrs	r3, r2
 80074aa:	d102      	bne.n	80074b2 <_printf_float+0x29e>
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	07d9      	lsls	r1, r3, #31
 80074b0:	d5d8      	bpl.n	8007464 <_printf_float+0x250>
 80074b2:	ee18 3a10 	vmov	r3, s16
 80074b6:	4652      	mov	r2, sl
 80074b8:	4631      	mov	r1, r6
 80074ba:	4628      	mov	r0, r5
 80074bc:	47b8      	blx	r7
 80074be:	3001      	adds	r0, #1
 80074c0:	f43f af09 	beq.w	80072d6 <_printf_float+0xc2>
 80074c4:	f04f 0900 	mov.w	r9, #0
 80074c8:	f104 0a1a 	add.w	sl, r4, #26
 80074cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ce:	425b      	negs	r3, r3
 80074d0:	454b      	cmp	r3, r9
 80074d2:	dc01      	bgt.n	80074d8 <_printf_float+0x2c4>
 80074d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074d6:	e792      	b.n	80073fe <_printf_float+0x1ea>
 80074d8:	2301      	movs	r3, #1
 80074da:	4652      	mov	r2, sl
 80074dc:	4631      	mov	r1, r6
 80074de:	4628      	mov	r0, r5
 80074e0:	47b8      	blx	r7
 80074e2:	3001      	adds	r0, #1
 80074e4:	f43f aef7 	beq.w	80072d6 <_printf_float+0xc2>
 80074e8:	f109 0901 	add.w	r9, r9, #1
 80074ec:	e7ee      	b.n	80074cc <_printf_float+0x2b8>
 80074ee:	bf00      	nop
 80074f0:	7fefffff 	.word	0x7fefffff
 80074f4:	08009b38 	.word	0x08009b38
 80074f8:	08009b3c 	.word	0x08009b3c
 80074fc:	08009b44 	.word	0x08009b44
 8007500:	08009b40 	.word	0x08009b40
 8007504:	08009b48 	.word	0x08009b48
 8007508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800750a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800750c:	429a      	cmp	r2, r3
 800750e:	bfa8      	it	ge
 8007510:	461a      	movge	r2, r3
 8007512:	2a00      	cmp	r2, #0
 8007514:	4691      	mov	r9, r2
 8007516:	dc37      	bgt.n	8007588 <_printf_float+0x374>
 8007518:	f04f 0b00 	mov.w	fp, #0
 800751c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007520:	f104 021a 	add.w	r2, r4, #26
 8007524:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007526:	9305      	str	r3, [sp, #20]
 8007528:	eba3 0309 	sub.w	r3, r3, r9
 800752c:	455b      	cmp	r3, fp
 800752e:	dc33      	bgt.n	8007598 <_printf_float+0x384>
 8007530:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007534:	429a      	cmp	r2, r3
 8007536:	db3b      	blt.n	80075b0 <_printf_float+0x39c>
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	07da      	lsls	r2, r3, #31
 800753c:	d438      	bmi.n	80075b0 <_printf_float+0x39c>
 800753e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007540:	9b05      	ldr	r3, [sp, #20]
 8007542:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	eba2 0901 	sub.w	r9, r2, r1
 800754a:	4599      	cmp	r9, r3
 800754c:	bfa8      	it	ge
 800754e:	4699      	movge	r9, r3
 8007550:	f1b9 0f00 	cmp.w	r9, #0
 8007554:	dc35      	bgt.n	80075c2 <_printf_float+0x3ae>
 8007556:	f04f 0800 	mov.w	r8, #0
 800755a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800755e:	f104 0a1a 	add.w	sl, r4, #26
 8007562:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007566:	1a9b      	subs	r3, r3, r2
 8007568:	eba3 0309 	sub.w	r3, r3, r9
 800756c:	4543      	cmp	r3, r8
 800756e:	f77f af79 	ble.w	8007464 <_printf_float+0x250>
 8007572:	2301      	movs	r3, #1
 8007574:	4652      	mov	r2, sl
 8007576:	4631      	mov	r1, r6
 8007578:	4628      	mov	r0, r5
 800757a:	47b8      	blx	r7
 800757c:	3001      	adds	r0, #1
 800757e:	f43f aeaa 	beq.w	80072d6 <_printf_float+0xc2>
 8007582:	f108 0801 	add.w	r8, r8, #1
 8007586:	e7ec      	b.n	8007562 <_printf_float+0x34e>
 8007588:	4613      	mov	r3, r2
 800758a:	4631      	mov	r1, r6
 800758c:	4642      	mov	r2, r8
 800758e:	4628      	mov	r0, r5
 8007590:	47b8      	blx	r7
 8007592:	3001      	adds	r0, #1
 8007594:	d1c0      	bne.n	8007518 <_printf_float+0x304>
 8007596:	e69e      	b.n	80072d6 <_printf_float+0xc2>
 8007598:	2301      	movs	r3, #1
 800759a:	4631      	mov	r1, r6
 800759c:	4628      	mov	r0, r5
 800759e:	9205      	str	r2, [sp, #20]
 80075a0:	47b8      	blx	r7
 80075a2:	3001      	adds	r0, #1
 80075a4:	f43f ae97 	beq.w	80072d6 <_printf_float+0xc2>
 80075a8:	9a05      	ldr	r2, [sp, #20]
 80075aa:	f10b 0b01 	add.w	fp, fp, #1
 80075ae:	e7b9      	b.n	8007524 <_printf_float+0x310>
 80075b0:	ee18 3a10 	vmov	r3, s16
 80075b4:	4652      	mov	r2, sl
 80075b6:	4631      	mov	r1, r6
 80075b8:	4628      	mov	r0, r5
 80075ba:	47b8      	blx	r7
 80075bc:	3001      	adds	r0, #1
 80075be:	d1be      	bne.n	800753e <_printf_float+0x32a>
 80075c0:	e689      	b.n	80072d6 <_printf_float+0xc2>
 80075c2:	9a05      	ldr	r2, [sp, #20]
 80075c4:	464b      	mov	r3, r9
 80075c6:	4442      	add	r2, r8
 80075c8:	4631      	mov	r1, r6
 80075ca:	4628      	mov	r0, r5
 80075cc:	47b8      	blx	r7
 80075ce:	3001      	adds	r0, #1
 80075d0:	d1c1      	bne.n	8007556 <_printf_float+0x342>
 80075d2:	e680      	b.n	80072d6 <_printf_float+0xc2>
 80075d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075d6:	2a01      	cmp	r2, #1
 80075d8:	dc01      	bgt.n	80075de <_printf_float+0x3ca>
 80075da:	07db      	lsls	r3, r3, #31
 80075dc:	d538      	bpl.n	8007650 <_printf_float+0x43c>
 80075de:	2301      	movs	r3, #1
 80075e0:	4642      	mov	r2, r8
 80075e2:	4631      	mov	r1, r6
 80075e4:	4628      	mov	r0, r5
 80075e6:	47b8      	blx	r7
 80075e8:	3001      	adds	r0, #1
 80075ea:	f43f ae74 	beq.w	80072d6 <_printf_float+0xc2>
 80075ee:	ee18 3a10 	vmov	r3, s16
 80075f2:	4652      	mov	r2, sl
 80075f4:	4631      	mov	r1, r6
 80075f6:	4628      	mov	r0, r5
 80075f8:	47b8      	blx	r7
 80075fa:	3001      	adds	r0, #1
 80075fc:	f43f ae6b 	beq.w	80072d6 <_printf_float+0xc2>
 8007600:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007604:	2200      	movs	r2, #0
 8007606:	2300      	movs	r3, #0
 8007608:	f7f9 fa5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800760c:	b9d8      	cbnz	r0, 8007646 <_printf_float+0x432>
 800760e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007610:	f108 0201 	add.w	r2, r8, #1
 8007614:	3b01      	subs	r3, #1
 8007616:	4631      	mov	r1, r6
 8007618:	4628      	mov	r0, r5
 800761a:	47b8      	blx	r7
 800761c:	3001      	adds	r0, #1
 800761e:	d10e      	bne.n	800763e <_printf_float+0x42a>
 8007620:	e659      	b.n	80072d6 <_printf_float+0xc2>
 8007622:	2301      	movs	r3, #1
 8007624:	4652      	mov	r2, sl
 8007626:	4631      	mov	r1, r6
 8007628:	4628      	mov	r0, r5
 800762a:	47b8      	blx	r7
 800762c:	3001      	adds	r0, #1
 800762e:	f43f ae52 	beq.w	80072d6 <_printf_float+0xc2>
 8007632:	f108 0801 	add.w	r8, r8, #1
 8007636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007638:	3b01      	subs	r3, #1
 800763a:	4543      	cmp	r3, r8
 800763c:	dcf1      	bgt.n	8007622 <_printf_float+0x40e>
 800763e:	464b      	mov	r3, r9
 8007640:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007644:	e6dc      	b.n	8007400 <_printf_float+0x1ec>
 8007646:	f04f 0800 	mov.w	r8, #0
 800764a:	f104 0a1a 	add.w	sl, r4, #26
 800764e:	e7f2      	b.n	8007636 <_printf_float+0x422>
 8007650:	2301      	movs	r3, #1
 8007652:	4642      	mov	r2, r8
 8007654:	e7df      	b.n	8007616 <_printf_float+0x402>
 8007656:	2301      	movs	r3, #1
 8007658:	464a      	mov	r2, r9
 800765a:	4631      	mov	r1, r6
 800765c:	4628      	mov	r0, r5
 800765e:	47b8      	blx	r7
 8007660:	3001      	adds	r0, #1
 8007662:	f43f ae38 	beq.w	80072d6 <_printf_float+0xc2>
 8007666:	f108 0801 	add.w	r8, r8, #1
 800766a:	68e3      	ldr	r3, [r4, #12]
 800766c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800766e:	1a5b      	subs	r3, r3, r1
 8007670:	4543      	cmp	r3, r8
 8007672:	dcf0      	bgt.n	8007656 <_printf_float+0x442>
 8007674:	e6fa      	b.n	800746c <_printf_float+0x258>
 8007676:	f04f 0800 	mov.w	r8, #0
 800767a:	f104 0919 	add.w	r9, r4, #25
 800767e:	e7f4      	b.n	800766a <_printf_float+0x456>

08007680 <_printf_common>:
 8007680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007684:	4616      	mov	r6, r2
 8007686:	4699      	mov	r9, r3
 8007688:	688a      	ldr	r2, [r1, #8]
 800768a:	690b      	ldr	r3, [r1, #16]
 800768c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007690:	4293      	cmp	r3, r2
 8007692:	bfb8      	it	lt
 8007694:	4613      	movlt	r3, r2
 8007696:	6033      	str	r3, [r6, #0]
 8007698:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800769c:	4607      	mov	r7, r0
 800769e:	460c      	mov	r4, r1
 80076a0:	b10a      	cbz	r2, 80076a6 <_printf_common+0x26>
 80076a2:	3301      	adds	r3, #1
 80076a4:	6033      	str	r3, [r6, #0]
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	0699      	lsls	r1, r3, #26
 80076aa:	bf42      	ittt	mi
 80076ac:	6833      	ldrmi	r3, [r6, #0]
 80076ae:	3302      	addmi	r3, #2
 80076b0:	6033      	strmi	r3, [r6, #0]
 80076b2:	6825      	ldr	r5, [r4, #0]
 80076b4:	f015 0506 	ands.w	r5, r5, #6
 80076b8:	d106      	bne.n	80076c8 <_printf_common+0x48>
 80076ba:	f104 0a19 	add.w	sl, r4, #25
 80076be:	68e3      	ldr	r3, [r4, #12]
 80076c0:	6832      	ldr	r2, [r6, #0]
 80076c2:	1a9b      	subs	r3, r3, r2
 80076c4:	42ab      	cmp	r3, r5
 80076c6:	dc26      	bgt.n	8007716 <_printf_common+0x96>
 80076c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076cc:	1e13      	subs	r3, r2, #0
 80076ce:	6822      	ldr	r2, [r4, #0]
 80076d0:	bf18      	it	ne
 80076d2:	2301      	movne	r3, #1
 80076d4:	0692      	lsls	r2, r2, #26
 80076d6:	d42b      	bmi.n	8007730 <_printf_common+0xb0>
 80076d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076dc:	4649      	mov	r1, r9
 80076de:	4638      	mov	r0, r7
 80076e0:	47c0      	blx	r8
 80076e2:	3001      	adds	r0, #1
 80076e4:	d01e      	beq.n	8007724 <_printf_common+0xa4>
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	68e5      	ldr	r5, [r4, #12]
 80076ea:	6832      	ldr	r2, [r6, #0]
 80076ec:	f003 0306 	and.w	r3, r3, #6
 80076f0:	2b04      	cmp	r3, #4
 80076f2:	bf08      	it	eq
 80076f4:	1aad      	subeq	r5, r5, r2
 80076f6:	68a3      	ldr	r3, [r4, #8]
 80076f8:	6922      	ldr	r2, [r4, #16]
 80076fa:	bf0c      	ite	eq
 80076fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007700:	2500      	movne	r5, #0
 8007702:	4293      	cmp	r3, r2
 8007704:	bfc4      	itt	gt
 8007706:	1a9b      	subgt	r3, r3, r2
 8007708:	18ed      	addgt	r5, r5, r3
 800770a:	2600      	movs	r6, #0
 800770c:	341a      	adds	r4, #26
 800770e:	42b5      	cmp	r5, r6
 8007710:	d11a      	bne.n	8007748 <_printf_common+0xc8>
 8007712:	2000      	movs	r0, #0
 8007714:	e008      	b.n	8007728 <_printf_common+0xa8>
 8007716:	2301      	movs	r3, #1
 8007718:	4652      	mov	r2, sl
 800771a:	4649      	mov	r1, r9
 800771c:	4638      	mov	r0, r7
 800771e:	47c0      	blx	r8
 8007720:	3001      	adds	r0, #1
 8007722:	d103      	bne.n	800772c <_printf_common+0xac>
 8007724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800772c:	3501      	adds	r5, #1
 800772e:	e7c6      	b.n	80076be <_printf_common+0x3e>
 8007730:	18e1      	adds	r1, r4, r3
 8007732:	1c5a      	adds	r2, r3, #1
 8007734:	2030      	movs	r0, #48	; 0x30
 8007736:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800773a:	4422      	add	r2, r4
 800773c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007740:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007744:	3302      	adds	r3, #2
 8007746:	e7c7      	b.n	80076d8 <_printf_common+0x58>
 8007748:	2301      	movs	r3, #1
 800774a:	4622      	mov	r2, r4
 800774c:	4649      	mov	r1, r9
 800774e:	4638      	mov	r0, r7
 8007750:	47c0      	blx	r8
 8007752:	3001      	adds	r0, #1
 8007754:	d0e6      	beq.n	8007724 <_printf_common+0xa4>
 8007756:	3601      	adds	r6, #1
 8007758:	e7d9      	b.n	800770e <_printf_common+0x8e>
	...

0800775c <_printf_i>:
 800775c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007760:	460c      	mov	r4, r1
 8007762:	4691      	mov	r9, r2
 8007764:	7e27      	ldrb	r7, [r4, #24]
 8007766:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007768:	2f78      	cmp	r7, #120	; 0x78
 800776a:	4680      	mov	r8, r0
 800776c:	469a      	mov	sl, r3
 800776e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007772:	d807      	bhi.n	8007784 <_printf_i+0x28>
 8007774:	2f62      	cmp	r7, #98	; 0x62
 8007776:	d80a      	bhi.n	800778e <_printf_i+0x32>
 8007778:	2f00      	cmp	r7, #0
 800777a:	f000 80d8 	beq.w	800792e <_printf_i+0x1d2>
 800777e:	2f58      	cmp	r7, #88	; 0x58
 8007780:	f000 80a3 	beq.w	80078ca <_printf_i+0x16e>
 8007784:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007788:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800778c:	e03a      	b.n	8007804 <_printf_i+0xa8>
 800778e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007792:	2b15      	cmp	r3, #21
 8007794:	d8f6      	bhi.n	8007784 <_printf_i+0x28>
 8007796:	a001      	add	r0, pc, #4	; (adr r0, 800779c <_printf_i+0x40>)
 8007798:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800779c:	080077f5 	.word	0x080077f5
 80077a0:	08007809 	.word	0x08007809
 80077a4:	08007785 	.word	0x08007785
 80077a8:	08007785 	.word	0x08007785
 80077ac:	08007785 	.word	0x08007785
 80077b0:	08007785 	.word	0x08007785
 80077b4:	08007809 	.word	0x08007809
 80077b8:	08007785 	.word	0x08007785
 80077bc:	08007785 	.word	0x08007785
 80077c0:	08007785 	.word	0x08007785
 80077c4:	08007785 	.word	0x08007785
 80077c8:	08007915 	.word	0x08007915
 80077cc:	08007839 	.word	0x08007839
 80077d0:	080078f7 	.word	0x080078f7
 80077d4:	08007785 	.word	0x08007785
 80077d8:	08007785 	.word	0x08007785
 80077dc:	08007937 	.word	0x08007937
 80077e0:	08007785 	.word	0x08007785
 80077e4:	08007839 	.word	0x08007839
 80077e8:	08007785 	.word	0x08007785
 80077ec:	08007785 	.word	0x08007785
 80077f0:	080078ff 	.word	0x080078ff
 80077f4:	680b      	ldr	r3, [r1, #0]
 80077f6:	1d1a      	adds	r2, r3, #4
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	600a      	str	r2, [r1, #0]
 80077fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007804:	2301      	movs	r3, #1
 8007806:	e0a3      	b.n	8007950 <_printf_i+0x1f4>
 8007808:	6825      	ldr	r5, [r4, #0]
 800780a:	6808      	ldr	r0, [r1, #0]
 800780c:	062e      	lsls	r6, r5, #24
 800780e:	f100 0304 	add.w	r3, r0, #4
 8007812:	d50a      	bpl.n	800782a <_printf_i+0xce>
 8007814:	6805      	ldr	r5, [r0, #0]
 8007816:	600b      	str	r3, [r1, #0]
 8007818:	2d00      	cmp	r5, #0
 800781a:	da03      	bge.n	8007824 <_printf_i+0xc8>
 800781c:	232d      	movs	r3, #45	; 0x2d
 800781e:	426d      	negs	r5, r5
 8007820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007824:	485e      	ldr	r0, [pc, #376]	; (80079a0 <_printf_i+0x244>)
 8007826:	230a      	movs	r3, #10
 8007828:	e019      	b.n	800785e <_printf_i+0x102>
 800782a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800782e:	6805      	ldr	r5, [r0, #0]
 8007830:	600b      	str	r3, [r1, #0]
 8007832:	bf18      	it	ne
 8007834:	b22d      	sxthne	r5, r5
 8007836:	e7ef      	b.n	8007818 <_printf_i+0xbc>
 8007838:	680b      	ldr	r3, [r1, #0]
 800783a:	6825      	ldr	r5, [r4, #0]
 800783c:	1d18      	adds	r0, r3, #4
 800783e:	6008      	str	r0, [r1, #0]
 8007840:	0628      	lsls	r0, r5, #24
 8007842:	d501      	bpl.n	8007848 <_printf_i+0xec>
 8007844:	681d      	ldr	r5, [r3, #0]
 8007846:	e002      	b.n	800784e <_printf_i+0xf2>
 8007848:	0669      	lsls	r1, r5, #25
 800784a:	d5fb      	bpl.n	8007844 <_printf_i+0xe8>
 800784c:	881d      	ldrh	r5, [r3, #0]
 800784e:	4854      	ldr	r0, [pc, #336]	; (80079a0 <_printf_i+0x244>)
 8007850:	2f6f      	cmp	r7, #111	; 0x6f
 8007852:	bf0c      	ite	eq
 8007854:	2308      	moveq	r3, #8
 8007856:	230a      	movne	r3, #10
 8007858:	2100      	movs	r1, #0
 800785a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800785e:	6866      	ldr	r6, [r4, #4]
 8007860:	60a6      	str	r6, [r4, #8]
 8007862:	2e00      	cmp	r6, #0
 8007864:	bfa2      	ittt	ge
 8007866:	6821      	ldrge	r1, [r4, #0]
 8007868:	f021 0104 	bicge.w	r1, r1, #4
 800786c:	6021      	strge	r1, [r4, #0]
 800786e:	b90d      	cbnz	r5, 8007874 <_printf_i+0x118>
 8007870:	2e00      	cmp	r6, #0
 8007872:	d04d      	beq.n	8007910 <_printf_i+0x1b4>
 8007874:	4616      	mov	r6, r2
 8007876:	fbb5 f1f3 	udiv	r1, r5, r3
 800787a:	fb03 5711 	mls	r7, r3, r1, r5
 800787e:	5dc7      	ldrb	r7, [r0, r7]
 8007880:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007884:	462f      	mov	r7, r5
 8007886:	42bb      	cmp	r3, r7
 8007888:	460d      	mov	r5, r1
 800788a:	d9f4      	bls.n	8007876 <_printf_i+0x11a>
 800788c:	2b08      	cmp	r3, #8
 800788e:	d10b      	bne.n	80078a8 <_printf_i+0x14c>
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	07df      	lsls	r7, r3, #31
 8007894:	d508      	bpl.n	80078a8 <_printf_i+0x14c>
 8007896:	6923      	ldr	r3, [r4, #16]
 8007898:	6861      	ldr	r1, [r4, #4]
 800789a:	4299      	cmp	r1, r3
 800789c:	bfde      	ittt	le
 800789e:	2330      	movle	r3, #48	; 0x30
 80078a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078a4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80078a8:	1b92      	subs	r2, r2, r6
 80078aa:	6122      	str	r2, [r4, #16]
 80078ac:	f8cd a000 	str.w	sl, [sp]
 80078b0:	464b      	mov	r3, r9
 80078b2:	aa03      	add	r2, sp, #12
 80078b4:	4621      	mov	r1, r4
 80078b6:	4640      	mov	r0, r8
 80078b8:	f7ff fee2 	bl	8007680 <_printf_common>
 80078bc:	3001      	adds	r0, #1
 80078be:	d14c      	bne.n	800795a <_printf_i+0x1fe>
 80078c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078c4:	b004      	add	sp, #16
 80078c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ca:	4835      	ldr	r0, [pc, #212]	; (80079a0 <_printf_i+0x244>)
 80078cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	680e      	ldr	r6, [r1, #0]
 80078d4:	061f      	lsls	r7, r3, #24
 80078d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80078da:	600e      	str	r6, [r1, #0]
 80078dc:	d514      	bpl.n	8007908 <_printf_i+0x1ac>
 80078de:	07d9      	lsls	r1, r3, #31
 80078e0:	bf44      	itt	mi
 80078e2:	f043 0320 	orrmi.w	r3, r3, #32
 80078e6:	6023      	strmi	r3, [r4, #0]
 80078e8:	b91d      	cbnz	r5, 80078f2 <_printf_i+0x196>
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	f023 0320 	bic.w	r3, r3, #32
 80078f0:	6023      	str	r3, [r4, #0]
 80078f2:	2310      	movs	r3, #16
 80078f4:	e7b0      	b.n	8007858 <_printf_i+0xfc>
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	f043 0320 	orr.w	r3, r3, #32
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	2378      	movs	r3, #120	; 0x78
 8007900:	4828      	ldr	r0, [pc, #160]	; (80079a4 <_printf_i+0x248>)
 8007902:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007906:	e7e3      	b.n	80078d0 <_printf_i+0x174>
 8007908:	065e      	lsls	r6, r3, #25
 800790a:	bf48      	it	mi
 800790c:	b2ad      	uxthmi	r5, r5
 800790e:	e7e6      	b.n	80078de <_printf_i+0x182>
 8007910:	4616      	mov	r6, r2
 8007912:	e7bb      	b.n	800788c <_printf_i+0x130>
 8007914:	680b      	ldr	r3, [r1, #0]
 8007916:	6826      	ldr	r6, [r4, #0]
 8007918:	6960      	ldr	r0, [r4, #20]
 800791a:	1d1d      	adds	r5, r3, #4
 800791c:	600d      	str	r5, [r1, #0]
 800791e:	0635      	lsls	r5, r6, #24
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	d501      	bpl.n	8007928 <_printf_i+0x1cc>
 8007924:	6018      	str	r0, [r3, #0]
 8007926:	e002      	b.n	800792e <_printf_i+0x1d2>
 8007928:	0671      	lsls	r1, r6, #25
 800792a:	d5fb      	bpl.n	8007924 <_printf_i+0x1c8>
 800792c:	8018      	strh	r0, [r3, #0]
 800792e:	2300      	movs	r3, #0
 8007930:	6123      	str	r3, [r4, #16]
 8007932:	4616      	mov	r6, r2
 8007934:	e7ba      	b.n	80078ac <_printf_i+0x150>
 8007936:	680b      	ldr	r3, [r1, #0]
 8007938:	1d1a      	adds	r2, r3, #4
 800793a:	600a      	str	r2, [r1, #0]
 800793c:	681e      	ldr	r6, [r3, #0]
 800793e:	6862      	ldr	r2, [r4, #4]
 8007940:	2100      	movs	r1, #0
 8007942:	4630      	mov	r0, r6
 8007944:	f7f8 fc4c 	bl	80001e0 <memchr>
 8007948:	b108      	cbz	r0, 800794e <_printf_i+0x1f2>
 800794a:	1b80      	subs	r0, r0, r6
 800794c:	6060      	str	r0, [r4, #4]
 800794e:	6863      	ldr	r3, [r4, #4]
 8007950:	6123      	str	r3, [r4, #16]
 8007952:	2300      	movs	r3, #0
 8007954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007958:	e7a8      	b.n	80078ac <_printf_i+0x150>
 800795a:	6923      	ldr	r3, [r4, #16]
 800795c:	4632      	mov	r2, r6
 800795e:	4649      	mov	r1, r9
 8007960:	4640      	mov	r0, r8
 8007962:	47d0      	blx	sl
 8007964:	3001      	adds	r0, #1
 8007966:	d0ab      	beq.n	80078c0 <_printf_i+0x164>
 8007968:	6823      	ldr	r3, [r4, #0]
 800796a:	079b      	lsls	r3, r3, #30
 800796c:	d413      	bmi.n	8007996 <_printf_i+0x23a>
 800796e:	68e0      	ldr	r0, [r4, #12]
 8007970:	9b03      	ldr	r3, [sp, #12]
 8007972:	4298      	cmp	r0, r3
 8007974:	bfb8      	it	lt
 8007976:	4618      	movlt	r0, r3
 8007978:	e7a4      	b.n	80078c4 <_printf_i+0x168>
 800797a:	2301      	movs	r3, #1
 800797c:	4632      	mov	r2, r6
 800797e:	4649      	mov	r1, r9
 8007980:	4640      	mov	r0, r8
 8007982:	47d0      	blx	sl
 8007984:	3001      	adds	r0, #1
 8007986:	d09b      	beq.n	80078c0 <_printf_i+0x164>
 8007988:	3501      	adds	r5, #1
 800798a:	68e3      	ldr	r3, [r4, #12]
 800798c:	9903      	ldr	r1, [sp, #12]
 800798e:	1a5b      	subs	r3, r3, r1
 8007990:	42ab      	cmp	r3, r5
 8007992:	dcf2      	bgt.n	800797a <_printf_i+0x21e>
 8007994:	e7eb      	b.n	800796e <_printf_i+0x212>
 8007996:	2500      	movs	r5, #0
 8007998:	f104 0619 	add.w	r6, r4, #25
 800799c:	e7f5      	b.n	800798a <_printf_i+0x22e>
 800799e:	bf00      	nop
 80079a0:	08009b4a 	.word	0x08009b4a
 80079a4:	08009b5b 	.word	0x08009b5b

080079a8 <iprintf>:
 80079a8:	b40f      	push	{r0, r1, r2, r3}
 80079aa:	4b0a      	ldr	r3, [pc, #40]	; (80079d4 <iprintf+0x2c>)
 80079ac:	b513      	push	{r0, r1, r4, lr}
 80079ae:	681c      	ldr	r4, [r3, #0]
 80079b0:	b124      	cbz	r4, 80079bc <iprintf+0x14>
 80079b2:	69a3      	ldr	r3, [r4, #24]
 80079b4:	b913      	cbnz	r3, 80079bc <iprintf+0x14>
 80079b6:	4620      	mov	r0, r4
 80079b8:	f000 fede 	bl	8008778 <__sinit>
 80079bc:	ab05      	add	r3, sp, #20
 80079be:	9a04      	ldr	r2, [sp, #16]
 80079c0:	68a1      	ldr	r1, [r4, #8]
 80079c2:	9301      	str	r3, [sp, #4]
 80079c4:	4620      	mov	r0, r4
 80079c6:	f001 fbf5 	bl	80091b4 <_vfiprintf_r>
 80079ca:	b002      	add	sp, #8
 80079cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079d0:	b004      	add	sp, #16
 80079d2:	4770      	bx	lr
 80079d4:	2000000c 	.word	0x2000000c

080079d8 <quorem>:
 80079d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079dc:	6903      	ldr	r3, [r0, #16]
 80079de:	690c      	ldr	r4, [r1, #16]
 80079e0:	42a3      	cmp	r3, r4
 80079e2:	4607      	mov	r7, r0
 80079e4:	f2c0 8081 	blt.w	8007aea <quorem+0x112>
 80079e8:	3c01      	subs	r4, #1
 80079ea:	f101 0814 	add.w	r8, r1, #20
 80079ee:	f100 0514 	add.w	r5, r0, #20
 80079f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a00:	3301      	adds	r3, #1
 8007a02:	429a      	cmp	r2, r3
 8007a04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a10:	d331      	bcc.n	8007a76 <quorem+0x9e>
 8007a12:	f04f 0e00 	mov.w	lr, #0
 8007a16:	4640      	mov	r0, r8
 8007a18:	46ac      	mov	ip, r5
 8007a1a:	46f2      	mov	sl, lr
 8007a1c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a20:	b293      	uxth	r3, r2
 8007a22:	fb06 e303 	mla	r3, r6, r3, lr
 8007a26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	ebaa 0303 	sub.w	r3, sl, r3
 8007a30:	0c12      	lsrs	r2, r2, #16
 8007a32:	f8dc a000 	ldr.w	sl, [ip]
 8007a36:	fb06 e202 	mla	r2, r6, r2, lr
 8007a3a:	fa13 f38a 	uxtah	r3, r3, sl
 8007a3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a42:	fa1f fa82 	uxth.w	sl, r2
 8007a46:	f8dc 2000 	ldr.w	r2, [ip]
 8007a4a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007a4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a58:	4581      	cmp	r9, r0
 8007a5a:	f84c 3b04 	str.w	r3, [ip], #4
 8007a5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a62:	d2db      	bcs.n	8007a1c <quorem+0x44>
 8007a64:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a68:	b92b      	cbnz	r3, 8007a76 <quorem+0x9e>
 8007a6a:	9b01      	ldr	r3, [sp, #4]
 8007a6c:	3b04      	subs	r3, #4
 8007a6e:	429d      	cmp	r5, r3
 8007a70:	461a      	mov	r2, r3
 8007a72:	d32e      	bcc.n	8007ad2 <quorem+0xfa>
 8007a74:	613c      	str	r4, [r7, #16]
 8007a76:	4638      	mov	r0, r7
 8007a78:	f001 f9b8 	bl	8008dec <__mcmp>
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	db24      	blt.n	8007aca <quorem+0xf2>
 8007a80:	3601      	adds	r6, #1
 8007a82:	4628      	mov	r0, r5
 8007a84:	f04f 0c00 	mov.w	ip, #0
 8007a88:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a8c:	f8d0 e000 	ldr.w	lr, [r0]
 8007a90:	b293      	uxth	r3, r2
 8007a92:	ebac 0303 	sub.w	r3, ip, r3
 8007a96:	0c12      	lsrs	r2, r2, #16
 8007a98:	fa13 f38e 	uxtah	r3, r3, lr
 8007a9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007aa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aaa:	45c1      	cmp	r9, r8
 8007aac:	f840 3b04 	str.w	r3, [r0], #4
 8007ab0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ab4:	d2e8      	bcs.n	8007a88 <quorem+0xb0>
 8007ab6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007aba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007abe:	b922      	cbnz	r2, 8007aca <quorem+0xf2>
 8007ac0:	3b04      	subs	r3, #4
 8007ac2:	429d      	cmp	r5, r3
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	d30a      	bcc.n	8007ade <quorem+0x106>
 8007ac8:	613c      	str	r4, [r7, #16]
 8007aca:	4630      	mov	r0, r6
 8007acc:	b003      	add	sp, #12
 8007ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad2:	6812      	ldr	r2, [r2, #0]
 8007ad4:	3b04      	subs	r3, #4
 8007ad6:	2a00      	cmp	r2, #0
 8007ad8:	d1cc      	bne.n	8007a74 <quorem+0x9c>
 8007ada:	3c01      	subs	r4, #1
 8007adc:	e7c7      	b.n	8007a6e <quorem+0x96>
 8007ade:	6812      	ldr	r2, [r2, #0]
 8007ae0:	3b04      	subs	r3, #4
 8007ae2:	2a00      	cmp	r2, #0
 8007ae4:	d1f0      	bne.n	8007ac8 <quorem+0xf0>
 8007ae6:	3c01      	subs	r4, #1
 8007ae8:	e7eb      	b.n	8007ac2 <quorem+0xea>
 8007aea:	2000      	movs	r0, #0
 8007aec:	e7ee      	b.n	8007acc <quorem+0xf4>
	...

08007af0 <_dtoa_r>:
 8007af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af4:	ed2d 8b02 	vpush	{d8}
 8007af8:	ec57 6b10 	vmov	r6, r7, d0
 8007afc:	b095      	sub	sp, #84	; 0x54
 8007afe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b04:	9105      	str	r1, [sp, #20]
 8007b06:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b10:	b975      	cbnz	r5, 8007b30 <_dtoa_r+0x40>
 8007b12:	2010      	movs	r0, #16
 8007b14:	f000 fed6 	bl	80088c4 <malloc>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	6260      	str	r0, [r4, #36]	; 0x24
 8007b1c:	b920      	cbnz	r0, 8007b28 <_dtoa_r+0x38>
 8007b1e:	4bb2      	ldr	r3, [pc, #712]	; (8007de8 <_dtoa_r+0x2f8>)
 8007b20:	21ea      	movs	r1, #234	; 0xea
 8007b22:	48b2      	ldr	r0, [pc, #712]	; (8007dec <_dtoa_r+0x2fc>)
 8007b24:	f001 fd9c 	bl	8009660 <__assert_func>
 8007b28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b2c:	6005      	str	r5, [r0, #0]
 8007b2e:	60c5      	str	r5, [r0, #12]
 8007b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b32:	6819      	ldr	r1, [r3, #0]
 8007b34:	b151      	cbz	r1, 8007b4c <_dtoa_r+0x5c>
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	604a      	str	r2, [r1, #4]
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	4093      	lsls	r3, r2
 8007b3e:	608b      	str	r3, [r1, #8]
 8007b40:	4620      	mov	r0, r4
 8007b42:	f000 ff15 	bl	8008970 <_Bfree>
 8007b46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b48:	2200      	movs	r2, #0
 8007b4a:	601a      	str	r2, [r3, #0]
 8007b4c:	1e3b      	subs	r3, r7, #0
 8007b4e:	bfb9      	ittee	lt
 8007b50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b54:	9303      	strlt	r3, [sp, #12]
 8007b56:	2300      	movge	r3, #0
 8007b58:	f8c8 3000 	strge.w	r3, [r8]
 8007b5c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007b60:	4ba3      	ldr	r3, [pc, #652]	; (8007df0 <_dtoa_r+0x300>)
 8007b62:	bfbc      	itt	lt
 8007b64:	2201      	movlt	r2, #1
 8007b66:	f8c8 2000 	strlt.w	r2, [r8]
 8007b6a:	ea33 0309 	bics.w	r3, r3, r9
 8007b6e:	d11b      	bne.n	8007ba8 <_dtoa_r+0xb8>
 8007b70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b72:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b76:	6013      	str	r3, [r2, #0]
 8007b78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b7c:	4333      	orrs	r3, r6
 8007b7e:	f000 857a 	beq.w	8008676 <_dtoa_r+0xb86>
 8007b82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b84:	b963      	cbnz	r3, 8007ba0 <_dtoa_r+0xb0>
 8007b86:	4b9b      	ldr	r3, [pc, #620]	; (8007df4 <_dtoa_r+0x304>)
 8007b88:	e024      	b.n	8007bd4 <_dtoa_r+0xe4>
 8007b8a:	4b9b      	ldr	r3, [pc, #620]	; (8007df8 <_dtoa_r+0x308>)
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	3308      	adds	r3, #8
 8007b90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b92:	6013      	str	r3, [r2, #0]
 8007b94:	9800      	ldr	r0, [sp, #0]
 8007b96:	b015      	add	sp, #84	; 0x54
 8007b98:	ecbd 8b02 	vpop	{d8}
 8007b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba0:	4b94      	ldr	r3, [pc, #592]	; (8007df4 <_dtoa_r+0x304>)
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	3303      	adds	r3, #3
 8007ba6:	e7f3      	b.n	8007b90 <_dtoa_r+0xa0>
 8007ba8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bac:	2200      	movs	r2, #0
 8007bae:	ec51 0b17 	vmov	r0, r1, d7
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007bb8:	f7f8 ff86 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bbc:	4680      	mov	r8, r0
 8007bbe:	b158      	cbz	r0, 8007bd8 <_dtoa_r+0xe8>
 8007bc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	6013      	str	r3, [r2, #0]
 8007bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 8551 	beq.w	8008670 <_dtoa_r+0xb80>
 8007bce:	488b      	ldr	r0, [pc, #556]	; (8007dfc <_dtoa_r+0x30c>)
 8007bd0:	6018      	str	r0, [r3, #0]
 8007bd2:	1e43      	subs	r3, r0, #1
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	e7dd      	b.n	8007b94 <_dtoa_r+0xa4>
 8007bd8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007bdc:	aa12      	add	r2, sp, #72	; 0x48
 8007bde:	a913      	add	r1, sp, #76	; 0x4c
 8007be0:	4620      	mov	r0, r4
 8007be2:	f001 f9a7 	bl	8008f34 <__d2b>
 8007be6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007bea:	4683      	mov	fp, r0
 8007bec:	2d00      	cmp	r5, #0
 8007bee:	d07c      	beq.n	8007cea <_dtoa_r+0x1fa>
 8007bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bf2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007bf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bfa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007bfe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007c02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007c06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c0a:	4b7d      	ldr	r3, [pc, #500]	; (8007e00 <_dtoa_r+0x310>)
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	4630      	mov	r0, r6
 8007c10:	4639      	mov	r1, r7
 8007c12:	f7f8 fb39 	bl	8000288 <__aeabi_dsub>
 8007c16:	a36e      	add	r3, pc, #440	; (adr r3, 8007dd0 <_dtoa_r+0x2e0>)
 8007c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1c:	f7f8 fcec 	bl	80005f8 <__aeabi_dmul>
 8007c20:	a36d      	add	r3, pc, #436	; (adr r3, 8007dd8 <_dtoa_r+0x2e8>)
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	f7f8 fb31 	bl	800028c <__adddf3>
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	460f      	mov	r7, r1
 8007c30:	f7f8 fc78 	bl	8000524 <__aeabi_i2d>
 8007c34:	a36a      	add	r3, pc, #424	; (adr r3, 8007de0 <_dtoa_r+0x2f0>)
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	f7f8 fcdd 	bl	80005f8 <__aeabi_dmul>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	460b      	mov	r3, r1
 8007c42:	4630      	mov	r0, r6
 8007c44:	4639      	mov	r1, r7
 8007c46:	f7f8 fb21 	bl	800028c <__adddf3>
 8007c4a:	4606      	mov	r6, r0
 8007c4c:	460f      	mov	r7, r1
 8007c4e:	f7f8 ff83 	bl	8000b58 <__aeabi_d2iz>
 8007c52:	2200      	movs	r2, #0
 8007c54:	4682      	mov	sl, r0
 8007c56:	2300      	movs	r3, #0
 8007c58:	4630      	mov	r0, r6
 8007c5a:	4639      	mov	r1, r7
 8007c5c:	f7f8 ff3e 	bl	8000adc <__aeabi_dcmplt>
 8007c60:	b148      	cbz	r0, 8007c76 <_dtoa_r+0x186>
 8007c62:	4650      	mov	r0, sl
 8007c64:	f7f8 fc5e 	bl	8000524 <__aeabi_i2d>
 8007c68:	4632      	mov	r2, r6
 8007c6a:	463b      	mov	r3, r7
 8007c6c:	f7f8 ff2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c70:	b908      	cbnz	r0, 8007c76 <_dtoa_r+0x186>
 8007c72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007c76:	f1ba 0f16 	cmp.w	sl, #22
 8007c7a:	d854      	bhi.n	8007d26 <_dtoa_r+0x236>
 8007c7c:	4b61      	ldr	r3, [pc, #388]	; (8007e04 <_dtoa_r+0x314>)
 8007c7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c8a:	f7f8 ff27 	bl	8000adc <__aeabi_dcmplt>
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	d04b      	beq.n	8007d2a <_dtoa_r+0x23a>
 8007c92:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007c96:	2300      	movs	r3, #0
 8007c98:	930e      	str	r3, [sp, #56]	; 0x38
 8007c9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c9c:	1b5d      	subs	r5, r3, r5
 8007c9e:	1e6b      	subs	r3, r5, #1
 8007ca0:	9304      	str	r3, [sp, #16]
 8007ca2:	bf43      	ittte	mi
 8007ca4:	2300      	movmi	r3, #0
 8007ca6:	f1c5 0801 	rsbmi	r8, r5, #1
 8007caa:	9304      	strmi	r3, [sp, #16]
 8007cac:	f04f 0800 	movpl.w	r8, #0
 8007cb0:	f1ba 0f00 	cmp.w	sl, #0
 8007cb4:	db3b      	blt.n	8007d2e <_dtoa_r+0x23e>
 8007cb6:	9b04      	ldr	r3, [sp, #16]
 8007cb8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007cbc:	4453      	add	r3, sl
 8007cbe:	9304      	str	r3, [sp, #16]
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	9306      	str	r3, [sp, #24]
 8007cc4:	9b05      	ldr	r3, [sp, #20]
 8007cc6:	2b09      	cmp	r3, #9
 8007cc8:	d869      	bhi.n	8007d9e <_dtoa_r+0x2ae>
 8007cca:	2b05      	cmp	r3, #5
 8007ccc:	bfc4      	itt	gt
 8007cce:	3b04      	subgt	r3, #4
 8007cd0:	9305      	strgt	r3, [sp, #20]
 8007cd2:	9b05      	ldr	r3, [sp, #20]
 8007cd4:	f1a3 0302 	sub.w	r3, r3, #2
 8007cd8:	bfcc      	ite	gt
 8007cda:	2500      	movgt	r5, #0
 8007cdc:	2501      	movle	r5, #1
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d869      	bhi.n	8007db6 <_dtoa_r+0x2c6>
 8007ce2:	e8df f003 	tbb	[pc, r3]
 8007ce6:	4e2c      	.short	0x4e2c
 8007ce8:	5a4c      	.short	0x5a4c
 8007cea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007cee:	441d      	add	r5, r3
 8007cf0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007cf4:	2b20      	cmp	r3, #32
 8007cf6:	bfc1      	itttt	gt
 8007cf8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007cfc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007d00:	fa09 f303 	lslgt.w	r3, r9, r3
 8007d04:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007d08:	bfda      	itte	le
 8007d0a:	f1c3 0320 	rsble	r3, r3, #32
 8007d0e:	fa06 f003 	lslle.w	r0, r6, r3
 8007d12:	4318      	orrgt	r0, r3
 8007d14:	f7f8 fbf6 	bl	8000504 <__aeabi_ui2d>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d20:	3d01      	subs	r5, #1
 8007d22:	9310      	str	r3, [sp, #64]	; 0x40
 8007d24:	e771      	b.n	8007c0a <_dtoa_r+0x11a>
 8007d26:	2301      	movs	r3, #1
 8007d28:	e7b6      	b.n	8007c98 <_dtoa_r+0x1a8>
 8007d2a:	900e      	str	r0, [sp, #56]	; 0x38
 8007d2c:	e7b5      	b.n	8007c9a <_dtoa_r+0x1aa>
 8007d2e:	f1ca 0300 	rsb	r3, sl, #0
 8007d32:	9306      	str	r3, [sp, #24]
 8007d34:	2300      	movs	r3, #0
 8007d36:	eba8 080a 	sub.w	r8, r8, sl
 8007d3a:	930d      	str	r3, [sp, #52]	; 0x34
 8007d3c:	e7c2      	b.n	8007cc4 <_dtoa_r+0x1d4>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	9308      	str	r3, [sp, #32]
 8007d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	dc39      	bgt.n	8007dbc <_dtoa_r+0x2cc>
 8007d48:	f04f 0901 	mov.w	r9, #1
 8007d4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d50:	464b      	mov	r3, r9
 8007d52:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007d56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007d58:	2200      	movs	r2, #0
 8007d5a:	6042      	str	r2, [r0, #4]
 8007d5c:	2204      	movs	r2, #4
 8007d5e:	f102 0614 	add.w	r6, r2, #20
 8007d62:	429e      	cmp	r6, r3
 8007d64:	6841      	ldr	r1, [r0, #4]
 8007d66:	d92f      	bls.n	8007dc8 <_dtoa_r+0x2d8>
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f000 fdc1 	bl	80088f0 <_Balloc>
 8007d6e:	9000      	str	r0, [sp, #0]
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d14b      	bne.n	8007e0c <_dtoa_r+0x31c>
 8007d74:	4b24      	ldr	r3, [pc, #144]	; (8007e08 <_dtoa_r+0x318>)
 8007d76:	4602      	mov	r2, r0
 8007d78:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d7c:	e6d1      	b.n	8007b22 <_dtoa_r+0x32>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e7de      	b.n	8007d40 <_dtoa_r+0x250>
 8007d82:	2300      	movs	r3, #0
 8007d84:	9308      	str	r3, [sp, #32]
 8007d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d88:	eb0a 0903 	add.w	r9, sl, r3
 8007d8c:	f109 0301 	add.w	r3, r9, #1
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	9301      	str	r3, [sp, #4]
 8007d94:	bfb8      	it	lt
 8007d96:	2301      	movlt	r3, #1
 8007d98:	e7dd      	b.n	8007d56 <_dtoa_r+0x266>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e7f2      	b.n	8007d84 <_dtoa_r+0x294>
 8007d9e:	2501      	movs	r5, #1
 8007da0:	2300      	movs	r3, #0
 8007da2:	9305      	str	r3, [sp, #20]
 8007da4:	9508      	str	r5, [sp, #32]
 8007da6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007daa:	2200      	movs	r2, #0
 8007dac:	f8cd 9004 	str.w	r9, [sp, #4]
 8007db0:	2312      	movs	r3, #18
 8007db2:	9209      	str	r2, [sp, #36]	; 0x24
 8007db4:	e7cf      	b.n	8007d56 <_dtoa_r+0x266>
 8007db6:	2301      	movs	r3, #1
 8007db8:	9308      	str	r3, [sp, #32]
 8007dba:	e7f4      	b.n	8007da6 <_dtoa_r+0x2b6>
 8007dbc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007dc0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007dc4:	464b      	mov	r3, r9
 8007dc6:	e7c6      	b.n	8007d56 <_dtoa_r+0x266>
 8007dc8:	3101      	adds	r1, #1
 8007dca:	6041      	str	r1, [r0, #4]
 8007dcc:	0052      	lsls	r2, r2, #1
 8007dce:	e7c6      	b.n	8007d5e <_dtoa_r+0x26e>
 8007dd0:	636f4361 	.word	0x636f4361
 8007dd4:	3fd287a7 	.word	0x3fd287a7
 8007dd8:	8b60c8b3 	.word	0x8b60c8b3
 8007ddc:	3fc68a28 	.word	0x3fc68a28
 8007de0:	509f79fb 	.word	0x509f79fb
 8007de4:	3fd34413 	.word	0x3fd34413
 8007de8:	08009b79 	.word	0x08009b79
 8007dec:	08009b90 	.word	0x08009b90
 8007df0:	7ff00000 	.word	0x7ff00000
 8007df4:	08009b75 	.word	0x08009b75
 8007df8:	08009b6c 	.word	0x08009b6c
 8007dfc:	08009b49 	.word	0x08009b49
 8007e00:	3ff80000 	.word	0x3ff80000
 8007e04:	08009ce8 	.word	0x08009ce8
 8007e08:	08009bef 	.word	0x08009bef
 8007e0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e0e:	9a00      	ldr	r2, [sp, #0]
 8007e10:	601a      	str	r2, [r3, #0]
 8007e12:	9b01      	ldr	r3, [sp, #4]
 8007e14:	2b0e      	cmp	r3, #14
 8007e16:	f200 80ad 	bhi.w	8007f74 <_dtoa_r+0x484>
 8007e1a:	2d00      	cmp	r5, #0
 8007e1c:	f000 80aa 	beq.w	8007f74 <_dtoa_r+0x484>
 8007e20:	f1ba 0f00 	cmp.w	sl, #0
 8007e24:	dd36      	ble.n	8007e94 <_dtoa_r+0x3a4>
 8007e26:	4ac3      	ldr	r2, [pc, #780]	; (8008134 <_dtoa_r+0x644>)
 8007e28:	f00a 030f 	and.w	r3, sl, #15
 8007e2c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e30:	ed93 7b00 	vldr	d7, [r3]
 8007e34:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007e38:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007e3c:	eeb0 8a47 	vmov.f32	s16, s14
 8007e40:	eef0 8a67 	vmov.f32	s17, s15
 8007e44:	d016      	beq.n	8007e74 <_dtoa_r+0x384>
 8007e46:	4bbc      	ldr	r3, [pc, #752]	; (8008138 <_dtoa_r+0x648>)
 8007e48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e50:	f7f8 fcfc 	bl	800084c <__aeabi_ddiv>
 8007e54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e58:	f007 070f 	and.w	r7, r7, #15
 8007e5c:	2503      	movs	r5, #3
 8007e5e:	4eb6      	ldr	r6, [pc, #728]	; (8008138 <_dtoa_r+0x648>)
 8007e60:	b957      	cbnz	r7, 8007e78 <_dtoa_r+0x388>
 8007e62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e66:	ec53 2b18 	vmov	r2, r3, d8
 8007e6a:	f7f8 fcef 	bl	800084c <__aeabi_ddiv>
 8007e6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e72:	e029      	b.n	8007ec8 <_dtoa_r+0x3d8>
 8007e74:	2502      	movs	r5, #2
 8007e76:	e7f2      	b.n	8007e5e <_dtoa_r+0x36e>
 8007e78:	07f9      	lsls	r1, r7, #31
 8007e7a:	d508      	bpl.n	8007e8e <_dtoa_r+0x39e>
 8007e7c:	ec51 0b18 	vmov	r0, r1, d8
 8007e80:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e84:	f7f8 fbb8 	bl	80005f8 <__aeabi_dmul>
 8007e88:	ec41 0b18 	vmov	d8, r0, r1
 8007e8c:	3501      	adds	r5, #1
 8007e8e:	107f      	asrs	r7, r7, #1
 8007e90:	3608      	adds	r6, #8
 8007e92:	e7e5      	b.n	8007e60 <_dtoa_r+0x370>
 8007e94:	f000 80a6 	beq.w	8007fe4 <_dtoa_r+0x4f4>
 8007e98:	f1ca 0600 	rsb	r6, sl, #0
 8007e9c:	4ba5      	ldr	r3, [pc, #660]	; (8008134 <_dtoa_r+0x644>)
 8007e9e:	4fa6      	ldr	r7, [pc, #664]	; (8008138 <_dtoa_r+0x648>)
 8007ea0:	f006 020f 	and.w	r2, r6, #15
 8007ea4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007eb0:	f7f8 fba2 	bl	80005f8 <__aeabi_dmul>
 8007eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eb8:	1136      	asrs	r6, r6, #4
 8007eba:	2300      	movs	r3, #0
 8007ebc:	2502      	movs	r5, #2
 8007ebe:	2e00      	cmp	r6, #0
 8007ec0:	f040 8085 	bne.w	8007fce <_dtoa_r+0x4de>
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1d2      	bne.n	8007e6e <_dtoa_r+0x37e>
 8007ec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 808c 	beq.w	8007fe8 <_dtoa_r+0x4f8>
 8007ed0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ed4:	4b99      	ldr	r3, [pc, #612]	; (800813c <_dtoa_r+0x64c>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	4630      	mov	r0, r6
 8007eda:	4639      	mov	r1, r7
 8007edc:	f7f8 fdfe 	bl	8000adc <__aeabi_dcmplt>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	f000 8081 	beq.w	8007fe8 <_dtoa_r+0x4f8>
 8007ee6:	9b01      	ldr	r3, [sp, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d07d      	beq.n	8007fe8 <_dtoa_r+0x4f8>
 8007eec:	f1b9 0f00 	cmp.w	r9, #0
 8007ef0:	dd3c      	ble.n	8007f6c <_dtoa_r+0x47c>
 8007ef2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007ef6:	9307      	str	r3, [sp, #28]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	4b91      	ldr	r3, [pc, #580]	; (8008140 <_dtoa_r+0x650>)
 8007efc:	4630      	mov	r0, r6
 8007efe:	4639      	mov	r1, r7
 8007f00:	f7f8 fb7a 	bl	80005f8 <__aeabi_dmul>
 8007f04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f08:	3501      	adds	r5, #1
 8007f0a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007f0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007f12:	4628      	mov	r0, r5
 8007f14:	f7f8 fb06 	bl	8000524 <__aeabi_i2d>
 8007f18:	4632      	mov	r2, r6
 8007f1a:	463b      	mov	r3, r7
 8007f1c:	f7f8 fb6c 	bl	80005f8 <__aeabi_dmul>
 8007f20:	4b88      	ldr	r3, [pc, #544]	; (8008144 <_dtoa_r+0x654>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	f7f8 f9b2 	bl	800028c <__adddf3>
 8007f28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007f2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f30:	9303      	str	r3, [sp, #12]
 8007f32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d15c      	bne.n	8007ff2 <_dtoa_r+0x502>
 8007f38:	4b83      	ldr	r3, [pc, #524]	; (8008148 <_dtoa_r+0x658>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	4639      	mov	r1, r7
 8007f40:	f7f8 f9a2 	bl	8000288 <__aeabi_dsub>
 8007f44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f48:	4606      	mov	r6, r0
 8007f4a:	460f      	mov	r7, r1
 8007f4c:	f7f8 fde4 	bl	8000b18 <__aeabi_dcmpgt>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	f040 8296 	bne.w	8008482 <_dtoa_r+0x992>
 8007f56:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f60:	4639      	mov	r1, r7
 8007f62:	f7f8 fdbb 	bl	8000adc <__aeabi_dcmplt>
 8007f66:	2800      	cmp	r0, #0
 8007f68:	f040 8288 	bne.w	800847c <_dtoa_r+0x98c>
 8007f6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f2c0 8158 	blt.w	800822c <_dtoa_r+0x73c>
 8007f7c:	f1ba 0f0e 	cmp.w	sl, #14
 8007f80:	f300 8154 	bgt.w	800822c <_dtoa_r+0x73c>
 8007f84:	4b6b      	ldr	r3, [pc, #428]	; (8008134 <_dtoa_r+0x644>)
 8007f86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007f8a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f280 80e3 	bge.w	800815c <_dtoa_r+0x66c>
 8007f96:	9b01      	ldr	r3, [sp, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f300 80df 	bgt.w	800815c <_dtoa_r+0x66c>
 8007f9e:	f040 826d 	bne.w	800847c <_dtoa_r+0x98c>
 8007fa2:	4b69      	ldr	r3, [pc, #420]	; (8008148 <_dtoa_r+0x658>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	4640      	mov	r0, r8
 8007fa8:	4649      	mov	r1, r9
 8007faa:	f7f8 fb25 	bl	80005f8 <__aeabi_dmul>
 8007fae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fb2:	f7f8 fda7 	bl	8000b04 <__aeabi_dcmpge>
 8007fb6:	9e01      	ldr	r6, [sp, #4]
 8007fb8:	4637      	mov	r7, r6
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	f040 8243 	bne.w	8008446 <_dtoa_r+0x956>
 8007fc0:	9d00      	ldr	r5, [sp, #0]
 8007fc2:	2331      	movs	r3, #49	; 0x31
 8007fc4:	f805 3b01 	strb.w	r3, [r5], #1
 8007fc8:	f10a 0a01 	add.w	sl, sl, #1
 8007fcc:	e23f      	b.n	800844e <_dtoa_r+0x95e>
 8007fce:	07f2      	lsls	r2, r6, #31
 8007fd0:	d505      	bpl.n	8007fde <_dtoa_r+0x4ee>
 8007fd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fd6:	f7f8 fb0f 	bl	80005f8 <__aeabi_dmul>
 8007fda:	3501      	adds	r5, #1
 8007fdc:	2301      	movs	r3, #1
 8007fde:	1076      	asrs	r6, r6, #1
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	e76c      	b.n	8007ebe <_dtoa_r+0x3ce>
 8007fe4:	2502      	movs	r5, #2
 8007fe6:	e76f      	b.n	8007ec8 <_dtoa_r+0x3d8>
 8007fe8:	9b01      	ldr	r3, [sp, #4]
 8007fea:	f8cd a01c 	str.w	sl, [sp, #28]
 8007fee:	930c      	str	r3, [sp, #48]	; 0x30
 8007ff0:	e78d      	b.n	8007f0e <_dtoa_r+0x41e>
 8007ff2:	9900      	ldr	r1, [sp, #0]
 8007ff4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007ff6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ff8:	4b4e      	ldr	r3, [pc, #312]	; (8008134 <_dtoa_r+0x644>)
 8007ffa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ffe:	4401      	add	r1, r0
 8008000:	9102      	str	r1, [sp, #8]
 8008002:	9908      	ldr	r1, [sp, #32]
 8008004:	eeb0 8a47 	vmov.f32	s16, s14
 8008008:	eef0 8a67 	vmov.f32	s17, s15
 800800c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008010:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008014:	2900      	cmp	r1, #0
 8008016:	d045      	beq.n	80080a4 <_dtoa_r+0x5b4>
 8008018:	494c      	ldr	r1, [pc, #304]	; (800814c <_dtoa_r+0x65c>)
 800801a:	2000      	movs	r0, #0
 800801c:	f7f8 fc16 	bl	800084c <__aeabi_ddiv>
 8008020:	ec53 2b18 	vmov	r2, r3, d8
 8008024:	f7f8 f930 	bl	8000288 <__aeabi_dsub>
 8008028:	9d00      	ldr	r5, [sp, #0]
 800802a:	ec41 0b18 	vmov	d8, r0, r1
 800802e:	4639      	mov	r1, r7
 8008030:	4630      	mov	r0, r6
 8008032:	f7f8 fd91 	bl	8000b58 <__aeabi_d2iz>
 8008036:	900c      	str	r0, [sp, #48]	; 0x30
 8008038:	f7f8 fa74 	bl	8000524 <__aeabi_i2d>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4630      	mov	r0, r6
 8008042:	4639      	mov	r1, r7
 8008044:	f7f8 f920 	bl	8000288 <__aeabi_dsub>
 8008048:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800804a:	3330      	adds	r3, #48	; 0x30
 800804c:	f805 3b01 	strb.w	r3, [r5], #1
 8008050:	ec53 2b18 	vmov	r2, r3, d8
 8008054:	4606      	mov	r6, r0
 8008056:	460f      	mov	r7, r1
 8008058:	f7f8 fd40 	bl	8000adc <__aeabi_dcmplt>
 800805c:	2800      	cmp	r0, #0
 800805e:	d165      	bne.n	800812c <_dtoa_r+0x63c>
 8008060:	4632      	mov	r2, r6
 8008062:	463b      	mov	r3, r7
 8008064:	4935      	ldr	r1, [pc, #212]	; (800813c <_dtoa_r+0x64c>)
 8008066:	2000      	movs	r0, #0
 8008068:	f7f8 f90e 	bl	8000288 <__aeabi_dsub>
 800806c:	ec53 2b18 	vmov	r2, r3, d8
 8008070:	f7f8 fd34 	bl	8000adc <__aeabi_dcmplt>
 8008074:	2800      	cmp	r0, #0
 8008076:	f040 80b9 	bne.w	80081ec <_dtoa_r+0x6fc>
 800807a:	9b02      	ldr	r3, [sp, #8]
 800807c:	429d      	cmp	r5, r3
 800807e:	f43f af75 	beq.w	8007f6c <_dtoa_r+0x47c>
 8008082:	4b2f      	ldr	r3, [pc, #188]	; (8008140 <_dtoa_r+0x650>)
 8008084:	ec51 0b18 	vmov	r0, r1, d8
 8008088:	2200      	movs	r2, #0
 800808a:	f7f8 fab5 	bl	80005f8 <__aeabi_dmul>
 800808e:	4b2c      	ldr	r3, [pc, #176]	; (8008140 <_dtoa_r+0x650>)
 8008090:	ec41 0b18 	vmov	d8, r0, r1
 8008094:	2200      	movs	r2, #0
 8008096:	4630      	mov	r0, r6
 8008098:	4639      	mov	r1, r7
 800809a:	f7f8 faad 	bl	80005f8 <__aeabi_dmul>
 800809e:	4606      	mov	r6, r0
 80080a0:	460f      	mov	r7, r1
 80080a2:	e7c4      	b.n	800802e <_dtoa_r+0x53e>
 80080a4:	ec51 0b17 	vmov	r0, r1, d7
 80080a8:	f7f8 faa6 	bl	80005f8 <__aeabi_dmul>
 80080ac:	9b02      	ldr	r3, [sp, #8]
 80080ae:	9d00      	ldr	r5, [sp, #0]
 80080b0:	930c      	str	r3, [sp, #48]	; 0x30
 80080b2:	ec41 0b18 	vmov	d8, r0, r1
 80080b6:	4639      	mov	r1, r7
 80080b8:	4630      	mov	r0, r6
 80080ba:	f7f8 fd4d 	bl	8000b58 <__aeabi_d2iz>
 80080be:	9011      	str	r0, [sp, #68]	; 0x44
 80080c0:	f7f8 fa30 	bl	8000524 <__aeabi_i2d>
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	4630      	mov	r0, r6
 80080ca:	4639      	mov	r1, r7
 80080cc:	f7f8 f8dc 	bl	8000288 <__aeabi_dsub>
 80080d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080d2:	3330      	adds	r3, #48	; 0x30
 80080d4:	f805 3b01 	strb.w	r3, [r5], #1
 80080d8:	9b02      	ldr	r3, [sp, #8]
 80080da:	429d      	cmp	r5, r3
 80080dc:	4606      	mov	r6, r0
 80080de:	460f      	mov	r7, r1
 80080e0:	f04f 0200 	mov.w	r2, #0
 80080e4:	d134      	bne.n	8008150 <_dtoa_r+0x660>
 80080e6:	4b19      	ldr	r3, [pc, #100]	; (800814c <_dtoa_r+0x65c>)
 80080e8:	ec51 0b18 	vmov	r0, r1, d8
 80080ec:	f7f8 f8ce 	bl	800028c <__adddf3>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	4630      	mov	r0, r6
 80080f6:	4639      	mov	r1, r7
 80080f8:	f7f8 fd0e 	bl	8000b18 <__aeabi_dcmpgt>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	d175      	bne.n	80081ec <_dtoa_r+0x6fc>
 8008100:	ec53 2b18 	vmov	r2, r3, d8
 8008104:	4911      	ldr	r1, [pc, #68]	; (800814c <_dtoa_r+0x65c>)
 8008106:	2000      	movs	r0, #0
 8008108:	f7f8 f8be 	bl	8000288 <__aeabi_dsub>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	4630      	mov	r0, r6
 8008112:	4639      	mov	r1, r7
 8008114:	f7f8 fce2 	bl	8000adc <__aeabi_dcmplt>
 8008118:	2800      	cmp	r0, #0
 800811a:	f43f af27 	beq.w	8007f6c <_dtoa_r+0x47c>
 800811e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008120:	1e6b      	subs	r3, r5, #1
 8008122:	930c      	str	r3, [sp, #48]	; 0x30
 8008124:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008128:	2b30      	cmp	r3, #48	; 0x30
 800812a:	d0f8      	beq.n	800811e <_dtoa_r+0x62e>
 800812c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008130:	e04a      	b.n	80081c8 <_dtoa_r+0x6d8>
 8008132:	bf00      	nop
 8008134:	08009ce8 	.word	0x08009ce8
 8008138:	08009cc0 	.word	0x08009cc0
 800813c:	3ff00000 	.word	0x3ff00000
 8008140:	40240000 	.word	0x40240000
 8008144:	401c0000 	.word	0x401c0000
 8008148:	40140000 	.word	0x40140000
 800814c:	3fe00000 	.word	0x3fe00000
 8008150:	4baf      	ldr	r3, [pc, #700]	; (8008410 <_dtoa_r+0x920>)
 8008152:	f7f8 fa51 	bl	80005f8 <__aeabi_dmul>
 8008156:	4606      	mov	r6, r0
 8008158:	460f      	mov	r7, r1
 800815a:	e7ac      	b.n	80080b6 <_dtoa_r+0x5c6>
 800815c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008160:	9d00      	ldr	r5, [sp, #0]
 8008162:	4642      	mov	r2, r8
 8008164:	464b      	mov	r3, r9
 8008166:	4630      	mov	r0, r6
 8008168:	4639      	mov	r1, r7
 800816a:	f7f8 fb6f 	bl	800084c <__aeabi_ddiv>
 800816e:	f7f8 fcf3 	bl	8000b58 <__aeabi_d2iz>
 8008172:	9002      	str	r0, [sp, #8]
 8008174:	f7f8 f9d6 	bl	8000524 <__aeabi_i2d>
 8008178:	4642      	mov	r2, r8
 800817a:	464b      	mov	r3, r9
 800817c:	f7f8 fa3c 	bl	80005f8 <__aeabi_dmul>
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
 8008184:	4630      	mov	r0, r6
 8008186:	4639      	mov	r1, r7
 8008188:	f7f8 f87e 	bl	8000288 <__aeabi_dsub>
 800818c:	9e02      	ldr	r6, [sp, #8]
 800818e:	9f01      	ldr	r7, [sp, #4]
 8008190:	3630      	adds	r6, #48	; 0x30
 8008192:	f805 6b01 	strb.w	r6, [r5], #1
 8008196:	9e00      	ldr	r6, [sp, #0]
 8008198:	1bae      	subs	r6, r5, r6
 800819a:	42b7      	cmp	r7, r6
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	d137      	bne.n	8008212 <_dtoa_r+0x722>
 80081a2:	f7f8 f873 	bl	800028c <__adddf3>
 80081a6:	4642      	mov	r2, r8
 80081a8:	464b      	mov	r3, r9
 80081aa:	4606      	mov	r6, r0
 80081ac:	460f      	mov	r7, r1
 80081ae:	f7f8 fcb3 	bl	8000b18 <__aeabi_dcmpgt>
 80081b2:	b9c8      	cbnz	r0, 80081e8 <_dtoa_r+0x6f8>
 80081b4:	4642      	mov	r2, r8
 80081b6:	464b      	mov	r3, r9
 80081b8:	4630      	mov	r0, r6
 80081ba:	4639      	mov	r1, r7
 80081bc:	f7f8 fc84 	bl	8000ac8 <__aeabi_dcmpeq>
 80081c0:	b110      	cbz	r0, 80081c8 <_dtoa_r+0x6d8>
 80081c2:	9b02      	ldr	r3, [sp, #8]
 80081c4:	07d9      	lsls	r1, r3, #31
 80081c6:	d40f      	bmi.n	80081e8 <_dtoa_r+0x6f8>
 80081c8:	4620      	mov	r0, r4
 80081ca:	4659      	mov	r1, fp
 80081cc:	f000 fbd0 	bl	8008970 <_Bfree>
 80081d0:	2300      	movs	r3, #0
 80081d2:	702b      	strb	r3, [r5, #0]
 80081d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081d6:	f10a 0001 	add.w	r0, sl, #1
 80081da:	6018      	str	r0, [r3, #0]
 80081dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f43f acd8 	beq.w	8007b94 <_dtoa_r+0xa4>
 80081e4:	601d      	str	r5, [r3, #0]
 80081e6:	e4d5      	b.n	8007b94 <_dtoa_r+0xa4>
 80081e8:	f8cd a01c 	str.w	sl, [sp, #28]
 80081ec:	462b      	mov	r3, r5
 80081ee:	461d      	mov	r5, r3
 80081f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081f4:	2a39      	cmp	r2, #57	; 0x39
 80081f6:	d108      	bne.n	800820a <_dtoa_r+0x71a>
 80081f8:	9a00      	ldr	r2, [sp, #0]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d1f7      	bne.n	80081ee <_dtoa_r+0x6fe>
 80081fe:	9a07      	ldr	r2, [sp, #28]
 8008200:	9900      	ldr	r1, [sp, #0]
 8008202:	3201      	adds	r2, #1
 8008204:	9207      	str	r2, [sp, #28]
 8008206:	2230      	movs	r2, #48	; 0x30
 8008208:	700a      	strb	r2, [r1, #0]
 800820a:	781a      	ldrb	r2, [r3, #0]
 800820c:	3201      	adds	r2, #1
 800820e:	701a      	strb	r2, [r3, #0]
 8008210:	e78c      	b.n	800812c <_dtoa_r+0x63c>
 8008212:	4b7f      	ldr	r3, [pc, #508]	; (8008410 <_dtoa_r+0x920>)
 8008214:	2200      	movs	r2, #0
 8008216:	f7f8 f9ef 	bl	80005f8 <__aeabi_dmul>
 800821a:	2200      	movs	r2, #0
 800821c:	2300      	movs	r3, #0
 800821e:	4606      	mov	r6, r0
 8008220:	460f      	mov	r7, r1
 8008222:	f7f8 fc51 	bl	8000ac8 <__aeabi_dcmpeq>
 8008226:	2800      	cmp	r0, #0
 8008228:	d09b      	beq.n	8008162 <_dtoa_r+0x672>
 800822a:	e7cd      	b.n	80081c8 <_dtoa_r+0x6d8>
 800822c:	9a08      	ldr	r2, [sp, #32]
 800822e:	2a00      	cmp	r2, #0
 8008230:	f000 80c4 	beq.w	80083bc <_dtoa_r+0x8cc>
 8008234:	9a05      	ldr	r2, [sp, #20]
 8008236:	2a01      	cmp	r2, #1
 8008238:	f300 80a8 	bgt.w	800838c <_dtoa_r+0x89c>
 800823c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800823e:	2a00      	cmp	r2, #0
 8008240:	f000 80a0 	beq.w	8008384 <_dtoa_r+0x894>
 8008244:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008248:	9e06      	ldr	r6, [sp, #24]
 800824a:	4645      	mov	r5, r8
 800824c:	9a04      	ldr	r2, [sp, #16]
 800824e:	2101      	movs	r1, #1
 8008250:	441a      	add	r2, r3
 8008252:	4620      	mov	r0, r4
 8008254:	4498      	add	r8, r3
 8008256:	9204      	str	r2, [sp, #16]
 8008258:	f000 fc46 	bl	8008ae8 <__i2b>
 800825c:	4607      	mov	r7, r0
 800825e:	2d00      	cmp	r5, #0
 8008260:	dd0b      	ble.n	800827a <_dtoa_r+0x78a>
 8008262:	9b04      	ldr	r3, [sp, #16]
 8008264:	2b00      	cmp	r3, #0
 8008266:	dd08      	ble.n	800827a <_dtoa_r+0x78a>
 8008268:	42ab      	cmp	r3, r5
 800826a:	9a04      	ldr	r2, [sp, #16]
 800826c:	bfa8      	it	ge
 800826e:	462b      	movge	r3, r5
 8008270:	eba8 0803 	sub.w	r8, r8, r3
 8008274:	1aed      	subs	r5, r5, r3
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	9304      	str	r3, [sp, #16]
 800827a:	9b06      	ldr	r3, [sp, #24]
 800827c:	b1fb      	cbz	r3, 80082be <_dtoa_r+0x7ce>
 800827e:	9b08      	ldr	r3, [sp, #32]
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 809f 	beq.w	80083c4 <_dtoa_r+0x8d4>
 8008286:	2e00      	cmp	r6, #0
 8008288:	dd11      	ble.n	80082ae <_dtoa_r+0x7be>
 800828a:	4639      	mov	r1, r7
 800828c:	4632      	mov	r2, r6
 800828e:	4620      	mov	r0, r4
 8008290:	f000 fce6 	bl	8008c60 <__pow5mult>
 8008294:	465a      	mov	r2, fp
 8008296:	4601      	mov	r1, r0
 8008298:	4607      	mov	r7, r0
 800829a:	4620      	mov	r0, r4
 800829c:	f000 fc3a 	bl	8008b14 <__multiply>
 80082a0:	4659      	mov	r1, fp
 80082a2:	9007      	str	r0, [sp, #28]
 80082a4:	4620      	mov	r0, r4
 80082a6:	f000 fb63 	bl	8008970 <_Bfree>
 80082aa:	9b07      	ldr	r3, [sp, #28]
 80082ac:	469b      	mov	fp, r3
 80082ae:	9b06      	ldr	r3, [sp, #24]
 80082b0:	1b9a      	subs	r2, r3, r6
 80082b2:	d004      	beq.n	80082be <_dtoa_r+0x7ce>
 80082b4:	4659      	mov	r1, fp
 80082b6:	4620      	mov	r0, r4
 80082b8:	f000 fcd2 	bl	8008c60 <__pow5mult>
 80082bc:	4683      	mov	fp, r0
 80082be:	2101      	movs	r1, #1
 80082c0:	4620      	mov	r0, r4
 80082c2:	f000 fc11 	bl	8008ae8 <__i2b>
 80082c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	4606      	mov	r6, r0
 80082cc:	dd7c      	ble.n	80083c8 <_dtoa_r+0x8d8>
 80082ce:	461a      	mov	r2, r3
 80082d0:	4601      	mov	r1, r0
 80082d2:	4620      	mov	r0, r4
 80082d4:	f000 fcc4 	bl	8008c60 <__pow5mult>
 80082d8:	9b05      	ldr	r3, [sp, #20]
 80082da:	2b01      	cmp	r3, #1
 80082dc:	4606      	mov	r6, r0
 80082de:	dd76      	ble.n	80083ce <_dtoa_r+0x8de>
 80082e0:	2300      	movs	r3, #0
 80082e2:	9306      	str	r3, [sp, #24]
 80082e4:	6933      	ldr	r3, [r6, #16]
 80082e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80082ea:	6918      	ldr	r0, [r3, #16]
 80082ec:	f000 fbac 	bl	8008a48 <__hi0bits>
 80082f0:	f1c0 0020 	rsb	r0, r0, #32
 80082f4:	9b04      	ldr	r3, [sp, #16]
 80082f6:	4418      	add	r0, r3
 80082f8:	f010 001f 	ands.w	r0, r0, #31
 80082fc:	f000 8086 	beq.w	800840c <_dtoa_r+0x91c>
 8008300:	f1c0 0320 	rsb	r3, r0, #32
 8008304:	2b04      	cmp	r3, #4
 8008306:	dd7f      	ble.n	8008408 <_dtoa_r+0x918>
 8008308:	f1c0 001c 	rsb	r0, r0, #28
 800830c:	9b04      	ldr	r3, [sp, #16]
 800830e:	4403      	add	r3, r0
 8008310:	4480      	add	r8, r0
 8008312:	4405      	add	r5, r0
 8008314:	9304      	str	r3, [sp, #16]
 8008316:	f1b8 0f00 	cmp.w	r8, #0
 800831a:	dd05      	ble.n	8008328 <_dtoa_r+0x838>
 800831c:	4659      	mov	r1, fp
 800831e:	4642      	mov	r2, r8
 8008320:	4620      	mov	r0, r4
 8008322:	f000 fcf7 	bl	8008d14 <__lshift>
 8008326:	4683      	mov	fp, r0
 8008328:	9b04      	ldr	r3, [sp, #16]
 800832a:	2b00      	cmp	r3, #0
 800832c:	dd05      	ble.n	800833a <_dtoa_r+0x84a>
 800832e:	4631      	mov	r1, r6
 8008330:	461a      	mov	r2, r3
 8008332:	4620      	mov	r0, r4
 8008334:	f000 fcee 	bl	8008d14 <__lshift>
 8008338:	4606      	mov	r6, r0
 800833a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800833c:	2b00      	cmp	r3, #0
 800833e:	d069      	beq.n	8008414 <_dtoa_r+0x924>
 8008340:	4631      	mov	r1, r6
 8008342:	4658      	mov	r0, fp
 8008344:	f000 fd52 	bl	8008dec <__mcmp>
 8008348:	2800      	cmp	r0, #0
 800834a:	da63      	bge.n	8008414 <_dtoa_r+0x924>
 800834c:	2300      	movs	r3, #0
 800834e:	4659      	mov	r1, fp
 8008350:	220a      	movs	r2, #10
 8008352:	4620      	mov	r0, r4
 8008354:	f000 fb2e 	bl	80089b4 <__multadd>
 8008358:	9b08      	ldr	r3, [sp, #32]
 800835a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800835e:	4683      	mov	fp, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	f000 818f 	beq.w	8008684 <_dtoa_r+0xb94>
 8008366:	4639      	mov	r1, r7
 8008368:	2300      	movs	r3, #0
 800836a:	220a      	movs	r2, #10
 800836c:	4620      	mov	r0, r4
 800836e:	f000 fb21 	bl	80089b4 <__multadd>
 8008372:	f1b9 0f00 	cmp.w	r9, #0
 8008376:	4607      	mov	r7, r0
 8008378:	f300 808e 	bgt.w	8008498 <_dtoa_r+0x9a8>
 800837c:	9b05      	ldr	r3, [sp, #20]
 800837e:	2b02      	cmp	r3, #2
 8008380:	dc50      	bgt.n	8008424 <_dtoa_r+0x934>
 8008382:	e089      	b.n	8008498 <_dtoa_r+0x9a8>
 8008384:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008386:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800838a:	e75d      	b.n	8008248 <_dtoa_r+0x758>
 800838c:	9b01      	ldr	r3, [sp, #4]
 800838e:	1e5e      	subs	r6, r3, #1
 8008390:	9b06      	ldr	r3, [sp, #24]
 8008392:	42b3      	cmp	r3, r6
 8008394:	bfbf      	itttt	lt
 8008396:	9b06      	ldrlt	r3, [sp, #24]
 8008398:	9606      	strlt	r6, [sp, #24]
 800839a:	1af2      	sublt	r2, r6, r3
 800839c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800839e:	bfb6      	itet	lt
 80083a0:	189b      	addlt	r3, r3, r2
 80083a2:	1b9e      	subge	r6, r3, r6
 80083a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80083a6:	9b01      	ldr	r3, [sp, #4]
 80083a8:	bfb8      	it	lt
 80083aa:	2600      	movlt	r6, #0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	bfb5      	itete	lt
 80083b0:	eba8 0503 	sublt.w	r5, r8, r3
 80083b4:	9b01      	ldrge	r3, [sp, #4]
 80083b6:	2300      	movlt	r3, #0
 80083b8:	4645      	movge	r5, r8
 80083ba:	e747      	b.n	800824c <_dtoa_r+0x75c>
 80083bc:	9e06      	ldr	r6, [sp, #24]
 80083be:	9f08      	ldr	r7, [sp, #32]
 80083c0:	4645      	mov	r5, r8
 80083c2:	e74c      	b.n	800825e <_dtoa_r+0x76e>
 80083c4:	9a06      	ldr	r2, [sp, #24]
 80083c6:	e775      	b.n	80082b4 <_dtoa_r+0x7c4>
 80083c8:	9b05      	ldr	r3, [sp, #20]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	dc18      	bgt.n	8008400 <_dtoa_r+0x910>
 80083ce:	9b02      	ldr	r3, [sp, #8]
 80083d0:	b9b3      	cbnz	r3, 8008400 <_dtoa_r+0x910>
 80083d2:	9b03      	ldr	r3, [sp, #12]
 80083d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083d8:	b9a3      	cbnz	r3, 8008404 <_dtoa_r+0x914>
 80083da:	9b03      	ldr	r3, [sp, #12]
 80083dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083e0:	0d1b      	lsrs	r3, r3, #20
 80083e2:	051b      	lsls	r3, r3, #20
 80083e4:	b12b      	cbz	r3, 80083f2 <_dtoa_r+0x902>
 80083e6:	9b04      	ldr	r3, [sp, #16]
 80083e8:	3301      	adds	r3, #1
 80083ea:	9304      	str	r3, [sp, #16]
 80083ec:	f108 0801 	add.w	r8, r8, #1
 80083f0:	2301      	movs	r3, #1
 80083f2:	9306      	str	r3, [sp, #24]
 80083f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f47f af74 	bne.w	80082e4 <_dtoa_r+0x7f4>
 80083fc:	2001      	movs	r0, #1
 80083fe:	e779      	b.n	80082f4 <_dtoa_r+0x804>
 8008400:	2300      	movs	r3, #0
 8008402:	e7f6      	b.n	80083f2 <_dtoa_r+0x902>
 8008404:	9b02      	ldr	r3, [sp, #8]
 8008406:	e7f4      	b.n	80083f2 <_dtoa_r+0x902>
 8008408:	d085      	beq.n	8008316 <_dtoa_r+0x826>
 800840a:	4618      	mov	r0, r3
 800840c:	301c      	adds	r0, #28
 800840e:	e77d      	b.n	800830c <_dtoa_r+0x81c>
 8008410:	40240000 	.word	0x40240000
 8008414:	9b01      	ldr	r3, [sp, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	dc38      	bgt.n	800848c <_dtoa_r+0x99c>
 800841a:	9b05      	ldr	r3, [sp, #20]
 800841c:	2b02      	cmp	r3, #2
 800841e:	dd35      	ble.n	800848c <_dtoa_r+0x99c>
 8008420:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008424:	f1b9 0f00 	cmp.w	r9, #0
 8008428:	d10d      	bne.n	8008446 <_dtoa_r+0x956>
 800842a:	4631      	mov	r1, r6
 800842c:	464b      	mov	r3, r9
 800842e:	2205      	movs	r2, #5
 8008430:	4620      	mov	r0, r4
 8008432:	f000 fabf 	bl	80089b4 <__multadd>
 8008436:	4601      	mov	r1, r0
 8008438:	4606      	mov	r6, r0
 800843a:	4658      	mov	r0, fp
 800843c:	f000 fcd6 	bl	8008dec <__mcmp>
 8008440:	2800      	cmp	r0, #0
 8008442:	f73f adbd 	bgt.w	8007fc0 <_dtoa_r+0x4d0>
 8008446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008448:	9d00      	ldr	r5, [sp, #0]
 800844a:	ea6f 0a03 	mvn.w	sl, r3
 800844e:	f04f 0800 	mov.w	r8, #0
 8008452:	4631      	mov	r1, r6
 8008454:	4620      	mov	r0, r4
 8008456:	f000 fa8b 	bl	8008970 <_Bfree>
 800845a:	2f00      	cmp	r7, #0
 800845c:	f43f aeb4 	beq.w	80081c8 <_dtoa_r+0x6d8>
 8008460:	f1b8 0f00 	cmp.w	r8, #0
 8008464:	d005      	beq.n	8008472 <_dtoa_r+0x982>
 8008466:	45b8      	cmp	r8, r7
 8008468:	d003      	beq.n	8008472 <_dtoa_r+0x982>
 800846a:	4641      	mov	r1, r8
 800846c:	4620      	mov	r0, r4
 800846e:	f000 fa7f 	bl	8008970 <_Bfree>
 8008472:	4639      	mov	r1, r7
 8008474:	4620      	mov	r0, r4
 8008476:	f000 fa7b 	bl	8008970 <_Bfree>
 800847a:	e6a5      	b.n	80081c8 <_dtoa_r+0x6d8>
 800847c:	2600      	movs	r6, #0
 800847e:	4637      	mov	r7, r6
 8008480:	e7e1      	b.n	8008446 <_dtoa_r+0x956>
 8008482:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008484:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008488:	4637      	mov	r7, r6
 800848a:	e599      	b.n	8007fc0 <_dtoa_r+0x4d0>
 800848c:	9b08      	ldr	r3, [sp, #32]
 800848e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	f000 80fd 	beq.w	8008692 <_dtoa_r+0xba2>
 8008498:	2d00      	cmp	r5, #0
 800849a:	dd05      	ble.n	80084a8 <_dtoa_r+0x9b8>
 800849c:	4639      	mov	r1, r7
 800849e:	462a      	mov	r2, r5
 80084a0:	4620      	mov	r0, r4
 80084a2:	f000 fc37 	bl	8008d14 <__lshift>
 80084a6:	4607      	mov	r7, r0
 80084a8:	9b06      	ldr	r3, [sp, #24]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d05c      	beq.n	8008568 <_dtoa_r+0xa78>
 80084ae:	6879      	ldr	r1, [r7, #4]
 80084b0:	4620      	mov	r0, r4
 80084b2:	f000 fa1d 	bl	80088f0 <_Balloc>
 80084b6:	4605      	mov	r5, r0
 80084b8:	b928      	cbnz	r0, 80084c6 <_dtoa_r+0x9d6>
 80084ba:	4b80      	ldr	r3, [pc, #512]	; (80086bc <_dtoa_r+0xbcc>)
 80084bc:	4602      	mov	r2, r0
 80084be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80084c2:	f7ff bb2e 	b.w	8007b22 <_dtoa_r+0x32>
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	3202      	adds	r2, #2
 80084ca:	0092      	lsls	r2, r2, #2
 80084cc:	f107 010c 	add.w	r1, r7, #12
 80084d0:	300c      	adds	r0, #12
 80084d2:	f000 f9ff 	bl	80088d4 <memcpy>
 80084d6:	2201      	movs	r2, #1
 80084d8:	4629      	mov	r1, r5
 80084da:	4620      	mov	r0, r4
 80084dc:	f000 fc1a 	bl	8008d14 <__lshift>
 80084e0:	9b00      	ldr	r3, [sp, #0]
 80084e2:	3301      	adds	r3, #1
 80084e4:	9301      	str	r3, [sp, #4]
 80084e6:	9b00      	ldr	r3, [sp, #0]
 80084e8:	444b      	add	r3, r9
 80084ea:	9307      	str	r3, [sp, #28]
 80084ec:	9b02      	ldr	r3, [sp, #8]
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	46b8      	mov	r8, r7
 80084f4:	9306      	str	r3, [sp, #24]
 80084f6:	4607      	mov	r7, r0
 80084f8:	9b01      	ldr	r3, [sp, #4]
 80084fa:	4631      	mov	r1, r6
 80084fc:	3b01      	subs	r3, #1
 80084fe:	4658      	mov	r0, fp
 8008500:	9302      	str	r3, [sp, #8]
 8008502:	f7ff fa69 	bl	80079d8 <quorem>
 8008506:	4603      	mov	r3, r0
 8008508:	3330      	adds	r3, #48	; 0x30
 800850a:	9004      	str	r0, [sp, #16]
 800850c:	4641      	mov	r1, r8
 800850e:	4658      	mov	r0, fp
 8008510:	9308      	str	r3, [sp, #32]
 8008512:	f000 fc6b 	bl	8008dec <__mcmp>
 8008516:	463a      	mov	r2, r7
 8008518:	4681      	mov	r9, r0
 800851a:	4631      	mov	r1, r6
 800851c:	4620      	mov	r0, r4
 800851e:	f000 fc81 	bl	8008e24 <__mdiff>
 8008522:	68c2      	ldr	r2, [r0, #12]
 8008524:	9b08      	ldr	r3, [sp, #32]
 8008526:	4605      	mov	r5, r0
 8008528:	bb02      	cbnz	r2, 800856c <_dtoa_r+0xa7c>
 800852a:	4601      	mov	r1, r0
 800852c:	4658      	mov	r0, fp
 800852e:	f000 fc5d 	bl	8008dec <__mcmp>
 8008532:	9b08      	ldr	r3, [sp, #32]
 8008534:	4602      	mov	r2, r0
 8008536:	4629      	mov	r1, r5
 8008538:	4620      	mov	r0, r4
 800853a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800853e:	f000 fa17 	bl	8008970 <_Bfree>
 8008542:	9b05      	ldr	r3, [sp, #20]
 8008544:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008546:	9d01      	ldr	r5, [sp, #4]
 8008548:	ea43 0102 	orr.w	r1, r3, r2
 800854c:	9b06      	ldr	r3, [sp, #24]
 800854e:	430b      	orrs	r3, r1
 8008550:	9b08      	ldr	r3, [sp, #32]
 8008552:	d10d      	bne.n	8008570 <_dtoa_r+0xa80>
 8008554:	2b39      	cmp	r3, #57	; 0x39
 8008556:	d029      	beq.n	80085ac <_dtoa_r+0xabc>
 8008558:	f1b9 0f00 	cmp.w	r9, #0
 800855c:	dd01      	ble.n	8008562 <_dtoa_r+0xa72>
 800855e:	9b04      	ldr	r3, [sp, #16]
 8008560:	3331      	adds	r3, #49	; 0x31
 8008562:	9a02      	ldr	r2, [sp, #8]
 8008564:	7013      	strb	r3, [r2, #0]
 8008566:	e774      	b.n	8008452 <_dtoa_r+0x962>
 8008568:	4638      	mov	r0, r7
 800856a:	e7b9      	b.n	80084e0 <_dtoa_r+0x9f0>
 800856c:	2201      	movs	r2, #1
 800856e:	e7e2      	b.n	8008536 <_dtoa_r+0xa46>
 8008570:	f1b9 0f00 	cmp.w	r9, #0
 8008574:	db06      	blt.n	8008584 <_dtoa_r+0xa94>
 8008576:	9905      	ldr	r1, [sp, #20]
 8008578:	ea41 0909 	orr.w	r9, r1, r9
 800857c:	9906      	ldr	r1, [sp, #24]
 800857e:	ea59 0101 	orrs.w	r1, r9, r1
 8008582:	d120      	bne.n	80085c6 <_dtoa_r+0xad6>
 8008584:	2a00      	cmp	r2, #0
 8008586:	ddec      	ble.n	8008562 <_dtoa_r+0xa72>
 8008588:	4659      	mov	r1, fp
 800858a:	2201      	movs	r2, #1
 800858c:	4620      	mov	r0, r4
 800858e:	9301      	str	r3, [sp, #4]
 8008590:	f000 fbc0 	bl	8008d14 <__lshift>
 8008594:	4631      	mov	r1, r6
 8008596:	4683      	mov	fp, r0
 8008598:	f000 fc28 	bl	8008dec <__mcmp>
 800859c:	2800      	cmp	r0, #0
 800859e:	9b01      	ldr	r3, [sp, #4]
 80085a0:	dc02      	bgt.n	80085a8 <_dtoa_r+0xab8>
 80085a2:	d1de      	bne.n	8008562 <_dtoa_r+0xa72>
 80085a4:	07da      	lsls	r2, r3, #31
 80085a6:	d5dc      	bpl.n	8008562 <_dtoa_r+0xa72>
 80085a8:	2b39      	cmp	r3, #57	; 0x39
 80085aa:	d1d8      	bne.n	800855e <_dtoa_r+0xa6e>
 80085ac:	9a02      	ldr	r2, [sp, #8]
 80085ae:	2339      	movs	r3, #57	; 0x39
 80085b0:	7013      	strb	r3, [r2, #0]
 80085b2:	462b      	mov	r3, r5
 80085b4:	461d      	mov	r5, r3
 80085b6:	3b01      	subs	r3, #1
 80085b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80085bc:	2a39      	cmp	r2, #57	; 0x39
 80085be:	d050      	beq.n	8008662 <_dtoa_r+0xb72>
 80085c0:	3201      	adds	r2, #1
 80085c2:	701a      	strb	r2, [r3, #0]
 80085c4:	e745      	b.n	8008452 <_dtoa_r+0x962>
 80085c6:	2a00      	cmp	r2, #0
 80085c8:	dd03      	ble.n	80085d2 <_dtoa_r+0xae2>
 80085ca:	2b39      	cmp	r3, #57	; 0x39
 80085cc:	d0ee      	beq.n	80085ac <_dtoa_r+0xabc>
 80085ce:	3301      	adds	r3, #1
 80085d0:	e7c7      	b.n	8008562 <_dtoa_r+0xa72>
 80085d2:	9a01      	ldr	r2, [sp, #4]
 80085d4:	9907      	ldr	r1, [sp, #28]
 80085d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80085da:	428a      	cmp	r2, r1
 80085dc:	d02a      	beq.n	8008634 <_dtoa_r+0xb44>
 80085de:	4659      	mov	r1, fp
 80085e0:	2300      	movs	r3, #0
 80085e2:	220a      	movs	r2, #10
 80085e4:	4620      	mov	r0, r4
 80085e6:	f000 f9e5 	bl	80089b4 <__multadd>
 80085ea:	45b8      	cmp	r8, r7
 80085ec:	4683      	mov	fp, r0
 80085ee:	f04f 0300 	mov.w	r3, #0
 80085f2:	f04f 020a 	mov.w	r2, #10
 80085f6:	4641      	mov	r1, r8
 80085f8:	4620      	mov	r0, r4
 80085fa:	d107      	bne.n	800860c <_dtoa_r+0xb1c>
 80085fc:	f000 f9da 	bl	80089b4 <__multadd>
 8008600:	4680      	mov	r8, r0
 8008602:	4607      	mov	r7, r0
 8008604:	9b01      	ldr	r3, [sp, #4]
 8008606:	3301      	adds	r3, #1
 8008608:	9301      	str	r3, [sp, #4]
 800860a:	e775      	b.n	80084f8 <_dtoa_r+0xa08>
 800860c:	f000 f9d2 	bl	80089b4 <__multadd>
 8008610:	4639      	mov	r1, r7
 8008612:	4680      	mov	r8, r0
 8008614:	2300      	movs	r3, #0
 8008616:	220a      	movs	r2, #10
 8008618:	4620      	mov	r0, r4
 800861a:	f000 f9cb 	bl	80089b4 <__multadd>
 800861e:	4607      	mov	r7, r0
 8008620:	e7f0      	b.n	8008604 <_dtoa_r+0xb14>
 8008622:	f1b9 0f00 	cmp.w	r9, #0
 8008626:	9a00      	ldr	r2, [sp, #0]
 8008628:	bfcc      	ite	gt
 800862a:	464d      	movgt	r5, r9
 800862c:	2501      	movle	r5, #1
 800862e:	4415      	add	r5, r2
 8008630:	f04f 0800 	mov.w	r8, #0
 8008634:	4659      	mov	r1, fp
 8008636:	2201      	movs	r2, #1
 8008638:	4620      	mov	r0, r4
 800863a:	9301      	str	r3, [sp, #4]
 800863c:	f000 fb6a 	bl	8008d14 <__lshift>
 8008640:	4631      	mov	r1, r6
 8008642:	4683      	mov	fp, r0
 8008644:	f000 fbd2 	bl	8008dec <__mcmp>
 8008648:	2800      	cmp	r0, #0
 800864a:	dcb2      	bgt.n	80085b2 <_dtoa_r+0xac2>
 800864c:	d102      	bne.n	8008654 <_dtoa_r+0xb64>
 800864e:	9b01      	ldr	r3, [sp, #4]
 8008650:	07db      	lsls	r3, r3, #31
 8008652:	d4ae      	bmi.n	80085b2 <_dtoa_r+0xac2>
 8008654:	462b      	mov	r3, r5
 8008656:	461d      	mov	r5, r3
 8008658:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800865c:	2a30      	cmp	r2, #48	; 0x30
 800865e:	d0fa      	beq.n	8008656 <_dtoa_r+0xb66>
 8008660:	e6f7      	b.n	8008452 <_dtoa_r+0x962>
 8008662:	9a00      	ldr	r2, [sp, #0]
 8008664:	429a      	cmp	r2, r3
 8008666:	d1a5      	bne.n	80085b4 <_dtoa_r+0xac4>
 8008668:	f10a 0a01 	add.w	sl, sl, #1
 800866c:	2331      	movs	r3, #49	; 0x31
 800866e:	e779      	b.n	8008564 <_dtoa_r+0xa74>
 8008670:	4b13      	ldr	r3, [pc, #76]	; (80086c0 <_dtoa_r+0xbd0>)
 8008672:	f7ff baaf 	b.w	8007bd4 <_dtoa_r+0xe4>
 8008676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008678:	2b00      	cmp	r3, #0
 800867a:	f47f aa86 	bne.w	8007b8a <_dtoa_r+0x9a>
 800867e:	4b11      	ldr	r3, [pc, #68]	; (80086c4 <_dtoa_r+0xbd4>)
 8008680:	f7ff baa8 	b.w	8007bd4 <_dtoa_r+0xe4>
 8008684:	f1b9 0f00 	cmp.w	r9, #0
 8008688:	dc03      	bgt.n	8008692 <_dtoa_r+0xba2>
 800868a:	9b05      	ldr	r3, [sp, #20]
 800868c:	2b02      	cmp	r3, #2
 800868e:	f73f aec9 	bgt.w	8008424 <_dtoa_r+0x934>
 8008692:	9d00      	ldr	r5, [sp, #0]
 8008694:	4631      	mov	r1, r6
 8008696:	4658      	mov	r0, fp
 8008698:	f7ff f99e 	bl	80079d8 <quorem>
 800869c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80086a0:	f805 3b01 	strb.w	r3, [r5], #1
 80086a4:	9a00      	ldr	r2, [sp, #0]
 80086a6:	1aaa      	subs	r2, r5, r2
 80086a8:	4591      	cmp	r9, r2
 80086aa:	ddba      	ble.n	8008622 <_dtoa_r+0xb32>
 80086ac:	4659      	mov	r1, fp
 80086ae:	2300      	movs	r3, #0
 80086b0:	220a      	movs	r2, #10
 80086b2:	4620      	mov	r0, r4
 80086b4:	f000 f97e 	bl	80089b4 <__multadd>
 80086b8:	4683      	mov	fp, r0
 80086ba:	e7eb      	b.n	8008694 <_dtoa_r+0xba4>
 80086bc:	08009bef 	.word	0x08009bef
 80086c0:	08009b48 	.word	0x08009b48
 80086c4:	08009b6c 	.word	0x08009b6c

080086c8 <std>:
 80086c8:	2300      	movs	r3, #0
 80086ca:	b510      	push	{r4, lr}
 80086cc:	4604      	mov	r4, r0
 80086ce:	e9c0 3300 	strd	r3, r3, [r0]
 80086d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086d6:	6083      	str	r3, [r0, #8]
 80086d8:	8181      	strh	r1, [r0, #12]
 80086da:	6643      	str	r3, [r0, #100]	; 0x64
 80086dc:	81c2      	strh	r2, [r0, #14]
 80086de:	6183      	str	r3, [r0, #24]
 80086e0:	4619      	mov	r1, r3
 80086e2:	2208      	movs	r2, #8
 80086e4:	305c      	adds	r0, #92	; 0x5c
 80086e6:	f7fe fced 	bl	80070c4 <memset>
 80086ea:	4b05      	ldr	r3, [pc, #20]	; (8008700 <std+0x38>)
 80086ec:	6263      	str	r3, [r4, #36]	; 0x24
 80086ee:	4b05      	ldr	r3, [pc, #20]	; (8008704 <std+0x3c>)
 80086f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80086f2:	4b05      	ldr	r3, [pc, #20]	; (8008708 <std+0x40>)
 80086f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086f6:	4b05      	ldr	r3, [pc, #20]	; (800870c <std+0x44>)
 80086f8:	6224      	str	r4, [r4, #32]
 80086fa:	6323      	str	r3, [r4, #48]	; 0x30
 80086fc:	bd10      	pop	{r4, pc}
 80086fe:	bf00      	nop
 8008700:	08009435 	.word	0x08009435
 8008704:	08009457 	.word	0x08009457
 8008708:	0800948f 	.word	0x0800948f
 800870c:	080094b3 	.word	0x080094b3

08008710 <_cleanup_r>:
 8008710:	4901      	ldr	r1, [pc, #4]	; (8008718 <_cleanup_r+0x8>)
 8008712:	f000 b8af 	b.w	8008874 <_fwalk_reent>
 8008716:	bf00      	nop
 8008718:	080097c9 	.word	0x080097c9

0800871c <__sfmoreglue>:
 800871c:	b570      	push	{r4, r5, r6, lr}
 800871e:	1e4a      	subs	r2, r1, #1
 8008720:	2568      	movs	r5, #104	; 0x68
 8008722:	4355      	muls	r5, r2
 8008724:	460e      	mov	r6, r1
 8008726:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800872a:	f000 fcbf 	bl	80090ac <_malloc_r>
 800872e:	4604      	mov	r4, r0
 8008730:	b140      	cbz	r0, 8008744 <__sfmoreglue+0x28>
 8008732:	2100      	movs	r1, #0
 8008734:	e9c0 1600 	strd	r1, r6, [r0]
 8008738:	300c      	adds	r0, #12
 800873a:	60a0      	str	r0, [r4, #8]
 800873c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008740:	f7fe fcc0 	bl	80070c4 <memset>
 8008744:	4620      	mov	r0, r4
 8008746:	bd70      	pop	{r4, r5, r6, pc}

08008748 <__sfp_lock_acquire>:
 8008748:	4801      	ldr	r0, [pc, #4]	; (8008750 <__sfp_lock_acquire+0x8>)
 800874a:	f000 b8b8 	b.w	80088be <__retarget_lock_acquire_recursive>
 800874e:	bf00      	nop
 8008750:	20000448 	.word	0x20000448

08008754 <__sfp_lock_release>:
 8008754:	4801      	ldr	r0, [pc, #4]	; (800875c <__sfp_lock_release+0x8>)
 8008756:	f000 b8b3 	b.w	80088c0 <__retarget_lock_release_recursive>
 800875a:	bf00      	nop
 800875c:	20000448 	.word	0x20000448

08008760 <__sinit_lock_acquire>:
 8008760:	4801      	ldr	r0, [pc, #4]	; (8008768 <__sinit_lock_acquire+0x8>)
 8008762:	f000 b8ac 	b.w	80088be <__retarget_lock_acquire_recursive>
 8008766:	bf00      	nop
 8008768:	20000443 	.word	0x20000443

0800876c <__sinit_lock_release>:
 800876c:	4801      	ldr	r0, [pc, #4]	; (8008774 <__sinit_lock_release+0x8>)
 800876e:	f000 b8a7 	b.w	80088c0 <__retarget_lock_release_recursive>
 8008772:	bf00      	nop
 8008774:	20000443 	.word	0x20000443

08008778 <__sinit>:
 8008778:	b510      	push	{r4, lr}
 800877a:	4604      	mov	r4, r0
 800877c:	f7ff fff0 	bl	8008760 <__sinit_lock_acquire>
 8008780:	69a3      	ldr	r3, [r4, #24]
 8008782:	b11b      	cbz	r3, 800878c <__sinit+0x14>
 8008784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008788:	f7ff bff0 	b.w	800876c <__sinit_lock_release>
 800878c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008790:	6523      	str	r3, [r4, #80]	; 0x50
 8008792:	4b13      	ldr	r3, [pc, #76]	; (80087e0 <__sinit+0x68>)
 8008794:	4a13      	ldr	r2, [pc, #76]	; (80087e4 <__sinit+0x6c>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	62a2      	str	r2, [r4, #40]	; 0x28
 800879a:	42a3      	cmp	r3, r4
 800879c:	bf04      	itt	eq
 800879e:	2301      	moveq	r3, #1
 80087a0:	61a3      	streq	r3, [r4, #24]
 80087a2:	4620      	mov	r0, r4
 80087a4:	f000 f820 	bl	80087e8 <__sfp>
 80087a8:	6060      	str	r0, [r4, #4]
 80087aa:	4620      	mov	r0, r4
 80087ac:	f000 f81c 	bl	80087e8 <__sfp>
 80087b0:	60a0      	str	r0, [r4, #8]
 80087b2:	4620      	mov	r0, r4
 80087b4:	f000 f818 	bl	80087e8 <__sfp>
 80087b8:	2200      	movs	r2, #0
 80087ba:	60e0      	str	r0, [r4, #12]
 80087bc:	2104      	movs	r1, #4
 80087be:	6860      	ldr	r0, [r4, #4]
 80087c0:	f7ff ff82 	bl	80086c8 <std>
 80087c4:	68a0      	ldr	r0, [r4, #8]
 80087c6:	2201      	movs	r2, #1
 80087c8:	2109      	movs	r1, #9
 80087ca:	f7ff ff7d 	bl	80086c8 <std>
 80087ce:	68e0      	ldr	r0, [r4, #12]
 80087d0:	2202      	movs	r2, #2
 80087d2:	2112      	movs	r1, #18
 80087d4:	f7ff ff78 	bl	80086c8 <std>
 80087d8:	2301      	movs	r3, #1
 80087da:	61a3      	str	r3, [r4, #24]
 80087dc:	e7d2      	b.n	8008784 <__sinit+0xc>
 80087de:	bf00      	nop
 80087e0:	08009b34 	.word	0x08009b34
 80087e4:	08008711 	.word	0x08008711

080087e8 <__sfp>:
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	4607      	mov	r7, r0
 80087ec:	f7ff ffac 	bl	8008748 <__sfp_lock_acquire>
 80087f0:	4b1e      	ldr	r3, [pc, #120]	; (800886c <__sfp+0x84>)
 80087f2:	681e      	ldr	r6, [r3, #0]
 80087f4:	69b3      	ldr	r3, [r6, #24]
 80087f6:	b913      	cbnz	r3, 80087fe <__sfp+0x16>
 80087f8:	4630      	mov	r0, r6
 80087fa:	f7ff ffbd 	bl	8008778 <__sinit>
 80087fe:	3648      	adds	r6, #72	; 0x48
 8008800:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008804:	3b01      	subs	r3, #1
 8008806:	d503      	bpl.n	8008810 <__sfp+0x28>
 8008808:	6833      	ldr	r3, [r6, #0]
 800880a:	b30b      	cbz	r3, 8008850 <__sfp+0x68>
 800880c:	6836      	ldr	r6, [r6, #0]
 800880e:	e7f7      	b.n	8008800 <__sfp+0x18>
 8008810:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008814:	b9d5      	cbnz	r5, 800884c <__sfp+0x64>
 8008816:	4b16      	ldr	r3, [pc, #88]	; (8008870 <__sfp+0x88>)
 8008818:	60e3      	str	r3, [r4, #12]
 800881a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800881e:	6665      	str	r5, [r4, #100]	; 0x64
 8008820:	f000 f84c 	bl	80088bc <__retarget_lock_init_recursive>
 8008824:	f7ff ff96 	bl	8008754 <__sfp_lock_release>
 8008828:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800882c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008830:	6025      	str	r5, [r4, #0]
 8008832:	61a5      	str	r5, [r4, #24]
 8008834:	2208      	movs	r2, #8
 8008836:	4629      	mov	r1, r5
 8008838:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800883c:	f7fe fc42 	bl	80070c4 <memset>
 8008840:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008844:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008848:	4620      	mov	r0, r4
 800884a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800884c:	3468      	adds	r4, #104	; 0x68
 800884e:	e7d9      	b.n	8008804 <__sfp+0x1c>
 8008850:	2104      	movs	r1, #4
 8008852:	4638      	mov	r0, r7
 8008854:	f7ff ff62 	bl	800871c <__sfmoreglue>
 8008858:	4604      	mov	r4, r0
 800885a:	6030      	str	r0, [r6, #0]
 800885c:	2800      	cmp	r0, #0
 800885e:	d1d5      	bne.n	800880c <__sfp+0x24>
 8008860:	f7ff ff78 	bl	8008754 <__sfp_lock_release>
 8008864:	230c      	movs	r3, #12
 8008866:	603b      	str	r3, [r7, #0]
 8008868:	e7ee      	b.n	8008848 <__sfp+0x60>
 800886a:	bf00      	nop
 800886c:	08009b34 	.word	0x08009b34
 8008870:	ffff0001 	.word	0xffff0001

08008874 <_fwalk_reent>:
 8008874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008878:	4606      	mov	r6, r0
 800887a:	4688      	mov	r8, r1
 800887c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008880:	2700      	movs	r7, #0
 8008882:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008886:	f1b9 0901 	subs.w	r9, r9, #1
 800888a:	d505      	bpl.n	8008898 <_fwalk_reent+0x24>
 800888c:	6824      	ldr	r4, [r4, #0]
 800888e:	2c00      	cmp	r4, #0
 8008890:	d1f7      	bne.n	8008882 <_fwalk_reent+0xe>
 8008892:	4638      	mov	r0, r7
 8008894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008898:	89ab      	ldrh	r3, [r5, #12]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d907      	bls.n	80088ae <_fwalk_reent+0x3a>
 800889e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088a2:	3301      	adds	r3, #1
 80088a4:	d003      	beq.n	80088ae <_fwalk_reent+0x3a>
 80088a6:	4629      	mov	r1, r5
 80088a8:	4630      	mov	r0, r6
 80088aa:	47c0      	blx	r8
 80088ac:	4307      	orrs	r7, r0
 80088ae:	3568      	adds	r5, #104	; 0x68
 80088b0:	e7e9      	b.n	8008886 <_fwalk_reent+0x12>
	...

080088b4 <_localeconv_r>:
 80088b4:	4800      	ldr	r0, [pc, #0]	; (80088b8 <_localeconv_r+0x4>)
 80088b6:	4770      	bx	lr
 80088b8:	20000160 	.word	0x20000160

080088bc <__retarget_lock_init_recursive>:
 80088bc:	4770      	bx	lr

080088be <__retarget_lock_acquire_recursive>:
 80088be:	4770      	bx	lr

080088c0 <__retarget_lock_release_recursive>:
 80088c0:	4770      	bx	lr
	...

080088c4 <malloc>:
 80088c4:	4b02      	ldr	r3, [pc, #8]	; (80088d0 <malloc+0xc>)
 80088c6:	4601      	mov	r1, r0
 80088c8:	6818      	ldr	r0, [r3, #0]
 80088ca:	f000 bbef 	b.w	80090ac <_malloc_r>
 80088ce:	bf00      	nop
 80088d0:	2000000c 	.word	0x2000000c

080088d4 <memcpy>:
 80088d4:	440a      	add	r2, r1
 80088d6:	4291      	cmp	r1, r2
 80088d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80088dc:	d100      	bne.n	80088e0 <memcpy+0xc>
 80088de:	4770      	bx	lr
 80088e0:	b510      	push	{r4, lr}
 80088e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ea:	4291      	cmp	r1, r2
 80088ec:	d1f9      	bne.n	80088e2 <memcpy+0xe>
 80088ee:	bd10      	pop	{r4, pc}

080088f0 <_Balloc>:
 80088f0:	b570      	push	{r4, r5, r6, lr}
 80088f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80088f4:	4604      	mov	r4, r0
 80088f6:	460d      	mov	r5, r1
 80088f8:	b976      	cbnz	r6, 8008918 <_Balloc+0x28>
 80088fa:	2010      	movs	r0, #16
 80088fc:	f7ff ffe2 	bl	80088c4 <malloc>
 8008900:	4602      	mov	r2, r0
 8008902:	6260      	str	r0, [r4, #36]	; 0x24
 8008904:	b920      	cbnz	r0, 8008910 <_Balloc+0x20>
 8008906:	4b18      	ldr	r3, [pc, #96]	; (8008968 <_Balloc+0x78>)
 8008908:	4818      	ldr	r0, [pc, #96]	; (800896c <_Balloc+0x7c>)
 800890a:	2166      	movs	r1, #102	; 0x66
 800890c:	f000 fea8 	bl	8009660 <__assert_func>
 8008910:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008914:	6006      	str	r6, [r0, #0]
 8008916:	60c6      	str	r6, [r0, #12]
 8008918:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800891a:	68f3      	ldr	r3, [r6, #12]
 800891c:	b183      	cbz	r3, 8008940 <_Balloc+0x50>
 800891e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008926:	b9b8      	cbnz	r0, 8008958 <_Balloc+0x68>
 8008928:	2101      	movs	r1, #1
 800892a:	fa01 f605 	lsl.w	r6, r1, r5
 800892e:	1d72      	adds	r2, r6, #5
 8008930:	0092      	lsls	r2, r2, #2
 8008932:	4620      	mov	r0, r4
 8008934:	f000 fb5a 	bl	8008fec <_calloc_r>
 8008938:	b160      	cbz	r0, 8008954 <_Balloc+0x64>
 800893a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800893e:	e00e      	b.n	800895e <_Balloc+0x6e>
 8008940:	2221      	movs	r2, #33	; 0x21
 8008942:	2104      	movs	r1, #4
 8008944:	4620      	mov	r0, r4
 8008946:	f000 fb51 	bl	8008fec <_calloc_r>
 800894a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800894c:	60f0      	str	r0, [r6, #12]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1e4      	bne.n	800891e <_Balloc+0x2e>
 8008954:	2000      	movs	r0, #0
 8008956:	bd70      	pop	{r4, r5, r6, pc}
 8008958:	6802      	ldr	r2, [r0, #0]
 800895a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800895e:	2300      	movs	r3, #0
 8008960:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008964:	e7f7      	b.n	8008956 <_Balloc+0x66>
 8008966:	bf00      	nop
 8008968:	08009b79 	.word	0x08009b79
 800896c:	08009c60 	.word	0x08009c60

08008970 <_Bfree>:
 8008970:	b570      	push	{r4, r5, r6, lr}
 8008972:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008974:	4605      	mov	r5, r0
 8008976:	460c      	mov	r4, r1
 8008978:	b976      	cbnz	r6, 8008998 <_Bfree+0x28>
 800897a:	2010      	movs	r0, #16
 800897c:	f7ff ffa2 	bl	80088c4 <malloc>
 8008980:	4602      	mov	r2, r0
 8008982:	6268      	str	r0, [r5, #36]	; 0x24
 8008984:	b920      	cbnz	r0, 8008990 <_Bfree+0x20>
 8008986:	4b09      	ldr	r3, [pc, #36]	; (80089ac <_Bfree+0x3c>)
 8008988:	4809      	ldr	r0, [pc, #36]	; (80089b0 <_Bfree+0x40>)
 800898a:	218a      	movs	r1, #138	; 0x8a
 800898c:	f000 fe68 	bl	8009660 <__assert_func>
 8008990:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008994:	6006      	str	r6, [r0, #0]
 8008996:	60c6      	str	r6, [r0, #12]
 8008998:	b13c      	cbz	r4, 80089aa <_Bfree+0x3a>
 800899a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800899c:	6862      	ldr	r2, [r4, #4]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089a4:	6021      	str	r1, [r4, #0]
 80089a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089aa:	bd70      	pop	{r4, r5, r6, pc}
 80089ac:	08009b79 	.word	0x08009b79
 80089b0:	08009c60 	.word	0x08009c60

080089b4 <__multadd>:
 80089b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089b8:	690e      	ldr	r6, [r1, #16]
 80089ba:	4607      	mov	r7, r0
 80089bc:	4698      	mov	r8, r3
 80089be:	460c      	mov	r4, r1
 80089c0:	f101 0014 	add.w	r0, r1, #20
 80089c4:	2300      	movs	r3, #0
 80089c6:	6805      	ldr	r5, [r0, #0]
 80089c8:	b2a9      	uxth	r1, r5
 80089ca:	fb02 8101 	mla	r1, r2, r1, r8
 80089ce:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80089d2:	0c2d      	lsrs	r5, r5, #16
 80089d4:	fb02 c505 	mla	r5, r2, r5, ip
 80089d8:	b289      	uxth	r1, r1
 80089da:	3301      	adds	r3, #1
 80089dc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80089e0:	429e      	cmp	r6, r3
 80089e2:	f840 1b04 	str.w	r1, [r0], #4
 80089e6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80089ea:	dcec      	bgt.n	80089c6 <__multadd+0x12>
 80089ec:	f1b8 0f00 	cmp.w	r8, #0
 80089f0:	d022      	beq.n	8008a38 <__multadd+0x84>
 80089f2:	68a3      	ldr	r3, [r4, #8]
 80089f4:	42b3      	cmp	r3, r6
 80089f6:	dc19      	bgt.n	8008a2c <__multadd+0x78>
 80089f8:	6861      	ldr	r1, [r4, #4]
 80089fa:	4638      	mov	r0, r7
 80089fc:	3101      	adds	r1, #1
 80089fe:	f7ff ff77 	bl	80088f0 <_Balloc>
 8008a02:	4605      	mov	r5, r0
 8008a04:	b928      	cbnz	r0, 8008a12 <__multadd+0x5e>
 8008a06:	4602      	mov	r2, r0
 8008a08:	4b0d      	ldr	r3, [pc, #52]	; (8008a40 <__multadd+0x8c>)
 8008a0a:	480e      	ldr	r0, [pc, #56]	; (8008a44 <__multadd+0x90>)
 8008a0c:	21b5      	movs	r1, #181	; 0xb5
 8008a0e:	f000 fe27 	bl	8009660 <__assert_func>
 8008a12:	6922      	ldr	r2, [r4, #16]
 8008a14:	3202      	adds	r2, #2
 8008a16:	f104 010c 	add.w	r1, r4, #12
 8008a1a:	0092      	lsls	r2, r2, #2
 8008a1c:	300c      	adds	r0, #12
 8008a1e:	f7ff ff59 	bl	80088d4 <memcpy>
 8008a22:	4621      	mov	r1, r4
 8008a24:	4638      	mov	r0, r7
 8008a26:	f7ff ffa3 	bl	8008970 <_Bfree>
 8008a2a:	462c      	mov	r4, r5
 8008a2c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008a30:	3601      	adds	r6, #1
 8008a32:	f8c3 8014 	str.w	r8, [r3, #20]
 8008a36:	6126      	str	r6, [r4, #16]
 8008a38:	4620      	mov	r0, r4
 8008a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a3e:	bf00      	nop
 8008a40:	08009bef 	.word	0x08009bef
 8008a44:	08009c60 	.word	0x08009c60

08008a48 <__hi0bits>:
 8008a48:	0c03      	lsrs	r3, r0, #16
 8008a4a:	041b      	lsls	r3, r3, #16
 8008a4c:	b9d3      	cbnz	r3, 8008a84 <__hi0bits+0x3c>
 8008a4e:	0400      	lsls	r0, r0, #16
 8008a50:	2310      	movs	r3, #16
 8008a52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a56:	bf04      	itt	eq
 8008a58:	0200      	lsleq	r0, r0, #8
 8008a5a:	3308      	addeq	r3, #8
 8008a5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a60:	bf04      	itt	eq
 8008a62:	0100      	lsleq	r0, r0, #4
 8008a64:	3304      	addeq	r3, #4
 8008a66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a6a:	bf04      	itt	eq
 8008a6c:	0080      	lsleq	r0, r0, #2
 8008a6e:	3302      	addeq	r3, #2
 8008a70:	2800      	cmp	r0, #0
 8008a72:	db05      	blt.n	8008a80 <__hi0bits+0x38>
 8008a74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a78:	f103 0301 	add.w	r3, r3, #1
 8008a7c:	bf08      	it	eq
 8008a7e:	2320      	moveq	r3, #32
 8008a80:	4618      	mov	r0, r3
 8008a82:	4770      	bx	lr
 8008a84:	2300      	movs	r3, #0
 8008a86:	e7e4      	b.n	8008a52 <__hi0bits+0xa>

08008a88 <__lo0bits>:
 8008a88:	6803      	ldr	r3, [r0, #0]
 8008a8a:	f013 0207 	ands.w	r2, r3, #7
 8008a8e:	4601      	mov	r1, r0
 8008a90:	d00b      	beq.n	8008aaa <__lo0bits+0x22>
 8008a92:	07da      	lsls	r2, r3, #31
 8008a94:	d424      	bmi.n	8008ae0 <__lo0bits+0x58>
 8008a96:	0798      	lsls	r0, r3, #30
 8008a98:	bf49      	itett	mi
 8008a9a:	085b      	lsrmi	r3, r3, #1
 8008a9c:	089b      	lsrpl	r3, r3, #2
 8008a9e:	2001      	movmi	r0, #1
 8008aa0:	600b      	strmi	r3, [r1, #0]
 8008aa2:	bf5c      	itt	pl
 8008aa4:	600b      	strpl	r3, [r1, #0]
 8008aa6:	2002      	movpl	r0, #2
 8008aa8:	4770      	bx	lr
 8008aaa:	b298      	uxth	r0, r3
 8008aac:	b9b0      	cbnz	r0, 8008adc <__lo0bits+0x54>
 8008aae:	0c1b      	lsrs	r3, r3, #16
 8008ab0:	2010      	movs	r0, #16
 8008ab2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008ab6:	bf04      	itt	eq
 8008ab8:	0a1b      	lsreq	r3, r3, #8
 8008aba:	3008      	addeq	r0, #8
 8008abc:	071a      	lsls	r2, r3, #28
 8008abe:	bf04      	itt	eq
 8008ac0:	091b      	lsreq	r3, r3, #4
 8008ac2:	3004      	addeq	r0, #4
 8008ac4:	079a      	lsls	r2, r3, #30
 8008ac6:	bf04      	itt	eq
 8008ac8:	089b      	lsreq	r3, r3, #2
 8008aca:	3002      	addeq	r0, #2
 8008acc:	07da      	lsls	r2, r3, #31
 8008ace:	d403      	bmi.n	8008ad8 <__lo0bits+0x50>
 8008ad0:	085b      	lsrs	r3, r3, #1
 8008ad2:	f100 0001 	add.w	r0, r0, #1
 8008ad6:	d005      	beq.n	8008ae4 <__lo0bits+0x5c>
 8008ad8:	600b      	str	r3, [r1, #0]
 8008ada:	4770      	bx	lr
 8008adc:	4610      	mov	r0, r2
 8008ade:	e7e8      	b.n	8008ab2 <__lo0bits+0x2a>
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	4770      	bx	lr
 8008ae4:	2020      	movs	r0, #32
 8008ae6:	4770      	bx	lr

08008ae8 <__i2b>:
 8008ae8:	b510      	push	{r4, lr}
 8008aea:	460c      	mov	r4, r1
 8008aec:	2101      	movs	r1, #1
 8008aee:	f7ff feff 	bl	80088f0 <_Balloc>
 8008af2:	4602      	mov	r2, r0
 8008af4:	b928      	cbnz	r0, 8008b02 <__i2b+0x1a>
 8008af6:	4b05      	ldr	r3, [pc, #20]	; (8008b0c <__i2b+0x24>)
 8008af8:	4805      	ldr	r0, [pc, #20]	; (8008b10 <__i2b+0x28>)
 8008afa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008afe:	f000 fdaf 	bl	8009660 <__assert_func>
 8008b02:	2301      	movs	r3, #1
 8008b04:	6144      	str	r4, [r0, #20]
 8008b06:	6103      	str	r3, [r0, #16]
 8008b08:	bd10      	pop	{r4, pc}
 8008b0a:	bf00      	nop
 8008b0c:	08009bef 	.word	0x08009bef
 8008b10:	08009c60 	.word	0x08009c60

08008b14 <__multiply>:
 8008b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b18:	4614      	mov	r4, r2
 8008b1a:	690a      	ldr	r2, [r1, #16]
 8008b1c:	6923      	ldr	r3, [r4, #16]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	bfb8      	it	lt
 8008b22:	460b      	movlt	r3, r1
 8008b24:	460d      	mov	r5, r1
 8008b26:	bfbc      	itt	lt
 8008b28:	4625      	movlt	r5, r4
 8008b2a:	461c      	movlt	r4, r3
 8008b2c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008b30:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008b34:	68ab      	ldr	r3, [r5, #8]
 8008b36:	6869      	ldr	r1, [r5, #4]
 8008b38:	eb0a 0709 	add.w	r7, sl, r9
 8008b3c:	42bb      	cmp	r3, r7
 8008b3e:	b085      	sub	sp, #20
 8008b40:	bfb8      	it	lt
 8008b42:	3101      	addlt	r1, #1
 8008b44:	f7ff fed4 	bl	80088f0 <_Balloc>
 8008b48:	b930      	cbnz	r0, 8008b58 <__multiply+0x44>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	4b42      	ldr	r3, [pc, #264]	; (8008c58 <__multiply+0x144>)
 8008b4e:	4843      	ldr	r0, [pc, #268]	; (8008c5c <__multiply+0x148>)
 8008b50:	f240 115d 	movw	r1, #349	; 0x15d
 8008b54:	f000 fd84 	bl	8009660 <__assert_func>
 8008b58:	f100 0614 	add.w	r6, r0, #20
 8008b5c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008b60:	4633      	mov	r3, r6
 8008b62:	2200      	movs	r2, #0
 8008b64:	4543      	cmp	r3, r8
 8008b66:	d31e      	bcc.n	8008ba6 <__multiply+0x92>
 8008b68:	f105 0c14 	add.w	ip, r5, #20
 8008b6c:	f104 0314 	add.w	r3, r4, #20
 8008b70:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008b74:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008b78:	9202      	str	r2, [sp, #8]
 8008b7a:	ebac 0205 	sub.w	r2, ip, r5
 8008b7e:	3a15      	subs	r2, #21
 8008b80:	f022 0203 	bic.w	r2, r2, #3
 8008b84:	3204      	adds	r2, #4
 8008b86:	f105 0115 	add.w	r1, r5, #21
 8008b8a:	458c      	cmp	ip, r1
 8008b8c:	bf38      	it	cc
 8008b8e:	2204      	movcc	r2, #4
 8008b90:	9201      	str	r2, [sp, #4]
 8008b92:	9a02      	ldr	r2, [sp, #8]
 8008b94:	9303      	str	r3, [sp, #12]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d808      	bhi.n	8008bac <__multiply+0x98>
 8008b9a:	2f00      	cmp	r7, #0
 8008b9c:	dc55      	bgt.n	8008c4a <__multiply+0x136>
 8008b9e:	6107      	str	r7, [r0, #16]
 8008ba0:	b005      	add	sp, #20
 8008ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba6:	f843 2b04 	str.w	r2, [r3], #4
 8008baa:	e7db      	b.n	8008b64 <__multiply+0x50>
 8008bac:	f8b3 a000 	ldrh.w	sl, [r3]
 8008bb0:	f1ba 0f00 	cmp.w	sl, #0
 8008bb4:	d020      	beq.n	8008bf8 <__multiply+0xe4>
 8008bb6:	f105 0e14 	add.w	lr, r5, #20
 8008bba:	46b1      	mov	r9, r6
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008bc2:	f8d9 b000 	ldr.w	fp, [r9]
 8008bc6:	b2a1      	uxth	r1, r4
 8008bc8:	fa1f fb8b 	uxth.w	fp, fp
 8008bcc:	fb0a b101 	mla	r1, sl, r1, fp
 8008bd0:	4411      	add	r1, r2
 8008bd2:	f8d9 2000 	ldr.w	r2, [r9]
 8008bd6:	0c24      	lsrs	r4, r4, #16
 8008bd8:	0c12      	lsrs	r2, r2, #16
 8008bda:	fb0a 2404 	mla	r4, sl, r4, r2
 8008bde:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008be2:	b289      	uxth	r1, r1
 8008be4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008be8:	45f4      	cmp	ip, lr
 8008bea:	f849 1b04 	str.w	r1, [r9], #4
 8008bee:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008bf2:	d8e4      	bhi.n	8008bbe <__multiply+0xaa>
 8008bf4:	9901      	ldr	r1, [sp, #4]
 8008bf6:	5072      	str	r2, [r6, r1]
 8008bf8:	9a03      	ldr	r2, [sp, #12]
 8008bfa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008bfe:	3304      	adds	r3, #4
 8008c00:	f1b9 0f00 	cmp.w	r9, #0
 8008c04:	d01f      	beq.n	8008c46 <__multiply+0x132>
 8008c06:	6834      	ldr	r4, [r6, #0]
 8008c08:	f105 0114 	add.w	r1, r5, #20
 8008c0c:	46b6      	mov	lr, r6
 8008c0e:	f04f 0a00 	mov.w	sl, #0
 8008c12:	880a      	ldrh	r2, [r1, #0]
 8008c14:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008c18:	fb09 b202 	mla	r2, r9, r2, fp
 8008c1c:	4492      	add	sl, r2
 8008c1e:	b2a4      	uxth	r4, r4
 8008c20:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008c24:	f84e 4b04 	str.w	r4, [lr], #4
 8008c28:	f851 4b04 	ldr.w	r4, [r1], #4
 8008c2c:	f8be 2000 	ldrh.w	r2, [lr]
 8008c30:	0c24      	lsrs	r4, r4, #16
 8008c32:	fb09 2404 	mla	r4, r9, r4, r2
 8008c36:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008c3a:	458c      	cmp	ip, r1
 8008c3c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008c40:	d8e7      	bhi.n	8008c12 <__multiply+0xfe>
 8008c42:	9a01      	ldr	r2, [sp, #4]
 8008c44:	50b4      	str	r4, [r6, r2]
 8008c46:	3604      	adds	r6, #4
 8008c48:	e7a3      	b.n	8008b92 <__multiply+0x7e>
 8008c4a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1a5      	bne.n	8008b9e <__multiply+0x8a>
 8008c52:	3f01      	subs	r7, #1
 8008c54:	e7a1      	b.n	8008b9a <__multiply+0x86>
 8008c56:	bf00      	nop
 8008c58:	08009bef 	.word	0x08009bef
 8008c5c:	08009c60 	.word	0x08009c60

08008c60 <__pow5mult>:
 8008c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c64:	4615      	mov	r5, r2
 8008c66:	f012 0203 	ands.w	r2, r2, #3
 8008c6a:	4606      	mov	r6, r0
 8008c6c:	460f      	mov	r7, r1
 8008c6e:	d007      	beq.n	8008c80 <__pow5mult+0x20>
 8008c70:	4c25      	ldr	r4, [pc, #148]	; (8008d08 <__pow5mult+0xa8>)
 8008c72:	3a01      	subs	r2, #1
 8008c74:	2300      	movs	r3, #0
 8008c76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c7a:	f7ff fe9b 	bl	80089b4 <__multadd>
 8008c7e:	4607      	mov	r7, r0
 8008c80:	10ad      	asrs	r5, r5, #2
 8008c82:	d03d      	beq.n	8008d00 <__pow5mult+0xa0>
 8008c84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008c86:	b97c      	cbnz	r4, 8008ca8 <__pow5mult+0x48>
 8008c88:	2010      	movs	r0, #16
 8008c8a:	f7ff fe1b 	bl	80088c4 <malloc>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	6270      	str	r0, [r6, #36]	; 0x24
 8008c92:	b928      	cbnz	r0, 8008ca0 <__pow5mult+0x40>
 8008c94:	4b1d      	ldr	r3, [pc, #116]	; (8008d0c <__pow5mult+0xac>)
 8008c96:	481e      	ldr	r0, [pc, #120]	; (8008d10 <__pow5mult+0xb0>)
 8008c98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008c9c:	f000 fce0 	bl	8009660 <__assert_func>
 8008ca0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ca4:	6004      	str	r4, [r0, #0]
 8008ca6:	60c4      	str	r4, [r0, #12]
 8008ca8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008cac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cb0:	b94c      	cbnz	r4, 8008cc6 <__pow5mult+0x66>
 8008cb2:	f240 2171 	movw	r1, #625	; 0x271
 8008cb6:	4630      	mov	r0, r6
 8008cb8:	f7ff ff16 	bl	8008ae8 <__i2b>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f8c8 0008 	str.w	r0, [r8, #8]
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	6003      	str	r3, [r0, #0]
 8008cc6:	f04f 0900 	mov.w	r9, #0
 8008cca:	07eb      	lsls	r3, r5, #31
 8008ccc:	d50a      	bpl.n	8008ce4 <__pow5mult+0x84>
 8008cce:	4639      	mov	r1, r7
 8008cd0:	4622      	mov	r2, r4
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	f7ff ff1e 	bl	8008b14 <__multiply>
 8008cd8:	4639      	mov	r1, r7
 8008cda:	4680      	mov	r8, r0
 8008cdc:	4630      	mov	r0, r6
 8008cde:	f7ff fe47 	bl	8008970 <_Bfree>
 8008ce2:	4647      	mov	r7, r8
 8008ce4:	106d      	asrs	r5, r5, #1
 8008ce6:	d00b      	beq.n	8008d00 <__pow5mult+0xa0>
 8008ce8:	6820      	ldr	r0, [r4, #0]
 8008cea:	b938      	cbnz	r0, 8008cfc <__pow5mult+0x9c>
 8008cec:	4622      	mov	r2, r4
 8008cee:	4621      	mov	r1, r4
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f7ff ff0f 	bl	8008b14 <__multiply>
 8008cf6:	6020      	str	r0, [r4, #0]
 8008cf8:	f8c0 9000 	str.w	r9, [r0]
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	e7e4      	b.n	8008cca <__pow5mult+0x6a>
 8008d00:	4638      	mov	r0, r7
 8008d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d06:	bf00      	nop
 8008d08:	08009db0 	.word	0x08009db0
 8008d0c:	08009b79 	.word	0x08009b79
 8008d10:	08009c60 	.word	0x08009c60

08008d14 <__lshift>:
 8008d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d18:	460c      	mov	r4, r1
 8008d1a:	6849      	ldr	r1, [r1, #4]
 8008d1c:	6923      	ldr	r3, [r4, #16]
 8008d1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d22:	68a3      	ldr	r3, [r4, #8]
 8008d24:	4607      	mov	r7, r0
 8008d26:	4691      	mov	r9, r2
 8008d28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d2c:	f108 0601 	add.w	r6, r8, #1
 8008d30:	42b3      	cmp	r3, r6
 8008d32:	db0b      	blt.n	8008d4c <__lshift+0x38>
 8008d34:	4638      	mov	r0, r7
 8008d36:	f7ff fddb 	bl	80088f0 <_Balloc>
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	b948      	cbnz	r0, 8008d52 <__lshift+0x3e>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	4b28      	ldr	r3, [pc, #160]	; (8008de4 <__lshift+0xd0>)
 8008d42:	4829      	ldr	r0, [pc, #164]	; (8008de8 <__lshift+0xd4>)
 8008d44:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008d48:	f000 fc8a 	bl	8009660 <__assert_func>
 8008d4c:	3101      	adds	r1, #1
 8008d4e:	005b      	lsls	r3, r3, #1
 8008d50:	e7ee      	b.n	8008d30 <__lshift+0x1c>
 8008d52:	2300      	movs	r3, #0
 8008d54:	f100 0114 	add.w	r1, r0, #20
 8008d58:	f100 0210 	add.w	r2, r0, #16
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	4553      	cmp	r3, sl
 8008d60:	db33      	blt.n	8008dca <__lshift+0xb6>
 8008d62:	6920      	ldr	r0, [r4, #16]
 8008d64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d68:	f104 0314 	add.w	r3, r4, #20
 8008d6c:	f019 091f 	ands.w	r9, r9, #31
 8008d70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d78:	d02b      	beq.n	8008dd2 <__lshift+0xbe>
 8008d7a:	f1c9 0e20 	rsb	lr, r9, #32
 8008d7e:	468a      	mov	sl, r1
 8008d80:	2200      	movs	r2, #0
 8008d82:	6818      	ldr	r0, [r3, #0]
 8008d84:	fa00 f009 	lsl.w	r0, r0, r9
 8008d88:	4302      	orrs	r2, r0
 8008d8a:	f84a 2b04 	str.w	r2, [sl], #4
 8008d8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d92:	459c      	cmp	ip, r3
 8008d94:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d98:	d8f3      	bhi.n	8008d82 <__lshift+0x6e>
 8008d9a:	ebac 0304 	sub.w	r3, ip, r4
 8008d9e:	3b15      	subs	r3, #21
 8008da0:	f023 0303 	bic.w	r3, r3, #3
 8008da4:	3304      	adds	r3, #4
 8008da6:	f104 0015 	add.w	r0, r4, #21
 8008daa:	4584      	cmp	ip, r0
 8008dac:	bf38      	it	cc
 8008dae:	2304      	movcc	r3, #4
 8008db0:	50ca      	str	r2, [r1, r3]
 8008db2:	b10a      	cbz	r2, 8008db8 <__lshift+0xa4>
 8008db4:	f108 0602 	add.w	r6, r8, #2
 8008db8:	3e01      	subs	r6, #1
 8008dba:	4638      	mov	r0, r7
 8008dbc:	612e      	str	r6, [r5, #16]
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	f7ff fdd6 	bl	8008970 <_Bfree>
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dca:	f842 0f04 	str.w	r0, [r2, #4]!
 8008dce:	3301      	adds	r3, #1
 8008dd0:	e7c5      	b.n	8008d5e <__lshift+0x4a>
 8008dd2:	3904      	subs	r1, #4
 8008dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ddc:	459c      	cmp	ip, r3
 8008dde:	d8f9      	bhi.n	8008dd4 <__lshift+0xc0>
 8008de0:	e7ea      	b.n	8008db8 <__lshift+0xa4>
 8008de2:	bf00      	nop
 8008de4:	08009bef 	.word	0x08009bef
 8008de8:	08009c60 	.word	0x08009c60

08008dec <__mcmp>:
 8008dec:	b530      	push	{r4, r5, lr}
 8008dee:	6902      	ldr	r2, [r0, #16]
 8008df0:	690c      	ldr	r4, [r1, #16]
 8008df2:	1b12      	subs	r2, r2, r4
 8008df4:	d10e      	bne.n	8008e14 <__mcmp+0x28>
 8008df6:	f100 0314 	add.w	r3, r0, #20
 8008dfa:	3114      	adds	r1, #20
 8008dfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e0c:	42a5      	cmp	r5, r4
 8008e0e:	d003      	beq.n	8008e18 <__mcmp+0x2c>
 8008e10:	d305      	bcc.n	8008e1e <__mcmp+0x32>
 8008e12:	2201      	movs	r2, #1
 8008e14:	4610      	mov	r0, r2
 8008e16:	bd30      	pop	{r4, r5, pc}
 8008e18:	4283      	cmp	r3, r0
 8008e1a:	d3f3      	bcc.n	8008e04 <__mcmp+0x18>
 8008e1c:	e7fa      	b.n	8008e14 <__mcmp+0x28>
 8008e1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e22:	e7f7      	b.n	8008e14 <__mcmp+0x28>

08008e24 <__mdiff>:
 8008e24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e28:	460c      	mov	r4, r1
 8008e2a:	4606      	mov	r6, r0
 8008e2c:	4611      	mov	r1, r2
 8008e2e:	4620      	mov	r0, r4
 8008e30:	4617      	mov	r7, r2
 8008e32:	f7ff ffdb 	bl	8008dec <__mcmp>
 8008e36:	1e05      	subs	r5, r0, #0
 8008e38:	d110      	bne.n	8008e5c <__mdiff+0x38>
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	f7ff fd57 	bl	80088f0 <_Balloc>
 8008e42:	b930      	cbnz	r0, 8008e52 <__mdiff+0x2e>
 8008e44:	4b39      	ldr	r3, [pc, #228]	; (8008f2c <__mdiff+0x108>)
 8008e46:	4602      	mov	r2, r0
 8008e48:	f240 2132 	movw	r1, #562	; 0x232
 8008e4c:	4838      	ldr	r0, [pc, #224]	; (8008f30 <__mdiff+0x10c>)
 8008e4e:	f000 fc07 	bl	8009660 <__assert_func>
 8008e52:	2301      	movs	r3, #1
 8008e54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e5c:	bfa4      	itt	ge
 8008e5e:	463b      	movge	r3, r7
 8008e60:	4627      	movge	r7, r4
 8008e62:	4630      	mov	r0, r6
 8008e64:	6879      	ldr	r1, [r7, #4]
 8008e66:	bfa6      	itte	ge
 8008e68:	461c      	movge	r4, r3
 8008e6a:	2500      	movge	r5, #0
 8008e6c:	2501      	movlt	r5, #1
 8008e6e:	f7ff fd3f 	bl	80088f0 <_Balloc>
 8008e72:	b920      	cbnz	r0, 8008e7e <__mdiff+0x5a>
 8008e74:	4b2d      	ldr	r3, [pc, #180]	; (8008f2c <__mdiff+0x108>)
 8008e76:	4602      	mov	r2, r0
 8008e78:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008e7c:	e7e6      	b.n	8008e4c <__mdiff+0x28>
 8008e7e:	693e      	ldr	r6, [r7, #16]
 8008e80:	60c5      	str	r5, [r0, #12]
 8008e82:	6925      	ldr	r5, [r4, #16]
 8008e84:	f107 0114 	add.w	r1, r7, #20
 8008e88:	f104 0914 	add.w	r9, r4, #20
 8008e8c:	f100 0e14 	add.w	lr, r0, #20
 8008e90:	f107 0210 	add.w	r2, r7, #16
 8008e94:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008e98:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008e9c:	46f2      	mov	sl, lr
 8008e9e:	2700      	movs	r7, #0
 8008ea0:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ea4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ea8:	fa1f f883 	uxth.w	r8, r3
 8008eac:	fa17 f78b 	uxtah	r7, r7, fp
 8008eb0:	0c1b      	lsrs	r3, r3, #16
 8008eb2:	eba7 0808 	sub.w	r8, r7, r8
 8008eb6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008eba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008ebe:	fa1f f888 	uxth.w	r8, r8
 8008ec2:	141f      	asrs	r7, r3, #16
 8008ec4:	454d      	cmp	r5, r9
 8008ec6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008eca:	f84a 3b04 	str.w	r3, [sl], #4
 8008ece:	d8e7      	bhi.n	8008ea0 <__mdiff+0x7c>
 8008ed0:	1b2b      	subs	r3, r5, r4
 8008ed2:	3b15      	subs	r3, #21
 8008ed4:	f023 0303 	bic.w	r3, r3, #3
 8008ed8:	3304      	adds	r3, #4
 8008eda:	3415      	adds	r4, #21
 8008edc:	42a5      	cmp	r5, r4
 8008ede:	bf38      	it	cc
 8008ee0:	2304      	movcc	r3, #4
 8008ee2:	4419      	add	r1, r3
 8008ee4:	4473      	add	r3, lr
 8008ee6:	469e      	mov	lr, r3
 8008ee8:	460d      	mov	r5, r1
 8008eea:	4565      	cmp	r5, ip
 8008eec:	d30e      	bcc.n	8008f0c <__mdiff+0xe8>
 8008eee:	f10c 0203 	add.w	r2, ip, #3
 8008ef2:	1a52      	subs	r2, r2, r1
 8008ef4:	f022 0203 	bic.w	r2, r2, #3
 8008ef8:	3903      	subs	r1, #3
 8008efa:	458c      	cmp	ip, r1
 8008efc:	bf38      	it	cc
 8008efe:	2200      	movcc	r2, #0
 8008f00:	441a      	add	r2, r3
 8008f02:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008f06:	b17b      	cbz	r3, 8008f28 <__mdiff+0x104>
 8008f08:	6106      	str	r6, [r0, #16]
 8008f0a:	e7a5      	b.n	8008e58 <__mdiff+0x34>
 8008f0c:	f855 8b04 	ldr.w	r8, [r5], #4
 8008f10:	fa17 f488 	uxtah	r4, r7, r8
 8008f14:	1422      	asrs	r2, r4, #16
 8008f16:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008f1a:	b2a4      	uxth	r4, r4
 8008f1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008f20:	f84e 4b04 	str.w	r4, [lr], #4
 8008f24:	1417      	asrs	r7, r2, #16
 8008f26:	e7e0      	b.n	8008eea <__mdiff+0xc6>
 8008f28:	3e01      	subs	r6, #1
 8008f2a:	e7ea      	b.n	8008f02 <__mdiff+0xde>
 8008f2c:	08009bef 	.word	0x08009bef
 8008f30:	08009c60 	.word	0x08009c60

08008f34 <__d2b>:
 8008f34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f38:	4689      	mov	r9, r1
 8008f3a:	2101      	movs	r1, #1
 8008f3c:	ec57 6b10 	vmov	r6, r7, d0
 8008f40:	4690      	mov	r8, r2
 8008f42:	f7ff fcd5 	bl	80088f0 <_Balloc>
 8008f46:	4604      	mov	r4, r0
 8008f48:	b930      	cbnz	r0, 8008f58 <__d2b+0x24>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	4b25      	ldr	r3, [pc, #148]	; (8008fe4 <__d2b+0xb0>)
 8008f4e:	4826      	ldr	r0, [pc, #152]	; (8008fe8 <__d2b+0xb4>)
 8008f50:	f240 310a 	movw	r1, #778	; 0x30a
 8008f54:	f000 fb84 	bl	8009660 <__assert_func>
 8008f58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008f5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f60:	bb35      	cbnz	r5, 8008fb0 <__d2b+0x7c>
 8008f62:	2e00      	cmp	r6, #0
 8008f64:	9301      	str	r3, [sp, #4]
 8008f66:	d028      	beq.n	8008fba <__d2b+0x86>
 8008f68:	4668      	mov	r0, sp
 8008f6a:	9600      	str	r6, [sp, #0]
 8008f6c:	f7ff fd8c 	bl	8008a88 <__lo0bits>
 8008f70:	9900      	ldr	r1, [sp, #0]
 8008f72:	b300      	cbz	r0, 8008fb6 <__d2b+0x82>
 8008f74:	9a01      	ldr	r2, [sp, #4]
 8008f76:	f1c0 0320 	rsb	r3, r0, #32
 8008f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f7e:	430b      	orrs	r3, r1
 8008f80:	40c2      	lsrs	r2, r0
 8008f82:	6163      	str	r3, [r4, #20]
 8008f84:	9201      	str	r2, [sp, #4]
 8008f86:	9b01      	ldr	r3, [sp, #4]
 8008f88:	61a3      	str	r3, [r4, #24]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	bf14      	ite	ne
 8008f8e:	2202      	movne	r2, #2
 8008f90:	2201      	moveq	r2, #1
 8008f92:	6122      	str	r2, [r4, #16]
 8008f94:	b1d5      	cbz	r5, 8008fcc <__d2b+0x98>
 8008f96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f9a:	4405      	add	r5, r0
 8008f9c:	f8c9 5000 	str.w	r5, [r9]
 8008fa0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008fa4:	f8c8 0000 	str.w	r0, [r8]
 8008fa8:	4620      	mov	r0, r4
 8008faa:	b003      	add	sp, #12
 8008fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fb4:	e7d5      	b.n	8008f62 <__d2b+0x2e>
 8008fb6:	6161      	str	r1, [r4, #20]
 8008fb8:	e7e5      	b.n	8008f86 <__d2b+0x52>
 8008fba:	a801      	add	r0, sp, #4
 8008fbc:	f7ff fd64 	bl	8008a88 <__lo0bits>
 8008fc0:	9b01      	ldr	r3, [sp, #4]
 8008fc2:	6163      	str	r3, [r4, #20]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	6122      	str	r2, [r4, #16]
 8008fc8:	3020      	adds	r0, #32
 8008fca:	e7e3      	b.n	8008f94 <__d2b+0x60>
 8008fcc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008fd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008fd4:	f8c9 0000 	str.w	r0, [r9]
 8008fd8:	6918      	ldr	r0, [r3, #16]
 8008fda:	f7ff fd35 	bl	8008a48 <__hi0bits>
 8008fde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008fe2:	e7df      	b.n	8008fa4 <__d2b+0x70>
 8008fe4:	08009bef 	.word	0x08009bef
 8008fe8:	08009c60 	.word	0x08009c60

08008fec <_calloc_r>:
 8008fec:	b513      	push	{r0, r1, r4, lr}
 8008fee:	434a      	muls	r2, r1
 8008ff0:	4611      	mov	r1, r2
 8008ff2:	9201      	str	r2, [sp, #4]
 8008ff4:	f000 f85a 	bl	80090ac <_malloc_r>
 8008ff8:	4604      	mov	r4, r0
 8008ffa:	b118      	cbz	r0, 8009004 <_calloc_r+0x18>
 8008ffc:	9a01      	ldr	r2, [sp, #4]
 8008ffe:	2100      	movs	r1, #0
 8009000:	f7fe f860 	bl	80070c4 <memset>
 8009004:	4620      	mov	r0, r4
 8009006:	b002      	add	sp, #8
 8009008:	bd10      	pop	{r4, pc}
	...

0800900c <_free_r>:
 800900c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800900e:	2900      	cmp	r1, #0
 8009010:	d048      	beq.n	80090a4 <_free_r+0x98>
 8009012:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009016:	9001      	str	r0, [sp, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	f1a1 0404 	sub.w	r4, r1, #4
 800901e:	bfb8      	it	lt
 8009020:	18e4      	addlt	r4, r4, r3
 8009022:	f000 fca7 	bl	8009974 <__malloc_lock>
 8009026:	4a20      	ldr	r2, [pc, #128]	; (80090a8 <_free_r+0x9c>)
 8009028:	9801      	ldr	r0, [sp, #4]
 800902a:	6813      	ldr	r3, [r2, #0]
 800902c:	4615      	mov	r5, r2
 800902e:	b933      	cbnz	r3, 800903e <_free_r+0x32>
 8009030:	6063      	str	r3, [r4, #4]
 8009032:	6014      	str	r4, [r2, #0]
 8009034:	b003      	add	sp, #12
 8009036:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800903a:	f000 bca1 	b.w	8009980 <__malloc_unlock>
 800903e:	42a3      	cmp	r3, r4
 8009040:	d90b      	bls.n	800905a <_free_r+0x4e>
 8009042:	6821      	ldr	r1, [r4, #0]
 8009044:	1862      	adds	r2, r4, r1
 8009046:	4293      	cmp	r3, r2
 8009048:	bf04      	itt	eq
 800904a:	681a      	ldreq	r2, [r3, #0]
 800904c:	685b      	ldreq	r3, [r3, #4]
 800904e:	6063      	str	r3, [r4, #4]
 8009050:	bf04      	itt	eq
 8009052:	1852      	addeq	r2, r2, r1
 8009054:	6022      	streq	r2, [r4, #0]
 8009056:	602c      	str	r4, [r5, #0]
 8009058:	e7ec      	b.n	8009034 <_free_r+0x28>
 800905a:	461a      	mov	r2, r3
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	b10b      	cbz	r3, 8009064 <_free_r+0x58>
 8009060:	42a3      	cmp	r3, r4
 8009062:	d9fa      	bls.n	800905a <_free_r+0x4e>
 8009064:	6811      	ldr	r1, [r2, #0]
 8009066:	1855      	adds	r5, r2, r1
 8009068:	42a5      	cmp	r5, r4
 800906a:	d10b      	bne.n	8009084 <_free_r+0x78>
 800906c:	6824      	ldr	r4, [r4, #0]
 800906e:	4421      	add	r1, r4
 8009070:	1854      	adds	r4, r2, r1
 8009072:	42a3      	cmp	r3, r4
 8009074:	6011      	str	r1, [r2, #0]
 8009076:	d1dd      	bne.n	8009034 <_free_r+0x28>
 8009078:	681c      	ldr	r4, [r3, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	6053      	str	r3, [r2, #4]
 800907e:	4421      	add	r1, r4
 8009080:	6011      	str	r1, [r2, #0]
 8009082:	e7d7      	b.n	8009034 <_free_r+0x28>
 8009084:	d902      	bls.n	800908c <_free_r+0x80>
 8009086:	230c      	movs	r3, #12
 8009088:	6003      	str	r3, [r0, #0]
 800908a:	e7d3      	b.n	8009034 <_free_r+0x28>
 800908c:	6825      	ldr	r5, [r4, #0]
 800908e:	1961      	adds	r1, r4, r5
 8009090:	428b      	cmp	r3, r1
 8009092:	bf04      	itt	eq
 8009094:	6819      	ldreq	r1, [r3, #0]
 8009096:	685b      	ldreq	r3, [r3, #4]
 8009098:	6063      	str	r3, [r4, #4]
 800909a:	bf04      	itt	eq
 800909c:	1949      	addeq	r1, r1, r5
 800909e:	6021      	streq	r1, [r4, #0]
 80090a0:	6054      	str	r4, [r2, #4]
 80090a2:	e7c7      	b.n	8009034 <_free_r+0x28>
 80090a4:	b003      	add	sp, #12
 80090a6:	bd30      	pop	{r4, r5, pc}
 80090a8:	2000020c 	.word	0x2000020c

080090ac <_malloc_r>:
 80090ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ae:	1ccd      	adds	r5, r1, #3
 80090b0:	f025 0503 	bic.w	r5, r5, #3
 80090b4:	3508      	adds	r5, #8
 80090b6:	2d0c      	cmp	r5, #12
 80090b8:	bf38      	it	cc
 80090ba:	250c      	movcc	r5, #12
 80090bc:	2d00      	cmp	r5, #0
 80090be:	4606      	mov	r6, r0
 80090c0:	db01      	blt.n	80090c6 <_malloc_r+0x1a>
 80090c2:	42a9      	cmp	r1, r5
 80090c4:	d903      	bls.n	80090ce <_malloc_r+0x22>
 80090c6:	230c      	movs	r3, #12
 80090c8:	6033      	str	r3, [r6, #0]
 80090ca:	2000      	movs	r0, #0
 80090cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090ce:	f000 fc51 	bl	8009974 <__malloc_lock>
 80090d2:	4921      	ldr	r1, [pc, #132]	; (8009158 <_malloc_r+0xac>)
 80090d4:	680a      	ldr	r2, [r1, #0]
 80090d6:	4614      	mov	r4, r2
 80090d8:	b99c      	cbnz	r4, 8009102 <_malloc_r+0x56>
 80090da:	4f20      	ldr	r7, [pc, #128]	; (800915c <_malloc_r+0xb0>)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	b923      	cbnz	r3, 80090ea <_malloc_r+0x3e>
 80090e0:	4621      	mov	r1, r4
 80090e2:	4630      	mov	r0, r6
 80090e4:	f000 f996 	bl	8009414 <_sbrk_r>
 80090e8:	6038      	str	r0, [r7, #0]
 80090ea:	4629      	mov	r1, r5
 80090ec:	4630      	mov	r0, r6
 80090ee:	f000 f991 	bl	8009414 <_sbrk_r>
 80090f2:	1c43      	adds	r3, r0, #1
 80090f4:	d123      	bne.n	800913e <_malloc_r+0x92>
 80090f6:	230c      	movs	r3, #12
 80090f8:	6033      	str	r3, [r6, #0]
 80090fa:	4630      	mov	r0, r6
 80090fc:	f000 fc40 	bl	8009980 <__malloc_unlock>
 8009100:	e7e3      	b.n	80090ca <_malloc_r+0x1e>
 8009102:	6823      	ldr	r3, [r4, #0]
 8009104:	1b5b      	subs	r3, r3, r5
 8009106:	d417      	bmi.n	8009138 <_malloc_r+0x8c>
 8009108:	2b0b      	cmp	r3, #11
 800910a:	d903      	bls.n	8009114 <_malloc_r+0x68>
 800910c:	6023      	str	r3, [r4, #0]
 800910e:	441c      	add	r4, r3
 8009110:	6025      	str	r5, [r4, #0]
 8009112:	e004      	b.n	800911e <_malloc_r+0x72>
 8009114:	6863      	ldr	r3, [r4, #4]
 8009116:	42a2      	cmp	r2, r4
 8009118:	bf0c      	ite	eq
 800911a:	600b      	streq	r3, [r1, #0]
 800911c:	6053      	strne	r3, [r2, #4]
 800911e:	4630      	mov	r0, r6
 8009120:	f000 fc2e 	bl	8009980 <__malloc_unlock>
 8009124:	f104 000b 	add.w	r0, r4, #11
 8009128:	1d23      	adds	r3, r4, #4
 800912a:	f020 0007 	bic.w	r0, r0, #7
 800912e:	1ac2      	subs	r2, r0, r3
 8009130:	d0cc      	beq.n	80090cc <_malloc_r+0x20>
 8009132:	1a1b      	subs	r3, r3, r0
 8009134:	50a3      	str	r3, [r4, r2]
 8009136:	e7c9      	b.n	80090cc <_malloc_r+0x20>
 8009138:	4622      	mov	r2, r4
 800913a:	6864      	ldr	r4, [r4, #4]
 800913c:	e7cc      	b.n	80090d8 <_malloc_r+0x2c>
 800913e:	1cc4      	adds	r4, r0, #3
 8009140:	f024 0403 	bic.w	r4, r4, #3
 8009144:	42a0      	cmp	r0, r4
 8009146:	d0e3      	beq.n	8009110 <_malloc_r+0x64>
 8009148:	1a21      	subs	r1, r4, r0
 800914a:	4630      	mov	r0, r6
 800914c:	f000 f962 	bl	8009414 <_sbrk_r>
 8009150:	3001      	adds	r0, #1
 8009152:	d1dd      	bne.n	8009110 <_malloc_r+0x64>
 8009154:	e7cf      	b.n	80090f6 <_malloc_r+0x4a>
 8009156:	bf00      	nop
 8009158:	2000020c 	.word	0x2000020c
 800915c:	20000210 	.word	0x20000210

08009160 <__sfputc_r>:
 8009160:	6893      	ldr	r3, [r2, #8]
 8009162:	3b01      	subs	r3, #1
 8009164:	2b00      	cmp	r3, #0
 8009166:	b410      	push	{r4}
 8009168:	6093      	str	r3, [r2, #8]
 800916a:	da08      	bge.n	800917e <__sfputc_r+0x1e>
 800916c:	6994      	ldr	r4, [r2, #24]
 800916e:	42a3      	cmp	r3, r4
 8009170:	db01      	blt.n	8009176 <__sfputc_r+0x16>
 8009172:	290a      	cmp	r1, #10
 8009174:	d103      	bne.n	800917e <__sfputc_r+0x1e>
 8009176:	f85d 4b04 	ldr.w	r4, [sp], #4
 800917a:	f000 b99f 	b.w	80094bc <__swbuf_r>
 800917e:	6813      	ldr	r3, [r2, #0]
 8009180:	1c58      	adds	r0, r3, #1
 8009182:	6010      	str	r0, [r2, #0]
 8009184:	7019      	strb	r1, [r3, #0]
 8009186:	4608      	mov	r0, r1
 8009188:	f85d 4b04 	ldr.w	r4, [sp], #4
 800918c:	4770      	bx	lr

0800918e <__sfputs_r>:
 800918e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009190:	4606      	mov	r6, r0
 8009192:	460f      	mov	r7, r1
 8009194:	4614      	mov	r4, r2
 8009196:	18d5      	adds	r5, r2, r3
 8009198:	42ac      	cmp	r4, r5
 800919a:	d101      	bne.n	80091a0 <__sfputs_r+0x12>
 800919c:	2000      	movs	r0, #0
 800919e:	e007      	b.n	80091b0 <__sfputs_r+0x22>
 80091a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a4:	463a      	mov	r2, r7
 80091a6:	4630      	mov	r0, r6
 80091a8:	f7ff ffda 	bl	8009160 <__sfputc_r>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	d1f3      	bne.n	8009198 <__sfputs_r+0xa>
 80091b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091b4 <_vfiprintf_r>:
 80091b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b8:	460d      	mov	r5, r1
 80091ba:	b09d      	sub	sp, #116	; 0x74
 80091bc:	4614      	mov	r4, r2
 80091be:	4698      	mov	r8, r3
 80091c0:	4606      	mov	r6, r0
 80091c2:	b118      	cbz	r0, 80091cc <_vfiprintf_r+0x18>
 80091c4:	6983      	ldr	r3, [r0, #24]
 80091c6:	b90b      	cbnz	r3, 80091cc <_vfiprintf_r+0x18>
 80091c8:	f7ff fad6 	bl	8008778 <__sinit>
 80091cc:	4b89      	ldr	r3, [pc, #548]	; (80093f4 <_vfiprintf_r+0x240>)
 80091ce:	429d      	cmp	r5, r3
 80091d0:	d11b      	bne.n	800920a <_vfiprintf_r+0x56>
 80091d2:	6875      	ldr	r5, [r6, #4]
 80091d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091d6:	07d9      	lsls	r1, r3, #31
 80091d8:	d405      	bmi.n	80091e6 <_vfiprintf_r+0x32>
 80091da:	89ab      	ldrh	r3, [r5, #12]
 80091dc:	059a      	lsls	r2, r3, #22
 80091de:	d402      	bmi.n	80091e6 <_vfiprintf_r+0x32>
 80091e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091e2:	f7ff fb6c 	bl	80088be <__retarget_lock_acquire_recursive>
 80091e6:	89ab      	ldrh	r3, [r5, #12]
 80091e8:	071b      	lsls	r3, r3, #28
 80091ea:	d501      	bpl.n	80091f0 <_vfiprintf_r+0x3c>
 80091ec:	692b      	ldr	r3, [r5, #16]
 80091ee:	b9eb      	cbnz	r3, 800922c <_vfiprintf_r+0x78>
 80091f0:	4629      	mov	r1, r5
 80091f2:	4630      	mov	r0, r6
 80091f4:	f000 f9c6 	bl	8009584 <__swsetup_r>
 80091f8:	b1c0      	cbz	r0, 800922c <_vfiprintf_r+0x78>
 80091fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091fc:	07dc      	lsls	r4, r3, #31
 80091fe:	d50e      	bpl.n	800921e <_vfiprintf_r+0x6a>
 8009200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009204:	b01d      	add	sp, #116	; 0x74
 8009206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800920a:	4b7b      	ldr	r3, [pc, #492]	; (80093f8 <_vfiprintf_r+0x244>)
 800920c:	429d      	cmp	r5, r3
 800920e:	d101      	bne.n	8009214 <_vfiprintf_r+0x60>
 8009210:	68b5      	ldr	r5, [r6, #8]
 8009212:	e7df      	b.n	80091d4 <_vfiprintf_r+0x20>
 8009214:	4b79      	ldr	r3, [pc, #484]	; (80093fc <_vfiprintf_r+0x248>)
 8009216:	429d      	cmp	r5, r3
 8009218:	bf08      	it	eq
 800921a:	68f5      	ldreq	r5, [r6, #12]
 800921c:	e7da      	b.n	80091d4 <_vfiprintf_r+0x20>
 800921e:	89ab      	ldrh	r3, [r5, #12]
 8009220:	0598      	lsls	r0, r3, #22
 8009222:	d4ed      	bmi.n	8009200 <_vfiprintf_r+0x4c>
 8009224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009226:	f7ff fb4b 	bl	80088c0 <__retarget_lock_release_recursive>
 800922a:	e7e9      	b.n	8009200 <_vfiprintf_r+0x4c>
 800922c:	2300      	movs	r3, #0
 800922e:	9309      	str	r3, [sp, #36]	; 0x24
 8009230:	2320      	movs	r3, #32
 8009232:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009236:	f8cd 800c 	str.w	r8, [sp, #12]
 800923a:	2330      	movs	r3, #48	; 0x30
 800923c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009400 <_vfiprintf_r+0x24c>
 8009240:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009244:	f04f 0901 	mov.w	r9, #1
 8009248:	4623      	mov	r3, r4
 800924a:	469a      	mov	sl, r3
 800924c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009250:	b10a      	cbz	r2, 8009256 <_vfiprintf_r+0xa2>
 8009252:	2a25      	cmp	r2, #37	; 0x25
 8009254:	d1f9      	bne.n	800924a <_vfiprintf_r+0x96>
 8009256:	ebba 0b04 	subs.w	fp, sl, r4
 800925a:	d00b      	beq.n	8009274 <_vfiprintf_r+0xc0>
 800925c:	465b      	mov	r3, fp
 800925e:	4622      	mov	r2, r4
 8009260:	4629      	mov	r1, r5
 8009262:	4630      	mov	r0, r6
 8009264:	f7ff ff93 	bl	800918e <__sfputs_r>
 8009268:	3001      	adds	r0, #1
 800926a:	f000 80aa 	beq.w	80093c2 <_vfiprintf_r+0x20e>
 800926e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009270:	445a      	add	r2, fp
 8009272:	9209      	str	r2, [sp, #36]	; 0x24
 8009274:	f89a 3000 	ldrb.w	r3, [sl]
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 80a2 	beq.w	80093c2 <_vfiprintf_r+0x20e>
 800927e:	2300      	movs	r3, #0
 8009280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009284:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009288:	f10a 0a01 	add.w	sl, sl, #1
 800928c:	9304      	str	r3, [sp, #16]
 800928e:	9307      	str	r3, [sp, #28]
 8009290:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009294:	931a      	str	r3, [sp, #104]	; 0x68
 8009296:	4654      	mov	r4, sl
 8009298:	2205      	movs	r2, #5
 800929a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800929e:	4858      	ldr	r0, [pc, #352]	; (8009400 <_vfiprintf_r+0x24c>)
 80092a0:	f7f6 ff9e 	bl	80001e0 <memchr>
 80092a4:	9a04      	ldr	r2, [sp, #16]
 80092a6:	b9d8      	cbnz	r0, 80092e0 <_vfiprintf_r+0x12c>
 80092a8:	06d1      	lsls	r1, r2, #27
 80092aa:	bf44      	itt	mi
 80092ac:	2320      	movmi	r3, #32
 80092ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092b2:	0713      	lsls	r3, r2, #28
 80092b4:	bf44      	itt	mi
 80092b6:	232b      	movmi	r3, #43	; 0x2b
 80092b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092bc:	f89a 3000 	ldrb.w	r3, [sl]
 80092c0:	2b2a      	cmp	r3, #42	; 0x2a
 80092c2:	d015      	beq.n	80092f0 <_vfiprintf_r+0x13c>
 80092c4:	9a07      	ldr	r2, [sp, #28]
 80092c6:	4654      	mov	r4, sl
 80092c8:	2000      	movs	r0, #0
 80092ca:	f04f 0c0a 	mov.w	ip, #10
 80092ce:	4621      	mov	r1, r4
 80092d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092d4:	3b30      	subs	r3, #48	; 0x30
 80092d6:	2b09      	cmp	r3, #9
 80092d8:	d94e      	bls.n	8009378 <_vfiprintf_r+0x1c4>
 80092da:	b1b0      	cbz	r0, 800930a <_vfiprintf_r+0x156>
 80092dc:	9207      	str	r2, [sp, #28]
 80092de:	e014      	b.n	800930a <_vfiprintf_r+0x156>
 80092e0:	eba0 0308 	sub.w	r3, r0, r8
 80092e4:	fa09 f303 	lsl.w	r3, r9, r3
 80092e8:	4313      	orrs	r3, r2
 80092ea:	9304      	str	r3, [sp, #16]
 80092ec:	46a2      	mov	sl, r4
 80092ee:	e7d2      	b.n	8009296 <_vfiprintf_r+0xe2>
 80092f0:	9b03      	ldr	r3, [sp, #12]
 80092f2:	1d19      	adds	r1, r3, #4
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	9103      	str	r1, [sp, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	bfbb      	ittet	lt
 80092fc:	425b      	neglt	r3, r3
 80092fe:	f042 0202 	orrlt.w	r2, r2, #2
 8009302:	9307      	strge	r3, [sp, #28]
 8009304:	9307      	strlt	r3, [sp, #28]
 8009306:	bfb8      	it	lt
 8009308:	9204      	strlt	r2, [sp, #16]
 800930a:	7823      	ldrb	r3, [r4, #0]
 800930c:	2b2e      	cmp	r3, #46	; 0x2e
 800930e:	d10c      	bne.n	800932a <_vfiprintf_r+0x176>
 8009310:	7863      	ldrb	r3, [r4, #1]
 8009312:	2b2a      	cmp	r3, #42	; 0x2a
 8009314:	d135      	bne.n	8009382 <_vfiprintf_r+0x1ce>
 8009316:	9b03      	ldr	r3, [sp, #12]
 8009318:	1d1a      	adds	r2, r3, #4
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	9203      	str	r2, [sp, #12]
 800931e:	2b00      	cmp	r3, #0
 8009320:	bfb8      	it	lt
 8009322:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009326:	3402      	adds	r4, #2
 8009328:	9305      	str	r3, [sp, #20]
 800932a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009410 <_vfiprintf_r+0x25c>
 800932e:	7821      	ldrb	r1, [r4, #0]
 8009330:	2203      	movs	r2, #3
 8009332:	4650      	mov	r0, sl
 8009334:	f7f6 ff54 	bl	80001e0 <memchr>
 8009338:	b140      	cbz	r0, 800934c <_vfiprintf_r+0x198>
 800933a:	2340      	movs	r3, #64	; 0x40
 800933c:	eba0 000a 	sub.w	r0, r0, sl
 8009340:	fa03 f000 	lsl.w	r0, r3, r0
 8009344:	9b04      	ldr	r3, [sp, #16]
 8009346:	4303      	orrs	r3, r0
 8009348:	3401      	adds	r4, #1
 800934a:	9304      	str	r3, [sp, #16]
 800934c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009350:	482c      	ldr	r0, [pc, #176]	; (8009404 <_vfiprintf_r+0x250>)
 8009352:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009356:	2206      	movs	r2, #6
 8009358:	f7f6 ff42 	bl	80001e0 <memchr>
 800935c:	2800      	cmp	r0, #0
 800935e:	d03f      	beq.n	80093e0 <_vfiprintf_r+0x22c>
 8009360:	4b29      	ldr	r3, [pc, #164]	; (8009408 <_vfiprintf_r+0x254>)
 8009362:	bb1b      	cbnz	r3, 80093ac <_vfiprintf_r+0x1f8>
 8009364:	9b03      	ldr	r3, [sp, #12]
 8009366:	3307      	adds	r3, #7
 8009368:	f023 0307 	bic.w	r3, r3, #7
 800936c:	3308      	adds	r3, #8
 800936e:	9303      	str	r3, [sp, #12]
 8009370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009372:	443b      	add	r3, r7
 8009374:	9309      	str	r3, [sp, #36]	; 0x24
 8009376:	e767      	b.n	8009248 <_vfiprintf_r+0x94>
 8009378:	fb0c 3202 	mla	r2, ip, r2, r3
 800937c:	460c      	mov	r4, r1
 800937e:	2001      	movs	r0, #1
 8009380:	e7a5      	b.n	80092ce <_vfiprintf_r+0x11a>
 8009382:	2300      	movs	r3, #0
 8009384:	3401      	adds	r4, #1
 8009386:	9305      	str	r3, [sp, #20]
 8009388:	4619      	mov	r1, r3
 800938a:	f04f 0c0a 	mov.w	ip, #10
 800938e:	4620      	mov	r0, r4
 8009390:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009394:	3a30      	subs	r2, #48	; 0x30
 8009396:	2a09      	cmp	r2, #9
 8009398:	d903      	bls.n	80093a2 <_vfiprintf_r+0x1ee>
 800939a:	2b00      	cmp	r3, #0
 800939c:	d0c5      	beq.n	800932a <_vfiprintf_r+0x176>
 800939e:	9105      	str	r1, [sp, #20]
 80093a0:	e7c3      	b.n	800932a <_vfiprintf_r+0x176>
 80093a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80093a6:	4604      	mov	r4, r0
 80093a8:	2301      	movs	r3, #1
 80093aa:	e7f0      	b.n	800938e <_vfiprintf_r+0x1da>
 80093ac:	ab03      	add	r3, sp, #12
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	462a      	mov	r2, r5
 80093b2:	4b16      	ldr	r3, [pc, #88]	; (800940c <_vfiprintf_r+0x258>)
 80093b4:	a904      	add	r1, sp, #16
 80093b6:	4630      	mov	r0, r6
 80093b8:	f7fd ff2c 	bl	8007214 <_printf_float>
 80093bc:	4607      	mov	r7, r0
 80093be:	1c78      	adds	r0, r7, #1
 80093c0:	d1d6      	bne.n	8009370 <_vfiprintf_r+0x1bc>
 80093c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093c4:	07d9      	lsls	r1, r3, #31
 80093c6:	d405      	bmi.n	80093d4 <_vfiprintf_r+0x220>
 80093c8:	89ab      	ldrh	r3, [r5, #12]
 80093ca:	059a      	lsls	r2, r3, #22
 80093cc:	d402      	bmi.n	80093d4 <_vfiprintf_r+0x220>
 80093ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093d0:	f7ff fa76 	bl	80088c0 <__retarget_lock_release_recursive>
 80093d4:	89ab      	ldrh	r3, [r5, #12]
 80093d6:	065b      	lsls	r3, r3, #25
 80093d8:	f53f af12 	bmi.w	8009200 <_vfiprintf_r+0x4c>
 80093dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093de:	e711      	b.n	8009204 <_vfiprintf_r+0x50>
 80093e0:	ab03      	add	r3, sp, #12
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	462a      	mov	r2, r5
 80093e6:	4b09      	ldr	r3, [pc, #36]	; (800940c <_vfiprintf_r+0x258>)
 80093e8:	a904      	add	r1, sp, #16
 80093ea:	4630      	mov	r0, r6
 80093ec:	f7fe f9b6 	bl	800775c <_printf_i>
 80093f0:	e7e4      	b.n	80093bc <_vfiprintf_r+0x208>
 80093f2:	bf00      	nop
 80093f4:	08009c20 	.word	0x08009c20
 80093f8:	08009c40 	.word	0x08009c40
 80093fc:	08009c00 	.word	0x08009c00
 8009400:	08009dbc 	.word	0x08009dbc
 8009404:	08009dc6 	.word	0x08009dc6
 8009408:	08007215 	.word	0x08007215
 800940c:	0800918f 	.word	0x0800918f
 8009410:	08009dc2 	.word	0x08009dc2

08009414 <_sbrk_r>:
 8009414:	b538      	push	{r3, r4, r5, lr}
 8009416:	4d06      	ldr	r5, [pc, #24]	; (8009430 <_sbrk_r+0x1c>)
 8009418:	2300      	movs	r3, #0
 800941a:	4604      	mov	r4, r0
 800941c:	4608      	mov	r0, r1
 800941e:	602b      	str	r3, [r5, #0]
 8009420:	f7f8 f9a0 	bl	8001764 <_sbrk>
 8009424:	1c43      	adds	r3, r0, #1
 8009426:	d102      	bne.n	800942e <_sbrk_r+0x1a>
 8009428:	682b      	ldr	r3, [r5, #0]
 800942a:	b103      	cbz	r3, 800942e <_sbrk_r+0x1a>
 800942c:	6023      	str	r3, [r4, #0]
 800942e:	bd38      	pop	{r3, r4, r5, pc}
 8009430:	2000044c 	.word	0x2000044c

08009434 <__sread>:
 8009434:	b510      	push	{r4, lr}
 8009436:	460c      	mov	r4, r1
 8009438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800943c:	f000 faa6 	bl	800998c <_read_r>
 8009440:	2800      	cmp	r0, #0
 8009442:	bfab      	itete	ge
 8009444:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009446:	89a3      	ldrhlt	r3, [r4, #12]
 8009448:	181b      	addge	r3, r3, r0
 800944a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800944e:	bfac      	ite	ge
 8009450:	6563      	strge	r3, [r4, #84]	; 0x54
 8009452:	81a3      	strhlt	r3, [r4, #12]
 8009454:	bd10      	pop	{r4, pc}

08009456 <__swrite>:
 8009456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800945a:	461f      	mov	r7, r3
 800945c:	898b      	ldrh	r3, [r1, #12]
 800945e:	05db      	lsls	r3, r3, #23
 8009460:	4605      	mov	r5, r0
 8009462:	460c      	mov	r4, r1
 8009464:	4616      	mov	r6, r2
 8009466:	d505      	bpl.n	8009474 <__swrite+0x1e>
 8009468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800946c:	2302      	movs	r3, #2
 800946e:	2200      	movs	r2, #0
 8009470:	f000 f9f8 	bl	8009864 <_lseek_r>
 8009474:	89a3      	ldrh	r3, [r4, #12]
 8009476:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800947a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800947e:	81a3      	strh	r3, [r4, #12]
 8009480:	4632      	mov	r2, r6
 8009482:	463b      	mov	r3, r7
 8009484:	4628      	mov	r0, r5
 8009486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800948a:	f000 b869 	b.w	8009560 <_write_r>

0800948e <__sseek>:
 800948e:	b510      	push	{r4, lr}
 8009490:	460c      	mov	r4, r1
 8009492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009496:	f000 f9e5 	bl	8009864 <_lseek_r>
 800949a:	1c43      	adds	r3, r0, #1
 800949c:	89a3      	ldrh	r3, [r4, #12]
 800949e:	bf15      	itete	ne
 80094a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80094a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094aa:	81a3      	strheq	r3, [r4, #12]
 80094ac:	bf18      	it	ne
 80094ae:	81a3      	strhne	r3, [r4, #12]
 80094b0:	bd10      	pop	{r4, pc}

080094b2 <__sclose>:
 80094b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b6:	f000 b8f1 	b.w	800969c <_close_r>
	...

080094bc <__swbuf_r>:
 80094bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094be:	460e      	mov	r6, r1
 80094c0:	4614      	mov	r4, r2
 80094c2:	4605      	mov	r5, r0
 80094c4:	b118      	cbz	r0, 80094ce <__swbuf_r+0x12>
 80094c6:	6983      	ldr	r3, [r0, #24]
 80094c8:	b90b      	cbnz	r3, 80094ce <__swbuf_r+0x12>
 80094ca:	f7ff f955 	bl	8008778 <__sinit>
 80094ce:	4b21      	ldr	r3, [pc, #132]	; (8009554 <__swbuf_r+0x98>)
 80094d0:	429c      	cmp	r4, r3
 80094d2:	d12b      	bne.n	800952c <__swbuf_r+0x70>
 80094d4:	686c      	ldr	r4, [r5, #4]
 80094d6:	69a3      	ldr	r3, [r4, #24]
 80094d8:	60a3      	str	r3, [r4, #8]
 80094da:	89a3      	ldrh	r3, [r4, #12]
 80094dc:	071a      	lsls	r2, r3, #28
 80094de:	d52f      	bpl.n	8009540 <__swbuf_r+0x84>
 80094e0:	6923      	ldr	r3, [r4, #16]
 80094e2:	b36b      	cbz	r3, 8009540 <__swbuf_r+0x84>
 80094e4:	6923      	ldr	r3, [r4, #16]
 80094e6:	6820      	ldr	r0, [r4, #0]
 80094e8:	1ac0      	subs	r0, r0, r3
 80094ea:	6963      	ldr	r3, [r4, #20]
 80094ec:	b2f6      	uxtb	r6, r6
 80094ee:	4283      	cmp	r3, r0
 80094f0:	4637      	mov	r7, r6
 80094f2:	dc04      	bgt.n	80094fe <__swbuf_r+0x42>
 80094f4:	4621      	mov	r1, r4
 80094f6:	4628      	mov	r0, r5
 80094f8:	f000 f966 	bl	80097c8 <_fflush_r>
 80094fc:	bb30      	cbnz	r0, 800954c <__swbuf_r+0x90>
 80094fe:	68a3      	ldr	r3, [r4, #8]
 8009500:	3b01      	subs	r3, #1
 8009502:	60a3      	str	r3, [r4, #8]
 8009504:	6823      	ldr	r3, [r4, #0]
 8009506:	1c5a      	adds	r2, r3, #1
 8009508:	6022      	str	r2, [r4, #0]
 800950a:	701e      	strb	r6, [r3, #0]
 800950c:	6963      	ldr	r3, [r4, #20]
 800950e:	3001      	adds	r0, #1
 8009510:	4283      	cmp	r3, r0
 8009512:	d004      	beq.n	800951e <__swbuf_r+0x62>
 8009514:	89a3      	ldrh	r3, [r4, #12]
 8009516:	07db      	lsls	r3, r3, #31
 8009518:	d506      	bpl.n	8009528 <__swbuf_r+0x6c>
 800951a:	2e0a      	cmp	r6, #10
 800951c:	d104      	bne.n	8009528 <__swbuf_r+0x6c>
 800951e:	4621      	mov	r1, r4
 8009520:	4628      	mov	r0, r5
 8009522:	f000 f951 	bl	80097c8 <_fflush_r>
 8009526:	b988      	cbnz	r0, 800954c <__swbuf_r+0x90>
 8009528:	4638      	mov	r0, r7
 800952a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800952c:	4b0a      	ldr	r3, [pc, #40]	; (8009558 <__swbuf_r+0x9c>)
 800952e:	429c      	cmp	r4, r3
 8009530:	d101      	bne.n	8009536 <__swbuf_r+0x7a>
 8009532:	68ac      	ldr	r4, [r5, #8]
 8009534:	e7cf      	b.n	80094d6 <__swbuf_r+0x1a>
 8009536:	4b09      	ldr	r3, [pc, #36]	; (800955c <__swbuf_r+0xa0>)
 8009538:	429c      	cmp	r4, r3
 800953a:	bf08      	it	eq
 800953c:	68ec      	ldreq	r4, [r5, #12]
 800953e:	e7ca      	b.n	80094d6 <__swbuf_r+0x1a>
 8009540:	4621      	mov	r1, r4
 8009542:	4628      	mov	r0, r5
 8009544:	f000 f81e 	bl	8009584 <__swsetup_r>
 8009548:	2800      	cmp	r0, #0
 800954a:	d0cb      	beq.n	80094e4 <__swbuf_r+0x28>
 800954c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009550:	e7ea      	b.n	8009528 <__swbuf_r+0x6c>
 8009552:	bf00      	nop
 8009554:	08009c20 	.word	0x08009c20
 8009558:	08009c40 	.word	0x08009c40
 800955c:	08009c00 	.word	0x08009c00

08009560 <_write_r>:
 8009560:	b538      	push	{r3, r4, r5, lr}
 8009562:	4d07      	ldr	r5, [pc, #28]	; (8009580 <_write_r+0x20>)
 8009564:	4604      	mov	r4, r0
 8009566:	4608      	mov	r0, r1
 8009568:	4611      	mov	r1, r2
 800956a:	2200      	movs	r2, #0
 800956c:	602a      	str	r2, [r5, #0]
 800956e:	461a      	mov	r2, r3
 8009570:	f7f7 fea4 	bl	80012bc <_write>
 8009574:	1c43      	adds	r3, r0, #1
 8009576:	d102      	bne.n	800957e <_write_r+0x1e>
 8009578:	682b      	ldr	r3, [r5, #0]
 800957a:	b103      	cbz	r3, 800957e <_write_r+0x1e>
 800957c:	6023      	str	r3, [r4, #0]
 800957e:	bd38      	pop	{r3, r4, r5, pc}
 8009580:	2000044c 	.word	0x2000044c

08009584 <__swsetup_r>:
 8009584:	4b32      	ldr	r3, [pc, #200]	; (8009650 <__swsetup_r+0xcc>)
 8009586:	b570      	push	{r4, r5, r6, lr}
 8009588:	681d      	ldr	r5, [r3, #0]
 800958a:	4606      	mov	r6, r0
 800958c:	460c      	mov	r4, r1
 800958e:	b125      	cbz	r5, 800959a <__swsetup_r+0x16>
 8009590:	69ab      	ldr	r3, [r5, #24]
 8009592:	b913      	cbnz	r3, 800959a <__swsetup_r+0x16>
 8009594:	4628      	mov	r0, r5
 8009596:	f7ff f8ef 	bl	8008778 <__sinit>
 800959a:	4b2e      	ldr	r3, [pc, #184]	; (8009654 <__swsetup_r+0xd0>)
 800959c:	429c      	cmp	r4, r3
 800959e:	d10f      	bne.n	80095c0 <__swsetup_r+0x3c>
 80095a0:	686c      	ldr	r4, [r5, #4]
 80095a2:	89a3      	ldrh	r3, [r4, #12]
 80095a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095a8:	0719      	lsls	r1, r3, #28
 80095aa:	d42c      	bmi.n	8009606 <__swsetup_r+0x82>
 80095ac:	06dd      	lsls	r5, r3, #27
 80095ae:	d411      	bmi.n	80095d4 <__swsetup_r+0x50>
 80095b0:	2309      	movs	r3, #9
 80095b2:	6033      	str	r3, [r6, #0]
 80095b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095b8:	81a3      	strh	r3, [r4, #12]
 80095ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095be:	e03e      	b.n	800963e <__swsetup_r+0xba>
 80095c0:	4b25      	ldr	r3, [pc, #148]	; (8009658 <__swsetup_r+0xd4>)
 80095c2:	429c      	cmp	r4, r3
 80095c4:	d101      	bne.n	80095ca <__swsetup_r+0x46>
 80095c6:	68ac      	ldr	r4, [r5, #8]
 80095c8:	e7eb      	b.n	80095a2 <__swsetup_r+0x1e>
 80095ca:	4b24      	ldr	r3, [pc, #144]	; (800965c <__swsetup_r+0xd8>)
 80095cc:	429c      	cmp	r4, r3
 80095ce:	bf08      	it	eq
 80095d0:	68ec      	ldreq	r4, [r5, #12]
 80095d2:	e7e6      	b.n	80095a2 <__swsetup_r+0x1e>
 80095d4:	0758      	lsls	r0, r3, #29
 80095d6:	d512      	bpl.n	80095fe <__swsetup_r+0x7a>
 80095d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095da:	b141      	cbz	r1, 80095ee <__swsetup_r+0x6a>
 80095dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095e0:	4299      	cmp	r1, r3
 80095e2:	d002      	beq.n	80095ea <__swsetup_r+0x66>
 80095e4:	4630      	mov	r0, r6
 80095e6:	f7ff fd11 	bl	800900c <_free_r>
 80095ea:	2300      	movs	r3, #0
 80095ec:	6363      	str	r3, [r4, #52]	; 0x34
 80095ee:	89a3      	ldrh	r3, [r4, #12]
 80095f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095f4:	81a3      	strh	r3, [r4, #12]
 80095f6:	2300      	movs	r3, #0
 80095f8:	6063      	str	r3, [r4, #4]
 80095fa:	6923      	ldr	r3, [r4, #16]
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	89a3      	ldrh	r3, [r4, #12]
 8009600:	f043 0308 	orr.w	r3, r3, #8
 8009604:	81a3      	strh	r3, [r4, #12]
 8009606:	6923      	ldr	r3, [r4, #16]
 8009608:	b94b      	cbnz	r3, 800961e <__swsetup_r+0x9a>
 800960a:	89a3      	ldrh	r3, [r4, #12]
 800960c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009614:	d003      	beq.n	800961e <__swsetup_r+0x9a>
 8009616:	4621      	mov	r1, r4
 8009618:	4630      	mov	r0, r6
 800961a:	f000 f959 	bl	80098d0 <__smakebuf_r>
 800961e:	89a0      	ldrh	r0, [r4, #12]
 8009620:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009624:	f010 0301 	ands.w	r3, r0, #1
 8009628:	d00a      	beq.n	8009640 <__swsetup_r+0xbc>
 800962a:	2300      	movs	r3, #0
 800962c:	60a3      	str	r3, [r4, #8]
 800962e:	6963      	ldr	r3, [r4, #20]
 8009630:	425b      	negs	r3, r3
 8009632:	61a3      	str	r3, [r4, #24]
 8009634:	6923      	ldr	r3, [r4, #16]
 8009636:	b943      	cbnz	r3, 800964a <__swsetup_r+0xc6>
 8009638:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800963c:	d1ba      	bne.n	80095b4 <__swsetup_r+0x30>
 800963e:	bd70      	pop	{r4, r5, r6, pc}
 8009640:	0781      	lsls	r1, r0, #30
 8009642:	bf58      	it	pl
 8009644:	6963      	ldrpl	r3, [r4, #20]
 8009646:	60a3      	str	r3, [r4, #8]
 8009648:	e7f4      	b.n	8009634 <__swsetup_r+0xb0>
 800964a:	2000      	movs	r0, #0
 800964c:	e7f7      	b.n	800963e <__swsetup_r+0xba>
 800964e:	bf00      	nop
 8009650:	2000000c 	.word	0x2000000c
 8009654:	08009c20 	.word	0x08009c20
 8009658:	08009c40 	.word	0x08009c40
 800965c:	08009c00 	.word	0x08009c00

08009660 <__assert_func>:
 8009660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009662:	4614      	mov	r4, r2
 8009664:	461a      	mov	r2, r3
 8009666:	4b09      	ldr	r3, [pc, #36]	; (800968c <__assert_func+0x2c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4605      	mov	r5, r0
 800966c:	68d8      	ldr	r0, [r3, #12]
 800966e:	b14c      	cbz	r4, 8009684 <__assert_func+0x24>
 8009670:	4b07      	ldr	r3, [pc, #28]	; (8009690 <__assert_func+0x30>)
 8009672:	9100      	str	r1, [sp, #0]
 8009674:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009678:	4906      	ldr	r1, [pc, #24]	; (8009694 <__assert_func+0x34>)
 800967a:	462b      	mov	r3, r5
 800967c:	f000 f8e0 	bl	8009840 <fiprintf>
 8009680:	f000 f9a3 	bl	80099ca <abort>
 8009684:	4b04      	ldr	r3, [pc, #16]	; (8009698 <__assert_func+0x38>)
 8009686:	461c      	mov	r4, r3
 8009688:	e7f3      	b.n	8009672 <__assert_func+0x12>
 800968a:	bf00      	nop
 800968c:	2000000c 	.word	0x2000000c
 8009690:	08009dcd 	.word	0x08009dcd
 8009694:	08009dda 	.word	0x08009dda
 8009698:	08009e08 	.word	0x08009e08

0800969c <_close_r>:
 800969c:	b538      	push	{r3, r4, r5, lr}
 800969e:	4d06      	ldr	r5, [pc, #24]	; (80096b8 <_close_r+0x1c>)
 80096a0:	2300      	movs	r3, #0
 80096a2:	4604      	mov	r4, r0
 80096a4:	4608      	mov	r0, r1
 80096a6:	602b      	str	r3, [r5, #0]
 80096a8:	f7f8 f827 	bl	80016fa <_close>
 80096ac:	1c43      	adds	r3, r0, #1
 80096ae:	d102      	bne.n	80096b6 <_close_r+0x1a>
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	b103      	cbz	r3, 80096b6 <_close_r+0x1a>
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	bd38      	pop	{r3, r4, r5, pc}
 80096b8:	2000044c 	.word	0x2000044c

080096bc <__sflush_r>:
 80096bc:	898a      	ldrh	r2, [r1, #12]
 80096be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096c2:	4605      	mov	r5, r0
 80096c4:	0710      	lsls	r0, r2, #28
 80096c6:	460c      	mov	r4, r1
 80096c8:	d458      	bmi.n	800977c <__sflush_r+0xc0>
 80096ca:	684b      	ldr	r3, [r1, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	dc05      	bgt.n	80096dc <__sflush_r+0x20>
 80096d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	dc02      	bgt.n	80096dc <__sflush_r+0x20>
 80096d6:	2000      	movs	r0, #0
 80096d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096de:	2e00      	cmp	r6, #0
 80096e0:	d0f9      	beq.n	80096d6 <__sflush_r+0x1a>
 80096e2:	2300      	movs	r3, #0
 80096e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096e8:	682f      	ldr	r7, [r5, #0]
 80096ea:	602b      	str	r3, [r5, #0]
 80096ec:	d032      	beq.n	8009754 <__sflush_r+0x98>
 80096ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096f0:	89a3      	ldrh	r3, [r4, #12]
 80096f2:	075a      	lsls	r2, r3, #29
 80096f4:	d505      	bpl.n	8009702 <__sflush_r+0x46>
 80096f6:	6863      	ldr	r3, [r4, #4]
 80096f8:	1ac0      	subs	r0, r0, r3
 80096fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096fc:	b10b      	cbz	r3, 8009702 <__sflush_r+0x46>
 80096fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009700:	1ac0      	subs	r0, r0, r3
 8009702:	2300      	movs	r3, #0
 8009704:	4602      	mov	r2, r0
 8009706:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009708:	6a21      	ldr	r1, [r4, #32]
 800970a:	4628      	mov	r0, r5
 800970c:	47b0      	blx	r6
 800970e:	1c43      	adds	r3, r0, #1
 8009710:	89a3      	ldrh	r3, [r4, #12]
 8009712:	d106      	bne.n	8009722 <__sflush_r+0x66>
 8009714:	6829      	ldr	r1, [r5, #0]
 8009716:	291d      	cmp	r1, #29
 8009718:	d82c      	bhi.n	8009774 <__sflush_r+0xb8>
 800971a:	4a2a      	ldr	r2, [pc, #168]	; (80097c4 <__sflush_r+0x108>)
 800971c:	40ca      	lsrs	r2, r1
 800971e:	07d6      	lsls	r6, r2, #31
 8009720:	d528      	bpl.n	8009774 <__sflush_r+0xb8>
 8009722:	2200      	movs	r2, #0
 8009724:	6062      	str	r2, [r4, #4]
 8009726:	04d9      	lsls	r1, r3, #19
 8009728:	6922      	ldr	r2, [r4, #16]
 800972a:	6022      	str	r2, [r4, #0]
 800972c:	d504      	bpl.n	8009738 <__sflush_r+0x7c>
 800972e:	1c42      	adds	r2, r0, #1
 8009730:	d101      	bne.n	8009736 <__sflush_r+0x7a>
 8009732:	682b      	ldr	r3, [r5, #0]
 8009734:	b903      	cbnz	r3, 8009738 <__sflush_r+0x7c>
 8009736:	6560      	str	r0, [r4, #84]	; 0x54
 8009738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800973a:	602f      	str	r7, [r5, #0]
 800973c:	2900      	cmp	r1, #0
 800973e:	d0ca      	beq.n	80096d6 <__sflush_r+0x1a>
 8009740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009744:	4299      	cmp	r1, r3
 8009746:	d002      	beq.n	800974e <__sflush_r+0x92>
 8009748:	4628      	mov	r0, r5
 800974a:	f7ff fc5f 	bl	800900c <_free_r>
 800974e:	2000      	movs	r0, #0
 8009750:	6360      	str	r0, [r4, #52]	; 0x34
 8009752:	e7c1      	b.n	80096d8 <__sflush_r+0x1c>
 8009754:	6a21      	ldr	r1, [r4, #32]
 8009756:	2301      	movs	r3, #1
 8009758:	4628      	mov	r0, r5
 800975a:	47b0      	blx	r6
 800975c:	1c41      	adds	r1, r0, #1
 800975e:	d1c7      	bne.n	80096f0 <__sflush_r+0x34>
 8009760:	682b      	ldr	r3, [r5, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d0c4      	beq.n	80096f0 <__sflush_r+0x34>
 8009766:	2b1d      	cmp	r3, #29
 8009768:	d001      	beq.n	800976e <__sflush_r+0xb2>
 800976a:	2b16      	cmp	r3, #22
 800976c:	d101      	bne.n	8009772 <__sflush_r+0xb6>
 800976e:	602f      	str	r7, [r5, #0]
 8009770:	e7b1      	b.n	80096d6 <__sflush_r+0x1a>
 8009772:	89a3      	ldrh	r3, [r4, #12]
 8009774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009778:	81a3      	strh	r3, [r4, #12]
 800977a:	e7ad      	b.n	80096d8 <__sflush_r+0x1c>
 800977c:	690f      	ldr	r7, [r1, #16]
 800977e:	2f00      	cmp	r7, #0
 8009780:	d0a9      	beq.n	80096d6 <__sflush_r+0x1a>
 8009782:	0793      	lsls	r3, r2, #30
 8009784:	680e      	ldr	r6, [r1, #0]
 8009786:	bf08      	it	eq
 8009788:	694b      	ldreq	r3, [r1, #20]
 800978a:	600f      	str	r7, [r1, #0]
 800978c:	bf18      	it	ne
 800978e:	2300      	movne	r3, #0
 8009790:	eba6 0807 	sub.w	r8, r6, r7
 8009794:	608b      	str	r3, [r1, #8]
 8009796:	f1b8 0f00 	cmp.w	r8, #0
 800979a:	dd9c      	ble.n	80096d6 <__sflush_r+0x1a>
 800979c:	6a21      	ldr	r1, [r4, #32]
 800979e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097a0:	4643      	mov	r3, r8
 80097a2:	463a      	mov	r2, r7
 80097a4:	4628      	mov	r0, r5
 80097a6:	47b0      	blx	r6
 80097a8:	2800      	cmp	r0, #0
 80097aa:	dc06      	bgt.n	80097ba <__sflush_r+0xfe>
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097b2:	81a3      	strh	r3, [r4, #12]
 80097b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097b8:	e78e      	b.n	80096d8 <__sflush_r+0x1c>
 80097ba:	4407      	add	r7, r0
 80097bc:	eba8 0800 	sub.w	r8, r8, r0
 80097c0:	e7e9      	b.n	8009796 <__sflush_r+0xda>
 80097c2:	bf00      	nop
 80097c4:	20400001 	.word	0x20400001

080097c8 <_fflush_r>:
 80097c8:	b538      	push	{r3, r4, r5, lr}
 80097ca:	690b      	ldr	r3, [r1, #16]
 80097cc:	4605      	mov	r5, r0
 80097ce:	460c      	mov	r4, r1
 80097d0:	b913      	cbnz	r3, 80097d8 <_fflush_r+0x10>
 80097d2:	2500      	movs	r5, #0
 80097d4:	4628      	mov	r0, r5
 80097d6:	bd38      	pop	{r3, r4, r5, pc}
 80097d8:	b118      	cbz	r0, 80097e2 <_fflush_r+0x1a>
 80097da:	6983      	ldr	r3, [r0, #24]
 80097dc:	b90b      	cbnz	r3, 80097e2 <_fflush_r+0x1a>
 80097de:	f7fe ffcb 	bl	8008778 <__sinit>
 80097e2:	4b14      	ldr	r3, [pc, #80]	; (8009834 <_fflush_r+0x6c>)
 80097e4:	429c      	cmp	r4, r3
 80097e6:	d11b      	bne.n	8009820 <_fflush_r+0x58>
 80097e8:	686c      	ldr	r4, [r5, #4]
 80097ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d0ef      	beq.n	80097d2 <_fflush_r+0xa>
 80097f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097f4:	07d0      	lsls	r0, r2, #31
 80097f6:	d404      	bmi.n	8009802 <_fflush_r+0x3a>
 80097f8:	0599      	lsls	r1, r3, #22
 80097fa:	d402      	bmi.n	8009802 <_fflush_r+0x3a>
 80097fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097fe:	f7ff f85e 	bl	80088be <__retarget_lock_acquire_recursive>
 8009802:	4628      	mov	r0, r5
 8009804:	4621      	mov	r1, r4
 8009806:	f7ff ff59 	bl	80096bc <__sflush_r>
 800980a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800980c:	07da      	lsls	r2, r3, #31
 800980e:	4605      	mov	r5, r0
 8009810:	d4e0      	bmi.n	80097d4 <_fflush_r+0xc>
 8009812:	89a3      	ldrh	r3, [r4, #12]
 8009814:	059b      	lsls	r3, r3, #22
 8009816:	d4dd      	bmi.n	80097d4 <_fflush_r+0xc>
 8009818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800981a:	f7ff f851 	bl	80088c0 <__retarget_lock_release_recursive>
 800981e:	e7d9      	b.n	80097d4 <_fflush_r+0xc>
 8009820:	4b05      	ldr	r3, [pc, #20]	; (8009838 <_fflush_r+0x70>)
 8009822:	429c      	cmp	r4, r3
 8009824:	d101      	bne.n	800982a <_fflush_r+0x62>
 8009826:	68ac      	ldr	r4, [r5, #8]
 8009828:	e7df      	b.n	80097ea <_fflush_r+0x22>
 800982a:	4b04      	ldr	r3, [pc, #16]	; (800983c <_fflush_r+0x74>)
 800982c:	429c      	cmp	r4, r3
 800982e:	bf08      	it	eq
 8009830:	68ec      	ldreq	r4, [r5, #12]
 8009832:	e7da      	b.n	80097ea <_fflush_r+0x22>
 8009834:	08009c20 	.word	0x08009c20
 8009838:	08009c40 	.word	0x08009c40
 800983c:	08009c00 	.word	0x08009c00

08009840 <fiprintf>:
 8009840:	b40e      	push	{r1, r2, r3}
 8009842:	b503      	push	{r0, r1, lr}
 8009844:	4601      	mov	r1, r0
 8009846:	ab03      	add	r3, sp, #12
 8009848:	4805      	ldr	r0, [pc, #20]	; (8009860 <fiprintf+0x20>)
 800984a:	f853 2b04 	ldr.w	r2, [r3], #4
 800984e:	6800      	ldr	r0, [r0, #0]
 8009850:	9301      	str	r3, [sp, #4]
 8009852:	f7ff fcaf 	bl	80091b4 <_vfiprintf_r>
 8009856:	b002      	add	sp, #8
 8009858:	f85d eb04 	ldr.w	lr, [sp], #4
 800985c:	b003      	add	sp, #12
 800985e:	4770      	bx	lr
 8009860:	2000000c 	.word	0x2000000c

08009864 <_lseek_r>:
 8009864:	b538      	push	{r3, r4, r5, lr}
 8009866:	4d07      	ldr	r5, [pc, #28]	; (8009884 <_lseek_r+0x20>)
 8009868:	4604      	mov	r4, r0
 800986a:	4608      	mov	r0, r1
 800986c:	4611      	mov	r1, r2
 800986e:	2200      	movs	r2, #0
 8009870:	602a      	str	r2, [r5, #0]
 8009872:	461a      	mov	r2, r3
 8009874:	f7f7 ff68 	bl	8001748 <_lseek>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	d102      	bne.n	8009882 <_lseek_r+0x1e>
 800987c:	682b      	ldr	r3, [r5, #0]
 800987e:	b103      	cbz	r3, 8009882 <_lseek_r+0x1e>
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	bd38      	pop	{r3, r4, r5, pc}
 8009884:	2000044c 	.word	0x2000044c

08009888 <__swhatbuf_r>:
 8009888:	b570      	push	{r4, r5, r6, lr}
 800988a:	460e      	mov	r6, r1
 800988c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009890:	2900      	cmp	r1, #0
 8009892:	b096      	sub	sp, #88	; 0x58
 8009894:	4614      	mov	r4, r2
 8009896:	461d      	mov	r5, r3
 8009898:	da07      	bge.n	80098aa <__swhatbuf_r+0x22>
 800989a:	2300      	movs	r3, #0
 800989c:	602b      	str	r3, [r5, #0]
 800989e:	89b3      	ldrh	r3, [r6, #12]
 80098a0:	061a      	lsls	r2, r3, #24
 80098a2:	d410      	bmi.n	80098c6 <__swhatbuf_r+0x3e>
 80098a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098a8:	e00e      	b.n	80098c8 <__swhatbuf_r+0x40>
 80098aa:	466a      	mov	r2, sp
 80098ac:	f000 f894 	bl	80099d8 <_fstat_r>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	dbf2      	blt.n	800989a <__swhatbuf_r+0x12>
 80098b4:	9a01      	ldr	r2, [sp, #4]
 80098b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80098ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80098be:	425a      	negs	r2, r3
 80098c0:	415a      	adcs	r2, r3
 80098c2:	602a      	str	r2, [r5, #0]
 80098c4:	e7ee      	b.n	80098a4 <__swhatbuf_r+0x1c>
 80098c6:	2340      	movs	r3, #64	; 0x40
 80098c8:	2000      	movs	r0, #0
 80098ca:	6023      	str	r3, [r4, #0]
 80098cc:	b016      	add	sp, #88	; 0x58
 80098ce:	bd70      	pop	{r4, r5, r6, pc}

080098d0 <__smakebuf_r>:
 80098d0:	898b      	ldrh	r3, [r1, #12]
 80098d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098d4:	079d      	lsls	r5, r3, #30
 80098d6:	4606      	mov	r6, r0
 80098d8:	460c      	mov	r4, r1
 80098da:	d507      	bpl.n	80098ec <__smakebuf_r+0x1c>
 80098dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098e0:	6023      	str	r3, [r4, #0]
 80098e2:	6123      	str	r3, [r4, #16]
 80098e4:	2301      	movs	r3, #1
 80098e6:	6163      	str	r3, [r4, #20]
 80098e8:	b002      	add	sp, #8
 80098ea:	bd70      	pop	{r4, r5, r6, pc}
 80098ec:	ab01      	add	r3, sp, #4
 80098ee:	466a      	mov	r2, sp
 80098f0:	f7ff ffca 	bl	8009888 <__swhatbuf_r>
 80098f4:	9900      	ldr	r1, [sp, #0]
 80098f6:	4605      	mov	r5, r0
 80098f8:	4630      	mov	r0, r6
 80098fa:	f7ff fbd7 	bl	80090ac <_malloc_r>
 80098fe:	b948      	cbnz	r0, 8009914 <__smakebuf_r+0x44>
 8009900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009904:	059a      	lsls	r2, r3, #22
 8009906:	d4ef      	bmi.n	80098e8 <__smakebuf_r+0x18>
 8009908:	f023 0303 	bic.w	r3, r3, #3
 800990c:	f043 0302 	orr.w	r3, r3, #2
 8009910:	81a3      	strh	r3, [r4, #12]
 8009912:	e7e3      	b.n	80098dc <__smakebuf_r+0xc>
 8009914:	4b0d      	ldr	r3, [pc, #52]	; (800994c <__smakebuf_r+0x7c>)
 8009916:	62b3      	str	r3, [r6, #40]	; 0x28
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	6020      	str	r0, [r4, #0]
 800991c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009920:	81a3      	strh	r3, [r4, #12]
 8009922:	9b00      	ldr	r3, [sp, #0]
 8009924:	6163      	str	r3, [r4, #20]
 8009926:	9b01      	ldr	r3, [sp, #4]
 8009928:	6120      	str	r0, [r4, #16]
 800992a:	b15b      	cbz	r3, 8009944 <__smakebuf_r+0x74>
 800992c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009930:	4630      	mov	r0, r6
 8009932:	f000 f863 	bl	80099fc <_isatty_r>
 8009936:	b128      	cbz	r0, 8009944 <__smakebuf_r+0x74>
 8009938:	89a3      	ldrh	r3, [r4, #12]
 800993a:	f023 0303 	bic.w	r3, r3, #3
 800993e:	f043 0301 	orr.w	r3, r3, #1
 8009942:	81a3      	strh	r3, [r4, #12]
 8009944:	89a0      	ldrh	r0, [r4, #12]
 8009946:	4305      	orrs	r5, r0
 8009948:	81a5      	strh	r5, [r4, #12]
 800994a:	e7cd      	b.n	80098e8 <__smakebuf_r+0x18>
 800994c:	08008711 	.word	0x08008711

08009950 <__ascii_mbtowc>:
 8009950:	b082      	sub	sp, #8
 8009952:	b901      	cbnz	r1, 8009956 <__ascii_mbtowc+0x6>
 8009954:	a901      	add	r1, sp, #4
 8009956:	b142      	cbz	r2, 800996a <__ascii_mbtowc+0x1a>
 8009958:	b14b      	cbz	r3, 800996e <__ascii_mbtowc+0x1e>
 800995a:	7813      	ldrb	r3, [r2, #0]
 800995c:	600b      	str	r3, [r1, #0]
 800995e:	7812      	ldrb	r2, [r2, #0]
 8009960:	1e10      	subs	r0, r2, #0
 8009962:	bf18      	it	ne
 8009964:	2001      	movne	r0, #1
 8009966:	b002      	add	sp, #8
 8009968:	4770      	bx	lr
 800996a:	4610      	mov	r0, r2
 800996c:	e7fb      	b.n	8009966 <__ascii_mbtowc+0x16>
 800996e:	f06f 0001 	mvn.w	r0, #1
 8009972:	e7f8      	b.n	8009966 <__ascii_mbtowc+0x16>

08009974 <__malloc_lock>:
 8009974:	4801      	ldr	r0, [pc, #4]	; (800997c <__malloc_lock+0x8>)
 8009976:	f7fe bfa2 	b.w	80088be <__retarget_lock_acquire_recursive>
 800997a:	bf00      	nop
 800997c:	20000444 	.word	0x20000444

08009980 <__malloc_unlock>:
 8009980:	4801      	ldr	r0, [pc, #4]	; (8009988 <__malloc_unlock+0x8>)
 8009982:	f7fe bf9d 	b.w	80088c0 <__retarget_lock_release_recursive>
 8009986:	bf00      	nop
 8009988:	20000444 	.word	0x20000444

0800998c <_read_r>:
 800998c:	b538      	push	{r3, r4, r5, lr}
 800998e:	4d07      	ldr	r5, [pc, #28]	; (80099ac <_read_r+0x20>)
 8009990:	4604      	mov	r4, r0
 8009992:	4608      	mov	r0, r1
 8009994:	4611      	mov	r1, r2
 8009996:	2200      	movs	r2, #0
 8009998:	602a      	str	r2, [r5, #0]
 800999a:	461a      	mov	r2, r3
 800999c:	f7f7 fe90 	bl	80016c0 <_read>
 80099a0:	1c43      	adds	r3, r0, #1
 80099a2:	d102      	bne.n	80099aa <_read_r+0x1e>
 80099a4:	682b      	ldr	r3, [r5, #0]
 80099a6:	b103      	cbz	r3, 80099aa <_read_r+0x1e>
 80099a8:	6023      	str	r3, [r4, #0]
 80099aa:	bd38      	pop	{r3, r4, r5, pc}
 80099ac:	2000044c 	.word	0x2000044c

080099b0 <__ascii_wctomb>:
 80099b0:	b149      	cbz	r1, 80099c6 <__ascii_wctomb+0x16>
 80099b2:	2aff      	cmp	r2, #255	; 0xff
 80099b4:	bf85      	ittet	hi
 80099b6:	238a      	movhi	r3, #138	; 0x8a
 80099b8:	6003      	strhi	r3, [r0, #0]
 80099ba:	700a      	strbls	r2, [r1, #0]
 80099bc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80099c0:	bf98      	it	ls
 80099c2:	2001      	movls	r0, #1
 80099c4:	4770      	bx	lr
 80099c6:	4608      	mov	r0, r1
 80099c8:	4770      	bx	lr

080099ca <abort>:
 80099ca:	b508      	push	{r3, lr}
 80099cc:	2006      	movs	r0, #6
 80099ce:	f000 f84d 	bl	8009a6c <raise>
 80099d2:	2001      	movs	r0, #1
 80099d4:	f7f7 fe6a 	bl	80016ac <_exit>

080099d8 <_fstat_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	4d07      	ldr	r5, [pc, #28]	; (80099f8 <_fstat_r+0x20>)
 80099dc:	2300      	movs	r3, #0
 80099de:	4604      	mov	r4, r0
 80099e0:	4608      	mov	r0, r1
 80099e2:	4611      	mov	r1, r2
 80099e4:	602b      	str	r3, [r5, #0]
 80099e6:	f7f7 fe94 	bl	8001712 <_fstat>
 80099ea:	1c43      	adds	r3, r0, #1
 80099ec:	d102      	bne.n	80099f4 <_fstat_r+0x1c>
 80099ee:	682b      	ldr	r3, [r5, #0]
 80099f0:	b103      	cbz	r3, 80099f4 <_fstat_r+0x1c>
 80099f2:	6023      	str	r3, [r4, #0]
 80099f4:	bd38      	pop	{r3, r4, r5, pc}
 80099f6:	bf00      	nop
 80099f8:	2000044c 	.word	0x2000044c

080099fc <_isatty_r>:
 80099fc:	b538      	push	{r3, r4, r5, lr}
 80099fe:	4d06      	ldr	r5, [pc, #24]	; (8009a18 <_isatty_r+0x1c>)
 8009a00:	2300      	movs	r3, #0
 8009a02:	4604      	mov	r4, r0
 8009a04:	4608      	mov	r0, r1
 8009a06:	602b      	str	r3, [r5, #0]
 8009a08:	f7f7 fe93 	bl	8001732 <_isatty>
 8009a0c:	1c43      	adds	r3, r0, #1
 8009a0e:	d102      	bne.n	8009a16 <_isatty_r+0x1a>
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	b103      	cbz	r3, 8009a16 <_isatty_r+0x1a>
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	2000044c 	.word	0x2000044c

08009a1c <_raise_r>:
 8009a1c:	291f      	cmp	r1, #31
 8009a1e:	b538      	push	{r3, r4, r5, lr}
 8009a20:	4604      	mov	r4, r0
 8009a22:	460d      	mov	r5, r1
 8009a24:	d904      	bls.n	8009a30 <_raise_r+0x14>
 8009a26:	2316      	movs	r3, #22
 8009a28:	6003      	str	r3, [r0, #0]
 8009a2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a32:	b112      	cbz	r2, 8009a3a <_raise_r+0x1e>
 8009a34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a38:	b94b      	cbnz	r3, 8009a4e <_raise_r+0x32>
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f000 f830 	bl	8009aa0 <_getpid_r>
 8009a40:	462a      	mov	r2, r5
 8009a42:	4601      	mov	r1, r0
 8009a44:	4620      	mov	r0, r4
 8009a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a4a:	f000 b817 	b.w	8009a7c <_kill_r>
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d00a      	beq.n	8009a68 <_raise_r+0x4c>
 8009a52:	1c59      	adds	r1, r3, #1
 8009a54:	d103      	bne.n	8009a5e <_raise_r+0x42>
 8009a56:	2316      	movs	r3, #22
 8009a58:	6003      	str	r3, [r0, #0]
 8009a5a:	2001      	movs	r0, #1
 8009a5c:	e7e7      	b.n	8009a2e <_raise_r+0x12>
 8009a5e:	2400      	movs	r4, #0
 8009a60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a64:	4628      	mov	r0, r5
 8009a66:	4798      	blx	r3
 8009a68:	2000      	movs	r0, #0
 8009a6a:	e7e0      	b.n	8009a2e <_raise_r+0x12>

08009a6c <raise>:
 8009a6c:	4b02      	ldr	r3, [pc, #8]	; (8009a78 <raise+0xc>)
 8009a6e:	4601      	mov	r1, r0
 8009a70:	6818      	ldr	r0, [r3, #0]
 8009a72:	f7ff bfd3 	b.w	8009a1c <_raise_r>
 8009a76:	bf00      	nop
 8009a78:	2000000c 	.word	0x2000000c

08009a7c <_kill_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	4d07      	ldr	r5, [pc, #28]	; (8009a9c <_kill_r+0x20>)
 8009a80:	2300      	movs	r3, #0
 8009a82:	4604      	mov	r4, r0
 8009a84:	4608      	mov	r0, r1
 8009a86:	4611      	mov	r1, r2
 8009a88:	602b      	str	r3, [r5, #0]
 8009a8a:	f7f7 fdff 	bl	800168c <_kill>
 8009a8e:	1c43      	adds	r3, r0, #1
 8009a90:	d102      	bne.n	8009a98 <_kill_r+0x1c>
 8009a92:	682b      	ldr	r3, [r5, #0]
 8009a94:	b103      	cbz	r3, 8009a98 <_kill_r+0x1c>
 8009a96:	6023      	str	r3, [r4, #0]
 8009a98:	bd38      	pop	{r3, r4, r5, pc}
 8009a9a:	bf00      	nop
 8009a9c:	2000044c 	.word	0x2000044c

08009aa0 <_getpid_r>:
 8009aa0:	f7f7 bdec 	b.w	800167c <_getpid>

08009aa4 <_init>:
 8009aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa6:	bf00      	nop
 8009aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aaa:	bc08      	pop	{r3}
 8009aac:	469e      	mov	lr, r3
 8009aae:	4770      	bx	lr

08009ab0 <_fini>:
 8009ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab2:	bf00      	nop
 8009ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ab6:	bc08      	pop	{r3}
 8009ab8:	469e      	mov	lr, r3
 8009aba:	4770      	bx	lr
