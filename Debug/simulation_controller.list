
simulation_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08006784  08006784  00016784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006880  08006880  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006880  08006880  00016880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006888  08006888  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006888  08006888  00016888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800688c  0800688c  0001688c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000070  08006900  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08006900  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e37  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f6  00000000  00000000  00034ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  000377d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00038630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029584  00000000  00000000  00039378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001150d  00000000  00000000  000628fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe76b  00000000  00000000  00073e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00172574  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004240  00000000  00000000  001725c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800676c 	.word	0x0800676c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800676c 	.word	0x0800676c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
 8000588:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800058a:	4b36      	ldr	r3, [pc, #216]	; (8000664 <MX_ADC1_Init+0xfc>)
 800058c:	4a36      	ldr	r2, [pc, #216]	; (8000668 <MX_ADC1_Init+0x100>)
 800058e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000590:	4b34      	ldr	r3, [pc, #208]	; (8000664 <MX_ADC1_Init+0xfc>)
 8000592:	2200      	movs	r2, #0
 8000594:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000596:	4b33      	ldr	r3, [pc, #204]	; (8000664 <MX_ADC1_Init+0xfc>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800059c:	4b31      	ldr	r3, [pc, #196]	; (8000664 <MX_ADC1_Init+0xfc>)
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005a2:	4b30      	ldr	r3, [pc, #192]	; (8000664 <MX_ADC1_Init+0xfc>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005a8:	4b2e      	ldr	r3, [pc, #184]	; (8000664 <MX_ADC1_Init+0xfc>)
 80005aa:	2204      	movs	r2, #4
 80005ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005ae:	4b2d      	ldr	r3, [pc, #180]	; (8000664 <MX_ADC1_Init+0xfc>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005b4:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <MX_ADC1_Init+0xfc>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80005ba:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <MX_ADC1_Init+0xfc>)
 80005bc:	2202      	movs	r2, #2
 80005be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c0:	4b28      	ldr	r3, [pc, #160]	; (8000664 <MX_ADC1_Init+0xfc>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c8:	4b26      	ldr	r3, [pc, #152]	; (8000664 <MX_ADC1_Init+0xfc>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ce:	4b25      	ldr	r3, [pc, #148]	; (8000664 <MX_ADC1_Init+0xfc>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005d4:	4b23      	ldr	r3, [pc, #140]	; (8000664 <MX_ADC1_Init+0xfc>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005dc:	4b21      	ldr	r3, [pc, #132]	; (8000664 <MX_ADC1_Init+0xfc>)
 80005de:	2200      	movs	r2, #0
 80005e0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005e2:	4b20      	ldr	r3, [pc, #128]	; (8000664 <MX_ADC1_Init+0xfc>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ea:	481e      	ldr	r0, [pc, #120]	; (8000664 <MX_ADC1_Init+0xfc>)
 80005ec:	f000 ffc0 	bl	8001570 <HAL_ADC_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80005f6:	f000 fad6 	bl	8000ba6 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	4619      	mov	r1, r3
 8000604:	4817      	ldr	r0, [pc, #92]	; (8000664 <MX_ADC1_Init+0xfc>)
 8000606:	f002 fb8b 	bl	8002d20 <HAL_ADCEx_MultiModeConfigChannel>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000610:	f000 fac9 	bl	8000ba6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <MX_ADC1_Init+0x104>)
 8000616:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000618:	2306      	movs	r3, #6
 800061a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800061c:	2305      	movs	r3, #5
 800061e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000620:	237f      	movs	r3, #127	; 0x7f
 8000622:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000624:	2304      	movs	r3, #4
 8000626:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	4619      	mov	r1, r3
 8000630:	480c      	ldr	r0, [pc, #48]	; (8000664 <MX_ADC1_Init+0xfc>)
 8000632:	f001 fd27 	bl	8002084 <HAL_ADC_ConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800063c:	f000 fab3 	bl	8000ba6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_ADC1_Init+0x108>)
 8000642:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000644:	230c      	movs	r3, #12
 8000646:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	4619      	mov	r1, r3
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_ADC1_Init+0xfc>)
 800064e:	f001 fd19 	bl	8002084 <HAL_ADC_ConfigChannel>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000658:	f000 faa5 	bl	8000ba6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	3728      	adds	r7, #40	; 0x28
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000108 	.word	0x20000108
 8000668:	50040000 	.word	0x50040000
 800066c:	04300002 	.word	0x04300002
 8000670:	08600004 	.word	0x08600004

08000674 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800067a:	463b      	mov	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
 8000688:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800068a:	4b29      	ldr	r3, [pc, #164]	; (8000730 <MX_ADC2_Init+0xbc>)
 800068c:	4a29      	ldr	r2, [pc, #164]	; (8000734 <MX_ADC2_Init+0xc0>)
 800068e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000690:	4b27      	ldr	r3, [pc, #156]	; (8000730 <MX_ADC2_Init+0xbc>)
 8000692:	2200      	movs	r2, #0
 8000694:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000696:	4b26      	ldr	r3, [pc, #152]	; (8000730 <MX_ADC2_Init+0xbc>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800069c:	4b24      	ldr	r3, [pc, #144]	; (8000730 <MX_ADC2_Init+0xbc>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006a2:	4b23      	ldr	r3, [pc, #140]	; (8000730 <MX_ADC2_Init+0xbc>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a8:	4b21      	ldr	r3, [pc, #132]	; (8000730 <MX_ADC2_Init+0xbc>)
 80006aa:	2204      	movs	r2, #4
 80006ac:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006ae:	4b20      	ldr	r3, [pc, #128]	; (8000730 <MX_ADC2_Init+0xbc>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <MX_ADC2_Init+0xbc>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80006ba:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <MX_ADC2_Init+0xbc>)
 80006bc:	2201      	movs	r2, #1
 80006be:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_ADC2_Init+0xbc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c8:	4b19      	ldr	r3, [pc, #100]	; (8000730 <MX_ADC2_Init+0xbc>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_ADC2_Init+0xbc>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_ADC2_Init+0xbc>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_ADC2_Init+0xbc>)
 80006de:	2200      	movs	r2, #0
 80006e0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80006e2:	4b13      	ldr	r3, [pc, #76]	; (8000730 <MX_ADC2_Init+0xbc>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006ea:	4811      	ldr	r0, [pc, #68]	; (8000730 <MX_ADC2_Init+0xbc>)
 80006ec:	f000 ff40 	bl	8001570 <HAL_ADC_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80006f6:	f000 fa56 	bl	8000ba6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_ADC2_Init+0xc4>)
 80006fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006fe:	2306      	movs	r3, #6
 8000700:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000702:	2305      	movs	r3, #5
 8000704:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000706:	237f      	movs	r3, #127	; 0x7f
 8000708:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800070a:	2304      	movs	r3, #4
 800070c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000712:	463b      	mov	r3, r7
 8000714:	4619      	mov	r1, r3
 8000716:	4806      	ldr	r0, [pc, #24]	; (8000730 <MX_ADC2_Init+0xbc>)
 8000718:	f001 fcb4 	bl	8002084 <HAL_ADC_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000722:	f000 fa40 	bl	8000ba6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200000a4 	.word	0x200000a4
 8000734:	50040100 	.word	0x50040100
 8000738:	3ef08000 	.word	0x3ef08000

0800073c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	; 0x30
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a50      	ldr	r2, [pc, #320]	; (800089c <HAL_ADC_MspInit+0x160>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d160      	bne.n	8000820 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800075e:	4b50      	ldr	r3, [pc, #320]	; (80008a0 <HAL_ADC_MspInit+0x164>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	3301      	adds	r3, #1
 8000764:	4a4e      	ldr	r2, [pc, #312]	; (80008a0 <HAL_ADC_MspInit+0x164>)
 8000766:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000768:	4b4d      	ldr	r3, [pc, #308]	; (80008a0 <HAL_ADC_MspInit+0x164>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d10b      	bne.n	8000788 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000770:	4b4c      	ldr	r3, [pc, #304]	; (80008a4 <HAL_ADC_MspInit+0x168>)
 8000772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000774:	4a4b      	ldr	r2, [pc, #300]	; (80008a4 <HAL_ADC_MspInit+0x168>)
 8000776:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800077a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077c:	4b49      	ldr	r3, [pc, #292]	; (80008a4 <HAL_ADC_MspInit+0x168>)
 800077e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000784:	61bb      	str	r3, [r7, #24]
 8000786:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000788:	4b46      	ldr	r3, [pc, #280]	; (80008a4 <HAL_ADC_MspInit+0x168>)
 800078a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078c:	4a45      	ldr	r2, [pc, #276]	; (80008a4 <HAL_ADC_MspInit+0x168>)
 800078e:	f043 0304 	orr.w	r3, r3, #4
 8000792:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000794:	4b43      	ldr	r3, [pc, #268]	; (80008a4 <HAL_ADC_MspInit+0x168>)
 8000796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000798:	f003 0304 	and.w	r3, r3, #4
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007a0:	2303      	movs	r3, #3
 80007a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80007a4:	230b      	movs	r3, #11
 80007a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4619      	mov	r1, r3
 80007b2:	483d      	ldr	r0, [pc, #244]	; (80008a8 <HAL_ADC_MspInit+0x16c>)
 80007b4:	f002 fe6e 	bl	8003494 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80007b8:	4b3c      	ldr	r3, [pc, #240]	; (80008ac <HAL_ADC_MspInit+0x170>)
 80007ba:	4a3d      	ldr	r2, [pc, #244]	; (80008b0 <HAL_ADC_MspInit+0x174>)
 80007bc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80007be:	4b3b      	ldr	r3, [pc, #236]	; (80008ac <HAL_ADC_MspInit+0x170>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007c4:	4b39      	ldr	r3, [pc, #228]	; (80008ac <HAL_ADC_MspInit+0x170>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ca:	4b38      	ldr	r3, [pc, #224]	; (80008ac <HAL_ADC_MspInit+0x170>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007d0:	4b36      	ldr	r3, [pc, #216]	; (80008ac <HAL_ADC_MspInit+0x170>)
 80007d2:	2280      	movs	r2, #128	; 0x80
 80007d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007d6:	4b35      	ldr	r3, [pc, #212]	; (80008ac <HAL_ADC_MspInit+0x170>)
 80007d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007de:	4b33      	ldr	r3, [pc, #204]	; (80008ac <HAL_ADC_MspInit+0x170>)
 80007e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007e6:	4b31      	ldr	r3, [pc, #196]	; (80008ac <HAL_ADC_MspInit+0x170>)
 80007e8:	2220      	movs	r2, #32
 80007ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007ec:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <HAL_ADC_MspInit+0x170>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007f2:	482e      	ldr	r0, [pc, #184]	; (80008ac <HAL_ADC_MspInit+0x170>)
 80007f4:	f002 fc56 	bl	80030a4 <HAL_DMA_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80007fe:	f000 f9d2 	bl	8000ba6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a29      	ldr	r2, [pc, #164]	; (80008ac <HAL_ADC_MspInit+0x170>)
 8000806:	64da      	str	r2, [r3, #76]	; 0x4c
 8000808:	4a28      	ldr	r2, [pc, #160]	; (80008ac <HAL_ADC_MspInit+0x170>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2012      	movs	r0, #18
 8000814:	f002 fc0f 	bl	8003036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000818:	2012      	movs	r0, #18
 800081a:	f002 fc28 	bl	800306e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800081e:	e039      	b.n	8000894 <HAL_ADC_MspInit+0x158>
  else if(adcHandle->Instance==ADC2)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a23      	ldr	r2, [pc, #140]	; (80008b4 <HAL_ADC_MspInit+0x178>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d134      	bne.n	8000894 <HAL_ADC_MspInit+0x158>
    HAL_RCC_ADC_CLK_ENABLED++;
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <HAL_ADC_MspInit+0x164>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	3301      	adds	r3, #1
 8000830:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <HAL_ADC_MspInit+0x164>)
 8000832:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000834:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <HAL_ADC_MspInit+0x164>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d10b      	bne.n	8000854 <HAL_ADC_MspInit+0x118>
      __HAL_RCC_ADC_CLK_ENABLE();
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <HAL_ADC_MspInit+0x168>)
 800083e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000840:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <HAL_ADC_MspInit+0x168>)
 8000842:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000846:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <HAL_ADC_MspInit+0x168>)
 800084a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <HAL_ADC_MspInit+0x168>)
 8000856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000858:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <HAL_ADC_MspInit+0x168>)
 800085a:	f043 0302 	orr.w	r3, r3, #2
 800085e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <HAL_ADC_MspInit+0x168>)
 8000862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000864:	f003 0302 	and.w	r3, r3, #2
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800086c:	2301      	movs	r3, #1
 800086e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000870:	230b      	movs	r3, #11
 8000872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	480e      	ldr	r0, [pc, #56]	; (80008b8 <HAL_ADC_MspInit+0x17c>)
 8000880:	f002 fe08 	bl	8003494 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	2012      	movs	r0, #18
 800088a:	f002 fbd4 	bl	8003036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800088e:	2012      	movs	r0, #18
 8000890:	f002 fbed 	bl	800306e <HAL_NVIC_EnableIRQ>
}
 8000894:	bf00      	nop
 8000896:	3730      	adds	r7, #48	; 0x30
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	50040000 	.word	0x50040000
 80008a0:	2000008c 	.word	0x2000008c
 80008a4:	40021000 	.word	0x40021000
 80008a8:	48000800 	.word	0x48000800
 80008ac:	2000016c 	.word	0x2000016c
 80008b0:	40020008 	.word	0x40020008
 80008b4:	50040100 	.word	0x50040100
 80008b8:	48000400 	.word	0x48000400

080008bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_DMA_Init+0x38>)
 80008c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008c6:	4a0b      	ldr	r2, [pc, #44]	; (80008f4 <MX_DMA_Init+0x38>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6493      	str	r3, [r2, #72]	; 0x48
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_DMA_Init+0x38>)
 80008d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	200b      	movs	r0, #11
 80008e0:	f002 fba9 	bl	8003036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008e4:	200b      	movs	r0, #11
 80008e6:	f002 fbc2 	bl	800306e <HAL_NVIC_EnableIRQ>

}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000

080008f8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_GPIO_Init+0x5c>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a14      	ldr	r2, [pc, #80]	; (8000954 <MX_GPIO_Init+0x5c>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_GPIO_Init+0x5c>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_GPIO_Init+0x5c>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <MX_GPIO_Init+0x5c>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_GPIO_Init+0x5c>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_GPIO_Init+0x5c>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <MX_GPIO_Init+0x5c>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_GPIO_Init+0x5c>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

}
 8000946:	bf00      	nop
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000

08000958 <_write>:
/* USER CODE BEGIN 0 */

volatile int pot_flag = 0;
volatile uint32_t pot_value = 0;

int _write(int file, char* ptr, int len) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 50);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	b29a      	uxth	r2, r3
 8000968:	2332      	movs	r3, #50	; 0x32
 800096a:	68b9      	ldr	r1, [r7, #8]
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <_write+0x24>)
 800096e:	f004 faa7 	bl	8004ec0 <HAL_UART_Transmit>
	return len;
 8000972:	687b      	ldr	r3, [r7, #4]
}
 8000974:	4618      	mov	r0, r3
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000238 	.word	0x20000238

08000980 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc2) {
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a08      	ldr	r2, [pc, #32]	; (80009ac <HAL_ADC_ConvCpltCallback+0x2c>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d108      	bne.n	80009a2 <HAL_ADC_ConvCpltCallback+0x22>
		pot_flag = 1;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <HAL_ADC_ConvCpltCallback+0x30>)
 8000992:	2201      	movs	r2, #1
 8000994:	601a      	str	r2, [r3, #0]
		pot_value = HAL_ADC_GetValue(hadc);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f001 f92e 	bl	8001bf8 <HAL_ADC_GetValue>
 800099c:	4603      	mov	r3, r0
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <HAL_ADC_ConvCpltCallback+0x34>)
 80009a0:	6013      	str	r3, [r2, #0]
	}
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200000a4 	.word	0x200000a4
 80009b0:	20000090 	.word	0x20000090
 80009b4:	20000094 	.word	0x20000094

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009be:	f000 fb22 	bl	8001006 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c2:	f000 f873 	bl	8000aac <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009c6:	f000 f8c3 	bl	8000b50 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ca:	f7ff ff95 	bl	80008f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80009ce:	f7ff ff75 	bl	80008bc <MX_DMA_Init>
  MX_ADC1_Init();
 80009d2:	f7ff fdc9 	bl	8000568 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80009d6:	f000 fa1b 	bl	8000e10 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80009da:	f7ff fe4b 	bl	8000674 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 80009de:	f000 f9e7 	bl	8000db0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint16_t joystick[2];
  const uint16_t buf_size = 6;
 80009e2:	2306      	movs	r3, #6
 80009e4:	81fb      	strh	r3, [r7, #14]
  uint8_t bluetooth_buf[buf_size];
 80009e6:	89fb      	ldrh	r3, [r7, #14]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	89f8      	ldrh	r0, [r7, #14]
 80009ee:	f04f 0100 	mov.w	r1, #0
 80009f2:	f04f 0200 	mov.w	r2, #0
 80009f6:	f04f 0300 	mov.w	r3, #0
 80009fa:	00cb      	lsls	r3, r1, #3
 80009fc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a00:	00c2      	lsls	r2, r0, #3
 8000a02:	89f8      	ldrh	r0, [r7, #14]
 8000a04:	f04f 0100 	mov.w	r1, #0
 8000a08:	f04f 0200 	mov.w	r2, #0
 8000a0c:	f04f 0300 	mov.w	r3, #0
 8000a10:	00cb      	lsls	r3, r1, #3
 8000a12:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a16:	00c2      	lsls	r2, r0, #3
 8000a18:	89fb      	ldrh	r3, [r7, #14]
 8000a1a:	3307      	adds	r3, #7
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	ebad 0d03 	sub.w	sp, sp, r3
 8000a24:	466b      	mov	r3, sp
 8000a26:	3300      	adds	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000a2a:	217f      	movs	r1, #127	; 0x7f
 8000a2c:	4819      	ldr	r0, [pc, #100]	; (8000a94 <main+0xdc>)
 8000a2e:	f002 f8e5 	bl	8002bfc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)joystick, 2);
 8000a32:	463b      	mov	r3, r7
 8000a34:	2202      	movs	r2, #2
 8000a36:	4619      	mov	r1, r3
 8000a38:	4816      	ldr	r0, [pc, #88]	; (8000a94 <main+0xdc>)
 8000a3a:	f001 f821 	bl	8001a80 <HAL_ADC_Start_DMA>

  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000a3e:	217f      	movs	r1, #127	; 0x7f
 8000a40:	4815      	ldr	r0, [pc, #84]	; (8000a98 <main+0xe0>)
 8000a42:	f002 f8db 	bl	8002bfc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc2);
 8000a46:	4814      	ldr	r0, [pc, #80]	; (8000a98 <main+0xe0>)
 8000a48:	f000 fee8 	bl	800181c <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (pot_flag == 1) {
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <main+0xe4>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d11b      	bne.n	8000a8c <main+0xd4>
		  pot_flag = 0;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <main+0xe4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
		  printf("speed: %ld, x: %d, y: %d\r\n", pot_value, joystick[0], joystick[1]);
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <main+0xe8>)
 8000a5c:	6819      	ldr	r1, [r3, #0]
 8000a5e:	883b      	ldrh	r3, [r7, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	887b      	ldrh	r3, [r7, #2]
 8000a64:	480f      	ldr	r0, [pc, #60]	; (8000aa4 <main+0xec>)
 8000a66:	f004 ff2b 	bl	80058c0 <iprintf>

		  memcpy(bluetooth_buf, (uint32_t*)&pot_value, sizeof(pot_value));
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a0c      	ldr	r2, [pc, #48]	; (8000aa0 <main+0xe8>)
 8000a6e:	6812      	ldr	r2, [r2, #0]
 8000a70:	601a      	str	r2, [r3, #0]
		  memcpy(&bluetooth_buf[4], &joystick[0], sizeof(joystick[0]));
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	3304      	adds	r3, #4
 8000a76:	883a      	ldrh	r2, [r7, #0]
 8000a78:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, bluetooth_buf, buf_size, 50);
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	89fa      	ldrh	r2, [r7, #14]
 8000a7e:	2332      	movs	r3, #50	; 0x32
 8000a80:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <main+0xf0>)
 8000a82:	f004 fa1d 	bl	8004ec0 <HAL_UART_Transmit>

		  HAL_ADC_Start_IT(&hadc2);
 8000a86:	4804      	ldr	r0, [pc, #16]	; (8000a98 <main+0xe0>)
 8000a88:	f000 fec8 	bl	800181c <HAL_ADC_Start_IT>
	  }
	  HAL_Delay(50);
 8000a8c:	2032      	movs	r0, #50	; 0x32
 8000a8e:	f000 fb2f 	bl	80010f0 <HAL_Delay>
	  if (pot_flag == 1) {
 8000a92:	e7db      	b.n	8000a4c <main+0x94>
 8000a94:	20000108 	.word	0x20000108
 8000a98:	200000a4 	.word	0x200000a4
 8000a9c:	20000090 	.word	0x20000090
 8000aa0:	20000094 	.word	0x20000094
 8000aa4:	08006784 	.word	0x08006784
 8000aa8:	200001b4 	.word	0x200001b4

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b096      	sub	sp, #88	; 0x58
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	2244      	movs	r2, #68	; 0x44
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f004 fef8 	bl	80058b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ace:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ad2:	f002 fe97 	bl	8003804 <HAL_PWREx_ControlVoltageScaling>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000adc:	f000 f863 	bl	8000ba6 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ae0:	2310      	movs	r3, #16
 8000ae2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000aec:	2360      	movs	r3, #96	; 0x60
 8000aee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af0:	2302      	movs	r3, #2
 8000af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000af4:	2301      	movs	r3, #1
 8000af6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000afc:	2328      	movs	r3, #40	; 0x28
 8000afe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b00:	2307      	movs	r3, #7
 8000b02:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4618      	mov	r0, r3
 8000b12:	f002 fecd 	bl	80038b0 <HAL_RCC_OscConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000b1c:	f000 f843 	bl	8000ba6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b20:	230f      	movs	r3, #15
 8000b22:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b24:	2303      	movs	r3, #3
 8000b26:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b34:	463b      	mov	r3, r7
 8000b36:	2104      	movs	r1, #4
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 fa93 	bl	8004064 <HAL_RCC_ClockConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b44:	f000 f82f 	bl	8000ba6 <Error_Handler>
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3758      	adds	r7, #88	; 0x58
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b0a2      	sub	sp, #136	; 0x88
 8000b54:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b56:	463b      	mov	r3, r7
 8000b58:	2288      	movs	r2, #136	; 0x88
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f004 fea7 	bl	80058b0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b66:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b6c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b72:	2301      	movs	r3, #1
 8000b74:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000b76:	2310      	movs	r3, #16
 8000b78:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b8a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f003 fc8c 	bl	80044ac <HAL_RCCEx_PeriphCLKConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000b9a:	f000 f804 	bl	8000ba6 <Error_Handler>
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3788      	adds	r7, #136	; 0x88
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000baa:	b672      	cpsid	i
}
 8000bac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bae:	e7fe      	b.n	8000bae <Error_Handler+0x8>

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c44:	f000 fa34 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <DMA1_Channel1_IRQHandler+0x10>)
 8000c52:	f002 fb3f 	bl	80032d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000016c 	.word	0x2000016c

08000c60 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c64:	4803      	ldr	r0, [pc, #12]	; (8000c74 <ADC1_2_IRQHandler+0x14>)
 8000c66:	f000 ffd5 	bl	8001c14 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000c6a:	4803      	ldr	r0, [pc, #12]	; (8000c78 <ADC1_2_IRQHandler+0x18>)
 8000c6c:	f000 ffd2 	bl	8001c14 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000108 	.word	0x20000108
 8000c78:	200000a4 	.word	0x200000a4

08000c7c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	e00a      	b.n	8000ca4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c8e:	f3af 8000 	nop.w
 8000c92:	4601      	mov	r1, r0
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	60ba      	str	r2, [r7, #8]
 8000c9a:	b2ca      	uxtb	r2, r1
 8000c9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dbf0      	blt.n	8000c8e <_read+0x12>
	}

return len;
 8000cac:	687b      	ldr	r3, [r7, #4]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
	return -1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cde:	605a      	str	r2, [r3, #4]
	return 0;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <_isatty>:

int _isatty(int file)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
	return 1;
 8000cf6:	2301      	movs	r3, #1
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d28:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <_sbrk+0x5c>)
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <_sbrk+0x60>)
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d102      	bne.n	8000d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <_sbrk+0x64>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <_sbrk+0x68>)
 8000d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d207      	bcs.n	8000d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d50:	f004 fd84 	bl	800585c <__errno>
 8000d54:	4603      	mov	r3, r0
 8000d56:	220c      	movs	r2, #12
 8000d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d5e:	e009      	b.n	8000d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <_sbrk+0x64>)
 8000d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20018000 	.word	0x20018000
 8000d80:	00000400 	.word	0x00000400
 8000d84:	20000098 	.word	0x20000098
 8000d88:	200002d0 	.word	0x200002d0

08000d8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <SystemInit+0x20>)
 8000d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <SystemInit+0x20>)
 8000d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_USART1_UART_Init+0x58>)
 8000db6:	4a15      	ldr	r2, [pc, #84]	; (8000e0c <MX_USART1_UART_Init+0x5c>)
 8000db8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <MX_USART1_UART_Init+0x58>)
 8000dbc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000dc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_USART1_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_USART1_UART_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MX_USART1_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_USART1_UART_Init+0x58>)
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <MX_USART1_UART_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_USART1_UART_Init+0x58>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <MX_USART1_UART_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_USART1_UART_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <MX_USART1_UART_Init+0x58>)
 8000df4:	f004 f816 	bl	8004e24 <HAL_UART_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dfe:	f7ff fed2 	bl	8000ba6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200001b4 	.word	0x200001b4
 8000e0c:	40013800 	.word	0x40013800

08000e10 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <MX_USART2_UART_Init+0x58>)
 8000e16:	4a15      	ldr	r2, [pc, #84]	; (8000e6c <MX_USART2_UART_Init+0x5c>)
 8000e18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <MX_USART2_UART_Init+0x58>)
 8000e1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <MX_USART2_UART_Init+0x58>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <MX_USART2_UART_Init+0x58>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <MX_USART2_UART_Init+0x58>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <MX_USART2_UART_Init+0x58>)
 8000e36:	220c      	movs	r2, #12
 8000e38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <MX_USART2_UART_Init+0x58>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <MX_USART2_UART_Init+0x58>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <MX_USART2_UART_Init+0x58>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <MX_USART2_UART_Init+0x58>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e52:	4805      	ldr	r0, [pc, #20]	; (8000e68 <MX_USART2_UART_Init+0x58>)
 8000e54:	f003 ffe6 	bl	8004e24 <HAL_UART_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e5e:	f7ff fea2 	bl	8000ba6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000238 	.word	0x20000238
 8000e6c:	40004400 	.word	0x40004400

08000e70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b0ae      	sub	sp, #184	; 0xb8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	2288      	movs	r2, #136	; 0x88
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f004 fd0d 	bl	80058b0 <memset>
  if(uartHandle->Instance==USART1)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a43      	ldr	r2, [pc, #268]	; (8000fa8 <HAL_UART_MspInit+0x138>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d13d      	bne.n	8000f1c <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4618      	mov	r0, r3
 8000eae:	f003 fafd 	bl	80044ac <HAL_RCCEx_PeriphCLKConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000eb8:	f7ff fe75 	bl	8000ba6 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ebc:	4b3b      	ldr	r3, [pc, #236]	; (8000fac <HAL_UART_MspInit+0x13c>)
 8000ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec0:	4a3a      	ldr	r2, [pc, #232]	; (8000fac <HAL_UART_MspInit+0x13c>)
 8000ec2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ec8:	4b38      	ldr	r3, [pc, #224]	; (8000fac <HAL_UART_MspInit+0x13c>)
 8000eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed0:	61bb      	str	r3, [r7, #24]
 8000ed2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b35      	ldr	r3, [pc, #212]	; (8000fac <HAL_UART_MspInit+0x13c>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed8:	4a34      	ldr	r2, [pc, #208]	; (8000fac <HAL_UART_MspInit+0x13c>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee0:	4b32      	ldr	r3, [pc, #200]	; (8000fac <HAL_UART_MspInit+0x13c>)
 8000ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000eec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ef0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f06:	2307      	movs	r3, #7
 8000f08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f10:	4619      	mov	r1, r3
 8000f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f16:	f002 fabd 	bl	8003494 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f1a:	e040      	b.n	8000f9e <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a23      	ldr	r2, [pc, #140]	; (8000fb0 <HAL_UART_MspInit+0x140>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d13b      	bne.n	8000f9e <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f26:	2302      	movs	r3, #2
 8000f28:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4618      	mov	r0, r3
 8000f34:	f003 faba 	bl	80044ac <HAL_RCCEx_PeriphCLKConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8000f3e:	f7ff fe32 	bl	8000ba6 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <HAL_UART_MspInit+0x13c>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f46:	4a19      	ldr	r2, [pc, #100]	; (8000fac <HAL_UART_MspInit+0x13c>)
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <HAL_UART_MspInit+0x13c>)
 8000f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_UART_MspInit+0x13c>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	4a13      	ldr	r2, [pc, #76]	; (8000fac <HAL_UART_MspInit+0x13c>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <HAL_UART_MspInit+0x13c>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f72:	230c      	movs	r3, #12
 8000f74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f84:	2303      	movs	r3, #3
 8000f86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f94:	4619      	mov	r1, r3
 8000f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9a:	f002 fa7b 	bl	8003494 <HAL_GPIO_Init>
}
 8000f9e:	bf00      	nop
 8000fa0:	37b8      	adds	r7, #184	; 0xb8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40013800 	.word	0x40013800
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40004400 	.word	0x40004400

08000fb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fb8:	f7ff fee8 	bl	8000d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	; (8000ff4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <LoopForever+0xe>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	; (8001000 <LoopForever+0x16>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f004 fc41 	bl	8005868 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fe6:	f7ff fce7 	bl	80009b8 <main>

08000fea <LoopForever>:

LoopForever:
    b LoopForever
 8000fea:	e7fe      	b.n	8000fea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ff8:	08006890 	.word	0x08006890
  ldr r2, =_sbss
 8000ffc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001000:	200002d0 	.word	0x200002d0

08001004 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC3_IRQHandler>

08001006 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f002 f805 	bl	8003020 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001016:	200f      	movs	r0, #15
 8001018:	f000 f80e 	bl	8001038 <HAL_InitTick>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	71fb      	strb	r3, [r7, #7]
 8001026:	e001      	b.n	800102c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001028:	f7ff fdc2 	bl	8000bb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800102c:	79fb      	ldrb	r3, [r7, #7]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <HAL_InitTick+0x6c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d023      	beq.n	8001094 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <HAL_InitTick+0x70>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <HAL_InitTick+0x6c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105a:	fbb3 f3f1 	udiv	r3, r3, r1
 800105e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f002 f811 	bl	800308a <HAL_SYSTICK_Config>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10f      	bne.n	800108e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b0f      	cmp	r3, #15
 8001072:	d809      	bhi.n	8001088 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001074:	2200      	movs	r2, #0
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800107c:	f001 ffdb 	bl	8003036 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001080:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <HAL_InitTick+0x74>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e007      	b.n	8001098 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	e004      	b.n	8001098 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	73fb      	strb	r3, [r7, #15]
 8001092:	e001      	b.n	8001098 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000004 	.word	0x20000004

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008
 80010d4:	200002bc 	.word	0x200002bc

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	200002bc 	.word	0x200002bc

080010f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff ffee 	bl	80010d8 <HAL_GetTick>
 80010fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001108:	d005      	beq.n	8001116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_Delay+0x44>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001116:	bf00      	nop
 8001118:	f7ff ffde 	bl	80010d8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	d8f7      	bhi.n	8001118 <HAL_Delay+0x28>
  {
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000008 	.word	0x20000008

08001138 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	431a      	orrs	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	609a      	str	r2, [r3, #8]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	431a      	orrs	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	609a      	str	r2, [r3, #8]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b087      	sub	sp, #28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	3360      	adds	r3, #96	; 0x60
 80011b2:	461a      	mov	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <LL_ADC_SetOffset+0x44>)
 80011c2:	4013      	ands	r3, r2
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	4313      	orrs	r3, r2
 80011d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011d8:	bf00      	nop
 80011da:	371c      	adds	r7, #28
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	03fff000 	.word	0x03fff000

080011e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3360      	adds	r3, #96	; 0x60
 80011f6:	461a      	mov	r2, r3
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001208:	4618      	mov	r0, r3
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	3360      	adds	r3, #96	; 0x60
 8001224:	461a      	mov	r2, r3
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	431a      	orrs	r2, r3
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800123e:	bf00      	nop
 8001240:	371c      	adds	r7, #28
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3330      	adds	r3, #48	; 0x30
 8001280:	461a      	mov	r2, r3
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	f003 030c 	and.w	r3, r3, #12
 800128c:	4413      	add	r3, r2
 800128e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	f003 031f 	and.w	r3, r3, #31
 800129a:	211f      	movs	r1, #31
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	401a      	ands	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	0e9b      	lsrs	r3, r3, #26
 80012a8:	f003 011f 	and.w	r1, r3, #31
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	f003 031f 	and.w	r3, r3, #31
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	431a      	orrs	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012bc:	bf00      	nop
 80012be:	371c      	adds	r7, #28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80012dc:	2301      	movs	r3, #1
 80012de:	e000      	b.n	80012e2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b087      	sub	sp, #28
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3314      	adds	r3, #20
 80012fe:	461a      	mov	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	0e5b      	lsrs	r3, r3, #25
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	4413      	add	r3, r2
 800130c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	0d1b      	lsrs	r3, r3, #20
 8001316:	f003 031f 	and.w	r3, r3, #31
 800131a:	2107      	movs	r1, #7
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	401a      	ands	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	0d1b      	lsrs	r3, r3, #20
 8001328:	f003 031f 	and.w	r3, r3, #31
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	431a      	orrs	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001338:	bf00      	nop
 800133a:	371c      	adds	r7, #28
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800135c:	43db      	mvns	r3, r3
 800135e:	401a      	ands	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f003 0318 	and.w	r3, r3, #24
 8001366:	4908      	ldr	r1, [pc, #32]	; (8001388 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001368:	40d9      	lsrs	r1, r3
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	400b      	ands	r3, r1
 800136e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001372:	431a      	orrs	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	0007ffff 	.word	0x0007ffff

0800138c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 031f 	and.w	r3, r3, #31
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6093      	str	r3, [r2, #8]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013fc:	d101      	bne.n	8001402 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001420:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001424:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001448:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800144c:	d101      	bne.n	8001452 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800144e:	2301      	movs	r3, #1
 8001450:	e000      	b.n	8001454 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001470:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001474:	f043 0201 	orr.w	r2, r3, #1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001498:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800149c:	f043 0202 	orr.w	r2, r3, #2
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <LL_ADC_IsEnabled+0x18>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <LL_ADC_IsEnabled+0x1a>
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d101      	bne.n	80014ee <LL_ADC_IsDisableOngoing+0x18>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <LL_ADC_IsDisableOngoing+0x1a>
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800150c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001510:	f043 0204 	orr.w	r2, r3, #4
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b04      	cmp	r3, #4
 8001536:	d101      	bne.n	800153c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b08      	cmp	r3, #8
 800155c:	d101      	bne.n	8001562 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001578:	2300      	movs	r3, #0
 800157a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800157c:	2300      	movs	r3, #0
 800157e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e136      	b.n	80017f8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001594:	2b00      	cmp	r3, #0
 8001596:	d109      	bne.n	80015ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff f8cf 	bl	800073c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff19 	bl	80013e8 <LL_ADC_IsDeepPowerDownEnabled>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d004      	beq.n	80015c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff feff 	bl	80013c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff ff34 	bl	8001438 <LL_ADC_IsInternalRegulatorEnabled>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d115      	bne.n	8001602 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff ff18 	bl	8001410 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015e0:	4b87      	ldr	r3, [pc, #540]	; (8001800 <HAL_ADC_Init+0x290>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	099b      	lsrs	r3, r3, #6
 80015e6:	4a87      	ldr	r2, [pc, #540]	; (8001804 <HAL_ADC_Init+0x294>)
 80015e8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ec:	099b      	lsrs	r3, r3, #6
 80015ee:	3301      	adds	r3, #1
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015f4:	e002      	b.n	80015fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f9      	bne.n	80015f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ff16 	bl	8001438 <LL_ADC_IsInternalRegulatorEnabled>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10d      	bne.n	800162e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001616:	f043 0210 	orr.w	r2, r3, #16
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001622:	f043 0201 	orr.w	r2, r3, #1
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ff76 	bl	8001524 <LL_ADC_REG_IsConversionOngoing>
 8001638:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163e:	f003 0310 	and.w	r3, r3, #16
 8001642:	2b00      	cmp	r3, #0
 8001644:	f040 80cf 	bne.w	80017e6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2b00      	cmp	r3, #0
 800164c:	f040 80cb 	bne.w	80017e6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001654:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001658:	f043 0202 	orr.w	r2, r3, #2
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff23 	bl	80014b0 <LL_ADC_IsEnabled>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d115      	bne.n	800169c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001670:	4865      	ldr	r0, [pc, #404]	; (8001808 <HAL_ADC_Init+0x298>)
 8001672:	f7ff ff1d 	bl	80014b0 <LL_ADC_IsEnabled>
 8001676:	4604      	mov	r4, r0
 8001678:	4864      	ldr	r0, [pc, #400]	; (800180c <HAL_ADC_Init+0x29c>)
 800167a:	f7ff ff19 	bl	80014b0 <LL_ADC_IsEnabled>
 800167e:	4603      	mov	r3, r0
 8001680:	431c      	orrs	r4, r3
 8001682:	4863      	ldr	r0, [pc, #396]	; (8001810 <HAL_ADC_Init+0x2a0>)
 8001684:	f7ff ff14 	bl	80014b0 <LL_ADC_IsEnabled>
 8001688:	4603      	mov	r3, r0
 800168a:	4323      	orrs	r3, r4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d105      	bne.n	800169c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	4619      	mov	r1, r3
 8001696:	485f      	ldr	r0, [pc, #380]	; (8001814 <HAL_ADC_Init+0x2a4>)
 8001698:	f7ff fd4e 	bl	8001138 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	7e5b      	ldrb	r3, [r3, #25]
 80016a0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016a6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80016ac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80016b2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d106      	bne.n	80016d8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	3b01      	subs	r3, #1
 80016d0:	045b      	lsls	r3, r3, #17
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d009      	beq.n	80016f4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	4b47      	ldr	r3, [pc, #284]	; (8001818 <HAL_ADC_Init+0x2a8>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	69b9      	ldr	r1, [r7, #24]
 8001704:	430b      	orrs	r3, r1
 8001706:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff09 	bl	8001524 <LL_ADC_REG_IsConversionOngoing>
 8001712:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff16 	bl	800154a <LL_ADC_INJ_IsConversionOngoing>
 800171e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d13d      	bne.n	80017a2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d13a      	bne.n	80017a2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001730:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001738:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001748:	f023 0302 	bic.w	r3, r3, #2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	69b9      	ldr	r1, [r7, #24]
 8001752:	430b      	orrs	r3, r1
 8001754:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800175c:	2b01      	cmp	r3, #1
 800175e:	d118      	bne.n	8001792 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800176a:	f023 0304 	bic.w	r3, r3, #4
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001776:	4311      	orrs	r1, r2
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800177c:	4311      	orrs	r1, r2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001782:	430a      	orrs	r2, r1
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 0201 	orr.w	r2, r2, #1
 800178e:	611a      	str	r2, [r3, #16]
 8001790:	e007      	b.n	80017a2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0201 	bic.w	r2, r2, #1
 80017a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d10c      	bne.n	80017c4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b0:	f023 010f 	bic.w	r1, r3, #15
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	1e5a      	subs	r2, r3, #1
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	631a      	str	r2, [r3, #48]	; 0x30
 80017c2:	e007      	b.n	80017d4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 020f 	bic.w	r2, r2, #15
 80017d2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d8:	f023 0303 	bic.w	r3, r3, #3
 80017dc:	f043 0201 	orr.w	r2, r3, #1
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	655a      	str	r2, [r3, #84]	; 0x54
 80017e4:	e007      	b.n	80017f6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ea:	f043 0210 	orr.w	r2, r3, #16
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3724      	adds	r7, #36	; 0x24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd90      	pop	{r4, r7, pc}
 8001800:	20000000 	.word	0x20000000
 8001804:	053e2d63 	.word	0x053e2d63
 8001808:	50040000 	.word	0x50040000
 800180c:	50040100 	.word	0x50040100
 8001810:	50040200 	.word	0x50040200
 8001814:	50040300 	.word	0x50040300
 8001818:	fff0c007 	.word	0xfff0c007

0800181c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001824:	4893      	ldr	r0, [pc, #588]	; (8001a74 <HAL_ADC_Start_IT+0x258>)
 8001826:	f7ff fdb1 	bl	800138c <LL_ADC_GetMultimode>
 800182a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fe77 	bl	8001524 <LL_ADC_REG_IsConversionOngoing>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	f040 8111 	bne.w	8001a60 <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <HAL_ADC_Start_IT+0x30>
 8001848:	2302      	movs	r3, #2
 800184a:	e10e      	b.n	8001a6a <HAL_ADC_Start_IT+0x24e>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f001 f805 	bl	8002864 <ADC_Enable>
 800185a:	4603      	mov	r3, r0
 800185c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800185e:	7dfb      	ldrb	r3, [r7, #23]
 8001860:	2b00      	cmp	r3, #0
 8001862:	f040 80f8 	bne.w	8001a56 <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800186e:	f023 0301 	bic.w	r3, r3, #1
 8001872:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a7e      	ldr	r2, [pc, #504]	; (8001a78 <HAL_ADC_Start_IT+0x25c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d002      	beq.n	800188a <HAL_ADC_Start_IT+0x6e>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	e000      	b.n	800188c <HAL_ADC_Start_IT+0x70>
 800188a:	4b7c      	ldr	r3, [pc, #496]	; (8001a7c <HAL_ADC_Start_IT+0x260>)
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	4293      	cmp	r3, r2
 8001892:	d002      	beq.n	800189a <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d105      	bne.n	80018a6 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d006      	beq.n	80018c0 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b6:	f023 0206 	bic.w	r2, r3, #6
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	659a      	str	r2, [r3, #88]	; 0x58
 80018be:	e002      	b.n	80018c6 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	221c      	movs	r2, #28
 80018cc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 021c 	bic.w	r2, r2, #28
 80018e4:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d108      	bne.n	8001900 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f042 0208 	orr.w	r2, r2, #8
 80018fc:	605a      	str	r2, [r3, #4]
          break;
 80018fe:	e008      	b.n	8001912 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0204 	orr.w	r2, r2, #4
 800190e:	605a      	str	r2, [r3, #4]
          break;
 8001910:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001916:	2b00      	cmp	r3, #0
 8001918:	d107      	bne.n	800192a <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f042 0210 	orr.w	r2, r2, #16
 8001928:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a52      	ldr	r2, [pc, #328]	; (8001a78 <HAL_ADC_Start_IT+0x25c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d002      	beq.n	800193a <HAL_ADC_Start_IT+0x11e>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	e000      	b.n	800193c <HAL_ADC_Start_IT+0x120>
 800193a:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <HAL_ADC_Start_IT+0x260>)
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	4293      	cmp	r3, r2
 8001942:	d008      	beq.n	8001956 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d005      	beq.n	8001956 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	2b05      	cmp	r3, #5
 800194e:	d002      	beq.n	8001956 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	2b09      	cmp	r3, #9
 8001954:	d13b      	bne.n	80019ce <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d02d      	beq.n	80019c0 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001968:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800196c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	2b08      	cmp	r3, #8
 800197a:	d110      	bne.n	800199e <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0220 	bic.w	r2, r2, #32
 800198a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800199a:	605a      	str	r2, [r3, #4]
              break;
 800199c:	e011      	b.n	80019c2 <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019ac:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f042 0220 	orr.w	r2, r2, #32
 80019bc:	605a      	str	r2, [r3, #4]
              break;
 80019be:	e000      	b.n	80019c2 <HAL_ADC_Start_IT+0x1a6>
          }
        }
 80019c0:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fd98 	bl	80014fc <LL_ADC_REG_StartConversion>
 80019cc:	e04c      	b.n	8001a68 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a26      	ldr	r2, [pc, #152]	; (8001a78 <HAL_ADC_Start_IT+0x25c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d002      	beq.n	80019ea <HAL_ADC_Start_IT+0x1ce>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	e000      	b.n	80019ec <HAL_ADC_Start_IT+0x1d0>
 80019ea:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <HAL_ADC_Start_IT+0x260>)
 80019ec:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d035      	beq.n	8001a66 <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d110      	bne.n	8001a34 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0220 	bic.w	r2, r2, #32
 8001a20:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a30:	605a      	str	r2, [r3, #4]
              break;
 8001a32:	e019      	b.n	8001a68 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a42:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0220 	orr.w	r2, r2, #32
 8001a52:	605a      	str	r2, [r3, #4]
              break;
 8001a54:	e008      	b.n	8001a68 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001a5e:	e003      	b.n	8001a68 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a60:	2302      	movs	r3, #2
 8001a62:	75fb      	strb	r3, [r7, #23]
 8001a64:	e000      	b.n	8001a68 <HAL_ADC_Start_IT+0x24c>
        }
 8001a66:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8001a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	50040300 	.word	0x50040300
 8001a78:	50040100 	.word	0x50040100
 8001a7c:	50040000 	.word	0x50040000

08001a80 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a8c:	4853      	ldr	r0, [pc, #332]	; (8001bdc <HAL_ADC_Start_DMA+0x15c>)
 8001a8e:	f7ff fc7d 	bl	800138c <LL_ADC_GetMultimode>
 8001a92:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fd43 	bl	8001524 <LL_ADC_REG_IsConversionOngoing>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f040 8093 	bne.w	8001bcc <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_ADC_Start_DMA+0x34>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e08e      	b.n	8001bd2 <HAL_ADC_Start_DMA+0x152>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a47      	ldr	r2, [pc, #284]	; (8001be0 <HAL_ADC_Start_DMA+0x160>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d008      	beq.n	8001ad8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	2b05      	cmp	r3, #5
 8001ad0:	d002      	beq.n	8001ad8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	2b09      	cmp	r3, #9
 8001ad6:	d172      	bne.n	8001bbe <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 fec3 	bl	8002864 <ADC_Enable>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001ae2:	7dfb      	ldrb	r3, [r7, #23]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d165      	bne.n	8001bb4 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a38      	ldr	r2, [pc, #224]	; (8001be4 <HAL_ADC_Start_DMA+0x164>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d002      	beq.n	8001b0c <HAL_ADC_Start_DMA+0x8c>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	e000      	b.n	8001b0e <HAL_ADC_Start_DMA+0x8e>
 8001b0c:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <HAL_ADC_Start_DMA+0x168>)
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d002      	beq.n	8001b1c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d105      	bne.n	8001b28 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b20:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d006      	beq.n	8001b42 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b38:	f023 0206 	bic.w	r2, r3, #6
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	659a      	str	r2, [r3, #88]	; 0x58
 8001b40:	e002      	b.n	8001b48 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4c:	4a27      	ldr	r2, [pc, #156]	; (8001bec <HAL_ADC_Start_DMA+0x16c>)
 8001b4e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b54:	4a26      	ldr	r2, [pc, #152]	; (8001bf0 <HAL_ADC_Start_DMA+0x170>)
 8001b56:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5c:	4a25      	ldr	r2, [pc, #148]	; (8001bf4 <HAL_ADC_Start_DMA+0x174>)
 8001b5e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	221c      	movs	r2, #28
 8001b66:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0210 	orr.w	r2, r2, #16
 8001b7e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	3340      	adds	r3, #64	; 0x40
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f001 fb38 	bl	8003214 <HAL_DMA_Start_IT>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fca5 	bl	80014fc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001bb2:	e00d      	b.n	8001bd0 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001bbc:	e008      	b.n	8001bd0 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001bca:	e001      	b.n	8001bd0 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	50040300 	.word	0x50040300
 8001be0:	50040200 	.word	0x50040200
 8001be4:	50040100 	.word	0x50040100
 8001be8:	50040000 	.word	0x50040000
 8001bec:	08002a2f 	.word	0x08002a2f
 8001bf0:	08002b07 	.word	0x08002b07
 8001bf4:	08002b23 	.word	0x08002b23

08001bf8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c30:	4882      	ldr	r0, [pc, #520]	; (8001e3c <HAL_ADC_IRQHandler+0x228>)
 8001c32:	f7ff fbab 	bl	800138c <LL_ADC_GetMultimode>
 8001c36:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d017      	beq.n	8001c72 <HAL_ADC_IRQHandler+0x5e>
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d012      	beq.n	8001c72 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d105      	bne.n	8001c64 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f001 f851 	bl	8002d0c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d004      	beq.n	8001c86 <HAL_ADC_IRQHandler+0x72>
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10a      	bne.n	8001c9c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 8083 	beq.w	8001d98 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d07d      	beq.n	8001d98 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca0:	f003 0310 	and.w	r3, r3, #16
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d105      	bne.n	8001cb4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fac6 	bl	800124a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d062      	beq.n	8001d8a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a5d      	ldr	r2, [pc, #372]	; (8001e40 <HAL_ADC_IRQHandler+0x22c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d002      	beq.n	8001cd4 <HAL_ADC_IRQHandler+0xc0>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	e000      	b.n	8001cd6 <HAL_ADC_IRQHandler+0xc2>
 8001cd4:	4b5b      	ldr	r3, [pc, #364]	; (8001e44 <HAL_ADC_IRQHandler+0x230>)
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6812      	ldr	r2, [r2, #0]
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d008      	beq.n	8001cf0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b05      	cmp	r3, #5
 8001ce8:	d002      	beq.n	8001cf0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	2b09      	cmp	r3, #9
 8001cee:	d104      	bne.n	8001cfa <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	623b      	str	r3, [r7, #32]
 8001cf8:	e00c      	b.n	8001d14 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a50      	ldr	r2, [pc, #320]	; (8001e40 <HAL_ADC_IRQHandler+0x22c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d002      	beq.n	8001d0a <HAL_ADC_IRQHandler+0xf6>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	e000      	b.n	8001d0c <HAL_ADC_IRQHandler+0xf8>
 8001d0a:	4b4e      	ldr	r3, [pc, #312]	; (8001e44 <HAL_ADC_IRQHandler+0x230>)
 8001d0c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d135      	bne.n	8001d8a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d12e      	bne.n	8001d8a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fbf7 	bl	8001524 <LL_ADC_REG_IsConversionOngoing>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d11a      	bne.n	8001d72 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 020c 	bic.w	r2, r2, #12
 8001d4a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d112      	bne.n	8001d8a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d68:	f043 0201 	orr.w	r2, r3, #1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	655a      	str	r2, [r3, #84]	; 0x54
 8001d70:	e00b      	b.n	8001d8a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d76:	f043 0210 	orr.w	r2, r3, #16
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	f043 0201 	orr.w	r2, r3, #1
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7fe fdf8 	bl	8000980 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	220c      	movs	r2, #12
 8001d96:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d004      	beq.n	8001dac <HAL_ADC_IRQHandler+0x198>
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	f003 0320 	and.w	r3, r3, #32
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10b      	bne.n	8001dc4 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 809f 	beq.w	8001ef6 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 8099 	beq.w	8001ef6 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d105      	bne.n	8001ddc <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fa71 	bl	80012c8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001de6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fa2c 	bl	800124a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001df2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <HAL_ADC_IRQHandler+0x22c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d002      	beq.n	8001e04 <HAL_ADC_IRQHandler+0x1f0>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	e000      	b.n	8001e06 <HAL_ADC_IRQHandler+0x1f2>
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_ADC_IRQHandler+0x230>)
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6812      	ldr	r2, [r2, #0]
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d008      	beq.n	8001e20 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2b06      	cmp	r3, #6
 8001e18:	d002      	beq.n	8001e20 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2b07      	cmp	r3, #7
 8001e1e:	d104      	bne.n	8001e2a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	623b      	str	r3, [r7, #32]
 8001e28:	e013      	b.n	8001e52 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <HAL_ADC_IRQHandler+0x22c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d009      	beq.n	8001e48 <HAL_ADC_IRQHandler+0x234>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	e007      	b.n	8001e4a <HAL_ADC_IRQHandler+0x236>
 8001e3a:	bf00      	nop
 8001e3c:	50040300 	.word	0x50040300
 8001e40:	50040100 	.word	0x50040100
 8001e44:	50040000 	.word	0x50040000
 8001e48:	4b7d      	ldr	r3, [pc, #500]	; (8002040 <HAL_ADC_IRQHandler+0x42c>)
 8001e4a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d047      	beq.n	8001ee8 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d007      	beq.n	8001e72 <HAL_ADC_IRQHandler+0x25e>
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d03f      	beq.n	8001ee8 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d13a      	bne.n	8001ee8 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7c:	2b40      	cmp	r3, #64	; 0x40
 8001e7e:	d133      	bne.n	8001ee8 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001e80:	6a3b      	ldr	r3, [r7, #32]
 8001e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d12e      	bne.n	8001ee8 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fb5b 	bl	800154a <LL_ADC_INJ_IsConversionOngoing>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d11a      	bne.n	8001ed0 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ea8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d112      	bne.n	8001ee8 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec6:	f043 0201 	orr.w	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54
 8001ece:	e00b      	b.n	8001ee8 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed4:	f043 0210 	orr.w	r2, r3, #16
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee0:	f043 0201 	orr.w	r2, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 fee7 	bl	8002cbc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2260      	movs	r2, #96	; 0x60
 8001ef4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d011      	beq.n	8001f24 <HAL_ADC_IRQHandler+0x310>
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00c      	beq.n	8001f24 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f8a0 	bl	800205c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2280      	movs	r2, #128	; 0x80
 8001f22:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d012      	beq.n	8001f54 <HAL_ADC_IRQHandler+0x340>
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00d      	beq.n	8001f54 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 fecd 	bl	8002ce4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d012      	beq.n	8001f84 <HAL_ADC_IRQHandler+0x370>
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00d      	beq.n	8001f84 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 febf 	bl	8002cf8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f82:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d036      	beq.n	8001ffc <HAL_ADC_IRQHandler+0x3e8>
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	f003 0310 	and.w	r3, r3, #16
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d031      	beq.n	8001ffc <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa4:	e014      	b.n	8001fd0 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d008      	beq.n	8001fbe <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001fac:	4825      	ldr	r0, [pc, #148]	; (8002044 <HAL_ADC_IRQHandler+0x430>)
 8001fae:	f7ff f9fb 	bl	80013a8 <LL_ADC_GetMultiDMATransfer>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00b      	beq.n	8001fd0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
 8001fbc:	e008      	b.n	8001fd0 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fda:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe6:	f043 0202 	orr.w	r2, r3, #2
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f83e 	bl	8002070 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002002:	2b00      	cmp	r3, #0
 8002004:	d018      	beq.n	8002038 <HAL_ADC_IRQHandler+0x424>
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200c:	2b00      	cmp	r3, #0
 800200e:	d013      	beq.n	8002038 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002014:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002020:	f043 0208 	orr.w	r2, r3, #8
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002030:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 fe4c 	bl	8002cd0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002038:	bf00      	nop
 800203a:	3728      	adds	r7, #40	; 0x28
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	50040000 	.word	0x50040000
 8002044:	50040300 	.word	0x50040300

08002048 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b0b6      	sub	sp, #216	; 0xd8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002094:	2300      	movs	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x22>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e3c7      	b.n	8002836 <HAL_ADC_ConfigChannel+0x7b2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fa36 	bl	8001524 <LL_ADC_REG_IsConversionOngoing>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f040 83a8 	bne.w	8002810 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d824      	bhi.n	8002112 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	3b02      	subs	r3, #2
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d81b      	bhi.n	800210a <HAL_ADC_ConfigChannel+0x86>
 80020d2:	a201      	add	r2, pc, #4	; (adr r2, 80020d8 <HAL_ADC_ConfigChannel+0x54>)
 80020d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d8:	080020e9 	.word	0x080020e9
 80020dc:	080020f1 	.word	0x080020f1
 80020e0:	080020f9 	.word	0x080020f9
 80020e4:	08002101 	.word	0x08002101
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	220c      	movs	r2, #12
 80020ec:	605a      	str	r2, [r3, #4]
          break;
 80020ee:	e011      	b.n	8002114 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	2212      	movs	r2, #18
 80020f4:	605a      	str	r2, [r3, #4]
          break;
 80020f6:	e00d      	b.n	8002114 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	2218      	movs	r2, #24
 80020fc:	605a      	str	r2, [r3, #4]
          break;
 80020fe:	e009      	b.n	8002114 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002106:	605a      	str	r2, [r3, #4]
          break;
 8002108:	e004      	b.n	8002114 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2206      	movs	r2, #6
 800210e:	605a      	str	r2, [r3, #4]
          break;
 8002110:	e000      	b.n	8002114 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002112:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	6859      	ldr	r1, [r3, #4]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	f7ff f8a5 	bl	8001270 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff f9fa 	bl	8001524 <LL_ADC_REG_IsConversionOngoing>
 8002130:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fa06 	bl	800154a <LL_ADC_INJ_IsConversionOngoing>
 800213e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002142:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002146:	2b00      	cmp	r3, #0
 8002148:	f040 81a6 	bne.w	8002498 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800214c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002150:	2b00      	cmp	r3, #0
 8002152:	f040 81a1 	bne.w	8002498 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	6819      	ldr	r1, [r3, #0]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	461a      	mov	r2, r3
 8002164:	f7ff f8c3 	bl	80012ee <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	08db      	lsrs	r3, r3, #3
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2b04      	cmp	r3, #4
 8002188:	d00a      	beq.n	80021a0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	6919      	ldr	r1, [r3, #16]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800219a:	f7ff f801 	bl	80011a0 <LL_ADC_SetOffset>
 800219e:	e17b      	b.n	8002498 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff f81e 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10a      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x148>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff f813 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	0e9b      	lsrs	r3, r3, #26
 80021c6:	f003 021f 	and.w	r2, r3, #31
 80021ca:	e01e      	b.n	800220a <HAL_ADC_ConfigChannel+0x186>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff f808 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 80021d8:	4603      	mov	r3, r0
 80021da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021e2:	fa93 f3a3 	rbit	r3, r3
 80021e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80021fa:	2320      	movs	r3, #32
 80021fc:	e004      	b.n	8002208 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80021fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d105      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x19e>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0e9b      	lsrs	r3, r3, #26
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	e018      	b.n	8002254 <HAL_ADC_ConfigChannel+0x1d0>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800223a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800223e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002246:	2320      	movs	r3, #32
 8002248:	e004      	b.n	8002254 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800224a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002254:	429a      	cmp	r2, r3
 8002256:	d106      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2200      	movs	r2, #0
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe ffd7 	bl	8001214 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2101      	movs	r1, #1
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe ffbb 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 8002272:	4603      	mov	r3, r0
 8002274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10a      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x20e>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe ffb0 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 8002288:	4603      	mov	r3, r0
 800228a:	0e9b      	lsrs	r3, r3, #26
 800228c:	f003 021f 	and.w	r2, r3, #31
 8002290:	e01e      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x24c>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2101      	movs	r1, #1
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe ffa5 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80022b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80022b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80022c0:	2320      	movs	r3, #32
 80022c2:	e004      	b.n	80022ce <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80022c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d105      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x264>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0e9b      	lsrs	r3, r3, #26
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	e018      	b.n	800231a <HAL_ADC_ConfigChannel+0x296>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80022fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002300:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002304:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800230c:	2320      	movs	r3, #32
 800230e:	e004      	b.n	800231a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002310:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800231a:	429a      	cmp	r2, r3
 800231c:	d106      	bne.n	800232c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2200      	movs	r2, #0
 8002324:	2101      	movs	r1, #1
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe ff74 	bl	8001214 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2102      	movs	r1, #2
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe ff58 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 8002338:	4603      	mov	r3, r0
 800233a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10a      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x2d4>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2102      	movs	r1, #2
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe ff4d 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 800234e:	4603      	mov	r3, r0
 8002350:	0e9b      	lsrs	r3, r3, #26
 8002352:	f003 021f 	and.w	r2, r3, #31
 8002356:	e01e      	b.n	8002396 <HAL_ADC_ConfigChannel+0x312>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2102      	movs	r1, #2
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe ff42 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 8002364:	4603      	mov	r3, r0
 8002366:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002376:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800237a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800237e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002386:	2320      	movs	r3, #32
 8002388:	e004      	b.n	8002394 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800238a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d105      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x32a>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	0e9b      	lsrs	r3, r3, #26
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	e016      	b.n	80023dc <HAL_ADC_ConfigChannel+0x358>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80023c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80023ce:	2320      	movs	r3, #32
 80023d0:	e004      	b.n	80023dc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80023d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023dc:	429a      	cmp	r2, r3
 80023de:	d106      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2200      	movs	r2, #0
 80023e6:	2102      	movs	r1, #2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe ff13 	bl	8001214 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2103      	movs	r1, #3
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe fef7 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10a      	bne.n	800241a <HAL_ADC_ConfigChannel+0x396>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2103      	movs	r1, #3
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe feec 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 8002410:	4603      	mov	r3, r0
 8002412:	0e9b      	lsrs	r3, r3, #26
 8002414:	f003 021f 	and.w	r2, r3, #31
 8002418:	e017      	b.n	800244a <HAL_ADC_ConfigChannel+0x3c6>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2103      	movs	r1, #3
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe fee1 	bl	80011e8 <LL_ADC_GetOffsetChannel>
 8002426:	4603      	mov	r3, r0
 8002428:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002434:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002436:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800243c:	2320      	movs	r3, #32
 800243e:	e003      	b.n	8002448 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002452:	2b00      	cmp	r3, #0
 8002454:	d105      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x3de>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	0e9b      	lsrs	r3, r3, #26
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	e011      	b.n	8002486 <HAL_ADC_ConfigChannel+0x402>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002472:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800247a:	2320      	movs	r3, #32
 800247c:	e003      	b.n	8002486 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800247e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002480:	fab3 f383 	clz	r3, r3
 8002484:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002486:	429a      	cmp	r2, r3
 8002488:	d106      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2200      	movs	r2, #0
 8002490:	2103      	movs	r1, #3
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe febe 	bl	8001214 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff f807 	bl	80014b0 <LL_ADC_IsEnabled>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f040 813f 	bne.w	8002728 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	6819      	ldr	r1, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	461a      	mov	r2, r3
 80024b8:	f7fe ff44 	bl	8001344 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a8e      	ldr	r2, [pc, #568]	; (80026fc <HAL_ADC_ConfigChannel+0x678>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	f040 8130 	bne.w	8002728 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10b      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x46c>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	0e9b      	lsrs	r3, r3, #26
 80024de:	3301      	adds	r3, #1
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	2b09      	cmp	r3, #9
 80024e6:	bf94      	ite	ls
 80024e8:	2301      	movls	r3, #1
 80024ea:	2300      	movhi	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	e019      	b.n	8002524 <HAL_ADC_ConfigChannel+0x4a0>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80024fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002500:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002508:	2320      	movs	r3, #32
 800250a:	e003      	b.n	8002514 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800250c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	3301      	adds	r3, #1
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	2b09      	cmp	r3, #9
 800251c:	bf94      	ite	ls
 800251e:	2301      	movls	r3, #1
 8002520:	2300      	movhi	r3, #0
 8002522:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002524:	2b00      	cmp	r3, #0
 8002526:	d079      	beq.n	800261c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002530:	2b00      	cmp	r3, #0
 8002532:	d107      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x4c0>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0e9b      	lsrs	r3, r3, #26
 800253a:	3301      	adds	r3, #1
 800253c:	069b      	lsls	r3, r3, #26
 800253e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002542:	e015      	b.n	8002570 <HAL_ADC_ConfigChannel+0x4ec>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002554:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800255c:	2320      	movs	r3, #32
 800255e:	e003      	b.n	8002568 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002562:	fab3 f383 	clz	r3, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	3301      	adds	r3, #1
 800256a:	069b      	lsls	r3, r3, #26
 800256c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002578:	2b00      	cmp	r3, #0
 800257a:	d109      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x50c>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	0e9b      	lsrs	r3, r3, #26
 8002582:	3301      	adds	r3, #1
 8002584:	f003 031f 	and.w	r3, r3, #31
 8002588:	2101      	movs	r1, #1
 800258a:	fa01 f303 	lsl.w	r3, r1, r3
 800258e:	e017      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x53c>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002598:	fa93 f3a3 	rbit	r3, r3
 800259c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800259e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025a0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80025a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80025a8:	2320      	movs	r3, #32
 80025aa:	e003      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80025ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ae:	fab3 f383 	clz	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	3301      	adds	r3, #1
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	2101      	movs	r1, #1
 80025bc:	fa01 f303 	lsl.w	r3, r1, r3
 80025c0:	ea42 0103 	orr.w	r1, r2, r3
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10a      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x562>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	0e9b      	lsrs	r3, r3, #26
 80025d6:	3301      	adds	r3, #1
 80025d8:	f003 021f 	and.w	r2, r3, #31
 80025dc:	4613      	mov	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4413      	add	r3, r2
 80025e2:	051b      	lsls	r3, r3, #20
 80025e4:	e018      	b.n	8002618 <HAL_ADC_ConfigChannel+0x594>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80025f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80025fe:	2320      	movs	r3, #32
 8002600:	e003      	b.n	800260a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	b2db      	uxtb	r3, r3
 800260a:	3301      	adds	r3, #1
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	4613      	mov	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4413      	add	r3, r2
 8002616:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002618:	430b      	orrs	r3, r1
 800261a:	e080      	b.n	800271e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002624:	2b00      	cmp	r3, #0
 8002626:	d107      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x5b4>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	0e9b      	lsrs	r3, r3, #26
 800262e:	3301      	adds	r3, #1
 8002630:	069b      	lsls	r3, r3, #26
 8002632:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002636:	e015      	b.n	8002664 <HAL_ADC_ConfigChannel+0x5e0>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002648:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002650:	2320      	movs	r3, #32
 8002652:	e003      	b.n	800265c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	3301      	adds	r3, #1
 800265e:	069b      	lsls	r3, r3, #26
 8002660:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266c:	2b00      	cmp	r3, #0
 800266e:	d109      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x600>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	0e9b      	lsrs	r3, r3, #26
 8002676:	3301      	adds	r3, #1
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	e017      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x630>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	61fb      	str	r3, [r7, #28]
  return result;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800269c:	2320      	movs	r3, #32
 800269e:	e003      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	3301      	adds	r3, #1
 80026aa:	f003 031f 	and.w	r3, r3, #31
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	ea42 0103 	orr.w	r1, r2, r3
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10d      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x65c>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	0e9b      	lsrs	r3, r3, #26
 80026ca:	3301      	adds	r3, #1
 80026cc:	f003 021f 	and.w	r2, r3, #31
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	3b1e      	subs	r3, #30
 80026d8:	051b      	lsls	r3, r3, #20
 80026da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026de:	e01d      	b.n	800271c <HAL_ADC_ConfigChannel+0x698>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	613b      	str	r3, [r7, #16]
  return result;
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d103      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80026f8:	2320      	movs	r3, #32
 80026fa:	e005      	b.n	8002708 <HAL_ADC_ConfigChannel+0x684>
 80026fc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	3301      	adds	r3, #1
 800270a:	f003 021f 	and.w	r2, r3, #31
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	3b1e      	subs	r3, #30
 8002716:	051b      	lsls	r3, r3, #20
 8002718:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800271c:	430b      	orrs	r3, r1
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	6892      	ldr	r2, [r2, #8]
 8002722:	4619      	mov	r1, r3
 8002724:	f7fe fde3 	bl	80012ee <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b44      	ldr	r3, [pc, #272]	; (8002840 <HAL_ADC_ConfigChannel+0x7bc>)
 800272e:	4013      	ands	r3, r2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d07a      	beq.n	800282a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002734:	4843      	ldr	r0, [pc, #268]	; (8002844 <HAL_ADC_ConfigChannel+0x7c0>)
 8002736:	f7fe fd25 	bl	8001184 <LL_ADC_GetCommonPathInternalCh>
 800273a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a41      	ldr	r2, [pc, #260]	; (8002848 <HAL_ADC_ConfigChannel+0x7c4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d12c      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800274c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d126      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a3c      	ldr	r2, [pc, #240]	; (800284c <HAL_ADC_ConfigChannel+0x7c8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d004      	beq.n	8002768 <HAL_ADC_ConfigChannel+0x6e4>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a3b      	ldr	r2, [pc, #236]	; (8002850 <HAL_ADC_ConfigChannel+0x7cc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d15d      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002768:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800276c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002770:	4619      	mov	r1, r3
 8002772:	4834      	ldr	r0, [pc, #208]	; (8002844 <HAL_ADC_ConfigChannel+0x7c0>)
 8002774:	f7fe fcf3 	bl	800115e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002778:	4b36      	ldr	r3, [pc, #216]	; (8002854 <HAL_ADC_ConfigChannel+0x7d0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	099b      	lsrs	r3, r3, #6
 800277e:	4a36      	ldr	r2, [pc, #216]	; (8002858 <HAL_ADC_ConfigChannel+0x7d4>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002792:	e002      	b.n	800279a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	3b01      	subs	r3, #1
 8002798:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1f9      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027a0:	e040      	b.n	8002824 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a2d      	ldr	r2, [pc, #180]	; (800285c <HAL_ADC_ConfigChannel+0x7d8>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d118      	bne.n	80027de <HAL_ADC_ConfigChannel+0x75a>
 80027ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d112      	bne.n	80027de <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a23      	ldr	r2, [pc, #140]	; (800284c <HAL_ADC_ConfigChannel+0x7c8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d004      	beq.n	80027cc <HAL_ADC_ConfigChannel+0x748>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a22      	ldr	r2, [pc, #136]	; (8002850 <HAL_ADC_ConfigChannel+0x7cc>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d12d      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d4:	4619      	mov	r1, r3
 80027d6:	481b      	ldr	r0, [pc, #108]	; (8002844 <HAL_ADC_ConfigChannel+0x7c0>)
 80027d8:	f7fe fcc1 	bl	800115e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027dc:	e024      	b.n	8002828 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1f      	ldr	r2, [pc, #124]	; (8002860 <HAL_ADC_ConfigChannel+0x7dc>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d120      	bne.n	800282a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d11a      	bne.n	800282a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a14      	ldr	r2, [pc, #80]	; (800284c <HAL_ADC_ConfigChannel+0x7c8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d115      	bne.n	800282a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002802:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002806:	4619      	mov	r1, r3
 8002808:	480e      	ldr	r0, [pc, #56]	; (8002844 <HAL_ADC_ConfigChannel+0x7c0>)
 800280a:	f7fe fca8 	bl	800115e <LL_ADC_SetCommonPathInternalCh>
 800280e:	e00c      	b.n	800282a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002814:	f043 0220 	orr.w	r2, r3, #32
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002822:	e002      	b.n	800282a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002824:	bf00      	nop
 8002826:	e000      	b.n	800282a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002828:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002832:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002836:	4618      	mov	r0, r3
 8002838:	37d8      	adds	r7, #216	; 0xd8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	80080000 	.word	0x80080000
 8002844:	50040300 	.word	0x50040300
 8002848:	c7520000 	.word	0xc7520000
 800284c:	50040000 	.word	0x50040000
 8002850:	50040200 	.word	0x50040200
 8002854:	20000000 	.word	0x20000000
 8002858:	053e2d63 	.word	0x053e2d63
 800285c:	cb840000 	.word	0xcb840000
 8002860:	80000001 	.word	0x80000001

08002864 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800286c:	2300      	movs	r3, #0
 800286e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe fe1b 	bl	80014b0 <LL_ADC_IsEnabled>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d169      	bne.n	8002954 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	4b36      	ldr	r3, [pc, #216]	; (8002960 <ADC_Enable+0xfc>)
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00d      	beq.n	80028aa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002892:	f043 0210 	orr.w	r2, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289e:	f043 0201 	orr.w	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e055      	b.n	8002956 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe fdd6 	bl	8001460 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80028b4:	482b      	ldr	r0, [pc, #172]	; (8002964 <ADC_Enable+0x100>)
 80028b6:	f7fe fc65 	bl	8001184 <LL_ADC_GetCommonPathInternalCh>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d013      	beq.n	80028ec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028c4:	4b28      	ldr	r3, [pc, #160]	; (8002968 <ADC_Enable+0x104>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	099b      	lsrs	r3, r3, #6
 80028ca:	4a28      	ldr	r2, [pc, #160]	; (800296c <ADC_Enable+0x108>)
 80028cc:	fba2 2303 	umull	r2, r3, r2, r3
 80028d0:	099b      	lsrs	r3, r3, #6
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	4613      	mov	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80028de:	e002      	b.n	80028e6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f9      	bne.n	80028e0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80028ec:	f7fe fbf4 	bl	80010d8 <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028f2:	e028      	b.n	8002946 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe fdd9 	bl	80014b0 <LL_ADC_IsEnabled>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d104      	bne.n	800290e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe fda9 	bl	8001460 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800290e:	f7fe fbe3 	bl	80010d8 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d914      	bls.n	8002946 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b01      	cmp	r3, #1
 8002928:	d00d      	beq.n	8002946 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292e:	f043 0210 	orr.w	r2, r3, #16
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293a:	f043 0201 	orr.w	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e007      	b.n	8002956 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b01      	cmp	r3, #1
 8002952:	d1cf      	bne.n	80028f4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	8000003f 	.word	0x8000003f
 8002964:	50040300 	.word	0x50040300
 8002968:	20000000 	.word	0x20000000
 800296c:	053e2d63 	.word	0x053e2d63

08002970 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7fe fdaa 	bl	80014d6 <LL_ADC_IsDisableOngoing>
 8002982:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7fe fd91 	bl	80014b0 <LL_ADC_IsEnabled>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d047      	beq.n	8002a24 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d144      	bne.n	8002a24 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 030d 	and.w	r3, r3, #13
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d10c      	bne.n	80029c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fe fd6b 	bl	8001488 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2203      	movs	r2, #3
 80029b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029ba:	f7fe fb8d 	bl	80010d8 <HAL_GetTick>
 80029be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029c0:	e029      	b.n	8002a16 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c6:	f043 0210 	orr.w	r2, r3, #16
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d2:	f043 0201 	orr.w	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e023      	b.n	8002a26 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029de:	f7fe fb7b 	bl	80010d8 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d914      	bls.n	8002a16 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00d      	beq.n	8002a16 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fe:	f043 0210 	orr.w	r2, r3, #16
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0a:	f043 0201 	orr.w	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e007      	b.n	8002a26 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1dc      	bne.n	80029de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d14b      	bne.n	8002ae0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d021      	beq.n	8002aa6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fbef 	bl	800124a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d032      	beq.n	8002ad8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d12b      	bne.n	8002ad8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d11f      	bne.n	8002ad8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9c:	f043 0201 	orr.w	r2, r3, #1
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	655a      	str	r2, [r3, #84]	; 0x54
 8002aa4:	e018      	b.n	8002ad8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d111      	bne.n	8002ad8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d105      	bne.n	8002ad8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad0:	f043 0201 	orr.w	r2, r3, #1
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f7fd ff51 	bl	8000980 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ade:	e00e      	b.n	8002afe <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f7ff fabf 	bl	8002070 <HAL_ADC_ErrorCallback>
}
 8002af2:	e004      	b.n	8002afe <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	4798      	blx	r3
}
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f7ff fa97 	bl	8002048 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b1a:	bf00      	nop
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b40:	f043 0204 	orr.w	r2, r3, #4
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f7ff fa91 	bl	8002070 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b4e:	bf00      	nop
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <LL_ADC_IsEnabled>:
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <LL_ADC_IsEnabled+0x18>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <LL_ADC_IsEnabled+0x1a>
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_StartCalibration>:
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002b8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	609a      	str	r2, [r3, #8]
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <LL_ADC_IsCalibrationOnGoing>:
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bc2:	d101      	bne.n	8002bc8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d101      	bne.n	8002bee <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_ADCEx_Calibration_Start+0x1c>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e04d      	b.n	8002cb4 <HAL_ADCEx_Calibration_Start+0xb8>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff fea5 	bl	8002970 <ADC_Disable>
 8002c26:	4603      	mov	r3, r0
 8002c28:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d136      	bne.n	8002c9e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c38:	f023 0302 	bic.w	r3, r3, #2
 8002c3c:	f043 0202 	orr.w	r2, r3, #2
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6839      	ldr	r1, [r7, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff ff96 	bl	8002b7c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c50:	e014      	b.n	8002c7c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	3301      	adds	r3, #1
 8002c56:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002c5e:	d30d      	bcc.n	8002c7c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c64:	f023 0312 	bic.w	r3, r3, #18
 8002c68:	f043 0210 	orr.w	r2, r3, #16
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e01b      	b.n	8002cb4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ff94 	bl	8002bae <LL_ADC_IsCalibrationOnGoing>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1e2      	bne.n	8002c52 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c90:	f023 0303 	bic.w	r3, r3, #3
 8002c94:	f043 0201 	orr.w	r2, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	655a      	str	r2, [r3, #84]	; 0x54
 8002c9c:	e005      	b.n	8002caa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca2:	f043 0210 	orr.w	r2, r3, #16
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d20:	b590      	push	{r4, r7, lr}
 8002d22:	b09f      	sub	sp, #124	; 0x7c
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e093      	b.n	8002e66 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002d46:	2300      	movs	r3, #0
 8002d48:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a47      	ldr	r2, [pc, #284]	; (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d102      	bne.n	8002d5e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d58:	4b46      	ldr	r3, [pc, #280]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	e001      	b.n	8002d62 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10b      	bne.n	8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6c:	f043 0220 	orr.w	r2, r3, #32
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e072      	b.n	8002e66 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff ff27 	bl	8002bd6 <LL_ADC_REG_IsConversionOngoing>
 8002d88:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff ff21 	bl	8002bd6 <LL_ADC_REG_IsConversionOngoing>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d154      	bne.n	8002e44 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002d9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d151      	bne.n	8002e44 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002da0:	4b35      	ldr	r3, [pc, #212]	; (8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002da2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d02c      	beq.n	8002e06 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	6859      	ldr	r1, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dbe:	035b      	lsls	r3, r3, #13
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dc8:	4829      	ldr	r0, [pc, #164]	; (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002dca:	f7ff fec4 	bl	8002b56 <LL_ADC_IsEnabled>
 8002dce:	4604      	mov	r4, r0
 8002dd0:	4828      	ldr	r0, [pc, #160]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002dd2:	f7ff fec0 	bl	8002b56 <LL_ADC_IsEnabled>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	431c      	orrs	r4, r3
 8002dda:	4828      	ldr	r0, [pc, #160]	; (8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002ddc:	f7ff febb 	bl	8002b56 <LL_ADC_IsEnabled>
 8002de0:	4603      	mov	r3, r0
 8002de2:	4323      	orrs	r3, r4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d137      	bne.n	8002e58 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002df0:	f023 030f 	bic.w	r3, r3, #15
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	6811      	ldr	r1, [r2, #0]
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	6892      	ldr	r2, [r2, #8]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e02:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e04:	e028      	b.n	8002e58 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e10:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e12:	4817      	ldr	r0, [pc, #92]	; (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e14:	f7ff fe9f 	bl	8002b56 <LL_ADC_IsEnabled>
 8002e18:	4604      	mov	r4, r0
 8002e1a:	4816      	ldr	r0, [pc, #88]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e1c:	f7ff fe9b 	bl	8002b56 <LL_ADC_IsEnabled>
 8002e20:	4603      	mov	r3, r0
 8002e22:	431c      	orrs	r4, r3
 8002e24:	4815      	ldr	r0, [pc, #84]	; (8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e26:	f7ff fe96 	bl	8002b56 <LL_ADC_IsEnabled>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4323      	orrs	r3, r4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d112      	bne.n	8002e58 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e3a:	f023 030f 	bic.w	r3, r3, #15
 8002e3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e40:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e42:	e009      	b.n	8002e58 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e48:	f043 0220 	orr.w	r2, r3, #32
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002e56:	e000      	b.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e62:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	377c      	adds	r7, #124	; 0x7c
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd90      	pop	{r4, r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	50040000 	.word	0x50040000
 8002e74:	50040100 	.word	0x50040100
 8002e78:	50040300 	.word	0x50040300
 8002e7c:	50040200 	.word	0x50040200

08002e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e90:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eb2:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	60d3      	str	r3, [r2, #12]
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ecc:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	0a1b      	lsrs	r3, r3, #8
 8002ed2:	f003 0307 	and.w	r3, r3, #7
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	db0b      	blt.n	8002f0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	f003 021f 	and.w	r2, r3, #31
 8002efc:	4907      	ldr	r1, [pc, #28]	; (8002f1c <__NVIC_EnableIRQ+0x38>)
 8002efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	2001      	movs	r0, #1
 8002f06:	fa00 f202 	lsl.w	r2, r0, r2
 8002f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	e000e100 	.word	0xe000e100

08002f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	6039      	str	r1, [r7, #0]
 8002f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	db0a      	blt.n	8002f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	490c      	ldr	r1, [pc, #48]	; (8002f6c <__NVIC_SetPriority+0x4c>)
 8002f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3e:	0112      	lsls	r2, r2, #4
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	440b      	add	r3, r1
 8002f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f48:	e00a      	b.n	8002f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	4908      	ldr	r1, [pc, #32]	; (8002f70 <__NVIC_SetPriority+0x50>)
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	3b04      	subs	r3, #4
 8002f58:	0112      	lsls	r2, r2, #4
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	761a      	strb	r2, [r3, #24]
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000e100 	.word	0xe000e100
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	; 0x24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f1c3 0307 	rsb	r3, r3, #7
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	bf28      	it	cs
 8002f92:	2304      	movcs	r3, #4
 8002f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	2b06      	cmp	r3, #6
 8002f9c:	d902      	bls.n	8002fa4 <NVIC_EncodePriority+0x30>
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3b03      	subs	r3, #3
 8002fa2:	e000      	b.n	8002fa6 <NVIC_EncodePriority+0x32>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43da      	mvns	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc6:	43d9      	mvns	r1, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fcc:	4313      	orrs	r3, r2
         );
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3724      	adds	r7, #36	; 0x24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fec:	d301      	bcc.n	8002ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e00f      	b.n	8003012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	; (800301c <SysTick_Config+0x40>)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ffa:	210f      	movs	r1, #15
 8002ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003000:	f7ff ff8e 	bl	8002f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <SysTick_Config+0x40>)
 8003006:	2200      	movs	r2, #0
 8003008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800300a:	4b04      	ldr	r3, [pc, #16]	; (800301c <SysTick_Config+0x40>)
 800300c:	2207      	movs	r2, #7
 800300e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	e000e010 	.word	0xe000e010

08003020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff ff29 	bl	8002e80 <__NVIC_SetPriorityGrouping>
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b086      	sub	sp, #24
 800303a:	af00      	add	r7, sp, #0
 800303c:	4603      	mov	r3, r0
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003048:	f7ff ff3e 	bl	8002ec8 <__NVIC_GetPriorityGrouping>
 800304c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	6978      	ldr	r0, [r7, #20]
 8003054:	f7ff ff8e 	bl	8002f74 <NVIC_EncodePriority>
 8003058:	4602      	mov	r2, r0
 800305a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff ff5d 	bl	8002f20 <__NVIC_SetPriority>
}
 8003066:	bf00      	nop
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	4603      	mov	r3, r0
 8003076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff ff31 	bl	8002ee4 <__NVIC_EnableIRQ>
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff ffa2 	bl	8002fdc <SysTick_Config>
 8003098:	4603      	mov	r3, r0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e098      	b.n	80031e8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b4d      	ldr	r3, [pc, #308]	; (80031f4 <HAL_DMA_Init+0x150>)
 80030be:	429a      	cmp	r2, r3
 80030c0:	d80f      	bhi.n	80030e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	461a      	mov	r2, r3
 80030c8:	4b4b      	ldr	r3, [pc, #300]	; (80031f8 <HAL_DMA_Init+0x154>)
 80030ca:	4413      	add	r3, r2
 80030cc:	4a4b      	ldr	r2, [pc, #300]	; (80031fc <HAL_DMA_Init+0x158>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	009a      	lsls	r2, r3, #2
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a48      	ldr	r2, [pc, #288]	; (8003200 <HAL_DMA_Init+0x15c>)
 80030de:	641a      	str	r2, [r3, #64]	; 0x40
 80030e0:	e00e      	b.n	8003100 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	4b46      	ldr	r3, [pc, #280]	; (8003204 <HAL_DMA_Init+0x160>)
 80030ea:	4413      	add	r3, r2
 80030ec:	4a43      	ldr	r2, [pc, #268]	; (80031fc <HAL_DMA_Init+0x158>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	091b      	lsrs	r3, r3, #4
 80030f4:	009a      	lsls	r2, r3, #2
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a42      	ldr	r2, [pc, #264]	; (8003208 <HAL_DMA_Init+0x164>)
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003124:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003130:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800313c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800315a:	d039      	beq.n	80031d0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	4a27      	ldr	r2, [pc, #156]	; (8003200 <HAL_DMA_Init+0x15c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d11a      	bne.n	800319c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003166:	4b29      	ldr	r3, [pc, #164]	; (800320c <HAL_DMA_Init+0x168>)
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	f003 031c 	and.w	r3, r3, #28
 8003172:	210f      	movs	r1, #15
 8003174:	fa01 f303 	lsl.w	r3, r1, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	4924      	ldr	r1, [pc, #144]	; (800320c <HAL_DMA_Init+0x168>)
 800317c:	4013      	ands	r3, r2
 800317e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003180:	4b22      	ldr	r3, [pc, #136]	; (800320c <HAL_DMA_Init+0x168>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318c:	f003 031c 	and.w	r3, r3, #28
 8003190:	fa01 f303 	lsl.w	r3, r1, r3
 8003194:	491d      	ldr	r1, [pc, #116]	; (800320c <HAL_DMA_Init+0x168>)
 8003196:	4313      	orrs	r3, r2
 8003198:	600b      	str	r3, [r1, #0]
 800319a:	e019      	b.n	80031d0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800319c:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <HAL_DMA_Init+0x16c>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a4:	f003 031c 	and.w	r3, r3, #28
 80031a8:	210f      	movs	r1, #15
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	4917      	ldr	r1, [pc, #92]	; (8003210 <HAL_DMA_Init+0x16c>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80031b6:	4b16      	ldr	r3, [pc, #88]	; (8003210 <HAL_DMA_Init+0x16c>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6859      	ldr	r1, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	f003 031c 	and.w	r3, r3, #28
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	4911      	ldr	r1, [pc, #68]	; (8003210 <HAL_DMA_Init+0x16c>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	40020407 	.word	0x40020407
 80031f8:	bffdfff8 	.word	0xbffdfff8
 80031fc:	cccccccd 	.word	0xcccccccd
 8003200:	40020000 	.word	0x40020000
 8003204:	bffdfbf8 	.word	0xbffdfbf8
 8003208:	40020400 	.word	0x40020400
 800320c:	400200a8 	.word	0x400200a8
 8003210:	400204a8 	.word	0x400204a8

08003214 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_DMA_Start_IT+0x20>
 8003230:	2302      	movs	r3, #2
 8003232:	e04b      	b.n	80032cc <HAL_DMA_Start_IT+0xb8>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b01      	cmp	r3, #1
 8003246:	d13a      	bne.n	80032be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0201 	bic.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f8e0 	bl	8003432 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	2b00      	cmp	r3, #0
 8003278:	d008      	beq.n	800328c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 020e 	orr.w	r2, r2, #14
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	e00f      	b.n	80032ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0204 	bic.w	r2, r2, #4
 800329a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 020a 	orr.w	r2, r2, #10
 80032aa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	e005      	b.n	80032ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80032c6:	2302      	movs	r3, #2
 80032c8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80032ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f0:	f003 031c 	and.w	r3, r3, #28
 80032f4:	2204      	movs	r2, #4
 80032f6:	409a      	lsls	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d026      	beq.n	800334e <HAL_DMA_IRQHandler+0x7a>
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b00      	cmp	r3, #0
 8003308:	d021      	beq.n	800334e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d107      	bne.n	8003328 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0204 	bic.w	r2, r2, #4
 8003326:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332c:	f003 021c 	and.w	r2, r3, #28
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	2104      	movs	r1, #4
 8003336:	fa01 f202 	lsl.w	r2, r1, r2
 800333a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003340:	2b00      	cmp	r3, #0
 8003342:	d071      	beq.n	8003428 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800334c:	e06c      	b.n	8003428 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003352:	f003 031c 	and.w	r3, r3, #28
 8003356:	2202      	movs	r2, #2
 8003358:	409a      	lsls	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4013      	ands	r3, r2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d02e      	beq.n	80033c0 <HAL_DMA_IRQHandler+0xec>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d029      	beq.n	80033c0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0320 	and.w	r3, r3, #32
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10b      	bne.n	8003392 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 020a 	bic.w	r2, r2, #10
 8003388:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	f003 021c 	and.w	r2, r3, #28
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	2102      	movs	r1, #2
 80033a0:	fa01 f202 	lsl.w	r2, r1, r2
 80033a4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d038      	beq.n	8003428 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033be:	e033      	b.n	8003428 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c4:	f003 031c 	and.w	r3, r3, #28
 80033c8:	2208      	movs	r2, #8
 80033ca:	409a      	lsls	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d02a      	beq.n	800342a <HAL_DMA_IRQHandler+0x156>
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d025      	beq.n	800342a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 020e 	bic.w	r2, r2, #14
 80033ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	f003 021c 	and.w	r2, r3, #28
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	2101      	movs	r1, #1
 80033fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003400:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341c:	2b00      	cmp	r3, #0
 800341e:	d004      	beq.n	800342a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003428:	bf00      	nop
 800342a:	bf00      	nop
}
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003432:	b480      	push	{r7}
 8003434:	b085      	sub	sp, #20
 8003436:	af00      	add	r7, sp, #0
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	60b9      	str	r1, [r7, #8]
 800343c:	607a      	str	r2, [r7, #4]
 800343e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	f003 021c 	and.w	r2, r3, #28
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	2101      	movs	r1, #1
 800344e:	fa01 f202 	lsl.w	r2, r1, r2
 8003452:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b10      	cmp	r3, #16
 8003462:	d108      	bne.n	8003476 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003474:	e007      	b.n	8003486 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	60da      	str	r2, [r3, #12]
}
 8003486:	bf00      	nop
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
	...

08003494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034a2:	e17f      	b.n	80037a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	2101      	movs	r1, #1
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	fa01 f303 	lsl.w	r3, r1, r3
 80034b0:	4013      	ands	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 8171 	beq.w	800379e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d005      	beq.n	80034d4 <HAL_GPIO_Init+0x40>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d130      	bne.n	8003536 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	2203      	movs	r2, #3
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4013      	ands	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800350a:	2201      	movs	r2, #1
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4013      	ands	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	091b      	lsrs	r3, r3, #4
 8003520:	f003 0201 	and.w	r2, r3, #1
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	2b03      	cmp	r3, #3
 8003540:	d118      	bne.n	8003574 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003546:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003548:	2201      	movs	r2, #1
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4013      	ands	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	08db      	lsrs	r3, r3, #3
 800355e:	f003 0201 	and.w	r2, r3, #1
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	4313      	orrs	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	2b03      	cmp	r3, #3
 800357e:	d017      	beq.n	80035b0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	2203      	movs	r2, #3
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4013      	ands	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d123      	bne.n	8003604 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	08da      	lsrs	r2, r3, #3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3208      	adds	r2, #8
 80035c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	220f      	movs	r2, #15
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4013      	ands	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	08da      	lsrs	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3208      	adds	r2, #8
 80035fe:	6939      	ldr	r1, [r7, #16]
 8003600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	2203      	movs	r2, #3
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0203 	and.w	r2, r3, #3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80ac 	beq.w	800379e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003646:	4b5f      	ldr	r3, [pc, #380]	; (80037c4 <HAL_GPIO_Init+0x330>)
 8003648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364a:	4a5e      	ldr	r2, [pc, #376]	; (80037c4 <HAL_GPIO_Init+0x330>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6613      	str	r3, [r2, #96]	; 0x60
 8003652:	4b5c      	ldr	r3, [pc, #368]	; (80037c4 <HAL_GPIO_Init+0x330>)
 8003654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	60bb      	str	r3, [r7, #8]
 800365c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800365e:	4a5a      	ldr	r2, [pc, #360]	; (80037c8 <HAL_GPIO_Init+0x334>)
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	089b      	lsrs	r3, r3, #2
 8003664:	3302      	adds	r3, #2
 8003666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800366a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	220f      	movs	r2, #15
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4013      	ands	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003688:	d025      	beq.n	80036d6 <HAL_GPIO_Init+0x242>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a4f      	ldr	r2, [pc, #316]	; (80037cc <HAL_GPIO_Init+0x338>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d01f      	beq.n	80036d2 <HAL_GPIO_Init+0x23e>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a4e      	ldr	r2, [pc, #312]	; (80037d0 <HAL_GPIO_Init+0x33c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d019      	beq.n	80036ce <HAL_GPIO_Init+0x23a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a4d      	ldr	r2, [pc, #308]	; (80037d4 <HAL_GPIO_Init+0x340>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d013      	beq.n	80036ca <HAL_GPIO_Init+0x236>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a4c      	ldr	r2, [pc, #304]	; (80037d8 <HAL_GPIO_Init+0x344>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00d      	beq.n	80036c6 <HAL_GPIO_Init+0x232>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a4b      	ldr	r2, [pc, #300]	; (80037dc <HAL_GPIO_Init+0x348>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d007      	beq.n	80036c2 <HAL_GPIO_Init+0x22e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a4a      	ldr	r2, [pc, #296]	; (80037e0 <HAL_GPIO_Init+0x34c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d101      	bne.n	80036be <HAL_GPIO_Init+0x22a>
 80036ba:	2306      	movs	r3, #6
 80036bc:	e00c      	b.n	80036d8 <HAL_GPIO_Init+0x244>
 80036be:	2307      	movs	r3, #7
 80036c0:	e00a      	b.n	80036d8 <HAL_GPIO_Init+0x244>
 80036c2:	2305      	movs	r3, #5
 80036c4:	e008      	b.n	80036d8 <HAL_GPIO_Init+0x244>
 80036c6:	2304      	movs	r3, #4
 80036c8:	e006      	b.n	80036d8 <HAL_GPIO_Init+0x244>
 80036ca:	2303      	movs	r3, #3
 80036cc:	e004      	b.n	80036d8 <HAL_GPIO_Init+0x244>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e002      	b.n	80036d8 <HAL_GPIO_Init+0x244>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_GPIO_Init+0x244>
 80036d6:	2300      	movs	r3, #0
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	f002 0203 	and.w	r2, r2, #3
 80036de:	0092      	lsls	r2, r2, #2
 80036e0:	4093      	lsls	r3, r2
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036e8:	4937      	ldr	r1, [pc, #220]	; (80037c8 <HAL_GPIO_Init+0x334>)
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	089b      	lsrs	r3, r3, #2
 80036ee:	3302      	adds	r3, #2
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036f6:	4b3b      	ldr	r3, [pc, #236]	; (80037e4 <HAL_GPIO_Init+0x350>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	43db      	mvns	r3, r3
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	4013      	ands	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800371a:	4a32      	ldr	r2, [pc, #200]	; (80037e4 <HAL_GPIO_Init+0x350>)
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003720:	4b30      	ldr	r3, [pc, #192]	; (80037e4 <HAL_GPIO_Init+0x350>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	43db      	mvns	r3, r3
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4013      	ands	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003744:	4a27      	ldr	r2, [pc, #156]	; (80037e4 <HAL_GPIO_Init+0x350>)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800374a:	4b26      	ldr	r3, [pc, #152]	; (80037e4 <HAL_GPIO_Init+0x350>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	43db      	mvns	r3, r3
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4013      	ands	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800376e:	4a1d      	ldr	r2, [pc, #116]	; (80037e4 <HAL_GPIO_Init+0x350>)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003774:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <HAL_GPIO_Init+0x350>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	43db      	mvns	r3, r3
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4013      	ands	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003798:	4a12      	ldr	r2, [pc, #72]	; (80037e4 <HAL_GPIO_Init+0x350>)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	3301      	adds	r3, #1
 80037a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	fa22 f303 	lsr.w	r3, r2, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f47f ae78 	bne.w	80034a4 <HAL_GPIO_Init+0x10>
  }
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop
 80037b8:	371c      	adds	r7, #28
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40021000 	.word	0x40021000
 80037c8:	40010000 	.word	0x40010000
 80037cc:	48000400 	.word	0x48000400
 80037d0:	48000800 	.word	0x48000800
 80037d4:	48000c00 	.word	0x48000c00
 80037d8:	48001000 	.word	0x48001000
 80037dc:	48001400 	.word	0x48001400
 80037e0:	48001800 	.word	0x48001800
 80037e4:	40010400 	.word	0x40010400

080037e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037ec:	4b04      	ldr	r3, [pc, #16]	; (8003800 <HAL_PWREx_GetVoltageRange+0x18>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40007000 	.word	0x40007000

08003804 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003812:	d130      	bne.n	8003876 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003814:	4b23      	ldr	r3, [pc, #140]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800381c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003820:	d038      	beq.n	8003894 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003822:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800382a:	4a1e      	ldr	r2, [pc, #120]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800382c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003830:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003832:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2232      	movs	r2, #50	; 0x32
 8003838:	fb02 f303 	mul.w	r3, r2, r3
 800383c:	4a1b      	ldr	r2, [pc, #108]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	0c9b      	lsrs	r3, r3, #18
 8003844:	3301      	adds	r3, #1
 8003846:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003848:	e002      	b.n	8003850 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	3b01      	subs	r3, #1
 800384e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003850:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385c:	d102      	bne.n	8003864 <HAL_PWREx_ControlVoltageScaling+0x60>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f2      	bne.n	800384a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003864:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003870:	d110      	bne.n	8003894 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e00f      	b.n	8003896 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003876:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800387e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003882:	d007      	beq.n	8003894 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003884:	4b07      	ldr	r3, [pc, #28]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800388c:	4a05      	ldr	r2, [pc, #20]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800388e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003892:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40007000 	.word	0x40007000
 80038a8:	20000000 	.word	0x20000000
 80038ac:	431bde83 	.word	0x431bde83

080038b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e3c6      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c2:	4ba1      	ldr	r3, [pc, #644]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038cc:	4b9e      	ldr	r3, [pc, #632]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0310 	and.w	r3, r3, #16
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 80e4 	beq.w	8003aac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d007      	beq.n	80038fa <HAL_RCC_OscConfig+0x4a>
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	2b0c      	cmp	r3, #12
 80038ee:	f040 808b 	bne.w	8003a08 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	f040 8087 	bne.w	8003a08 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038fa:	4b93      	ldr	r3, [pc, #588]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_RCC_OscConfig+0x62>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e39e      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1a      	ldr	r2, [r3, #32]
 8003916:	4b8c      	ldr	r3, [pc, #560]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d004      	beq.n	800392c <HAL_RCC_OscConfig+0x7c>
 8003922:	4b89      	ldr	r3, [pc, #548]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800392a:	e005      	b.n	8003938 <HAL_RCC_OscConfig+0x88>
 800392c:	4b86      	ldr	r3, [pc, #536]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 800392e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003932:	091b      	lsrs	r3, r3, #4
 8003934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003938:	4293      	cmp	r3, r2
 800393a:	d223      	bcs.n	8003984 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fd53 	bl	80043ec <RCC_SetFlashLatencyFromMSIRange>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e37f      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003950:	4b7d      	ldr	r3, [pc, #500]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a7c      	ldr	r2, [pc, #496]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003956:	f043 0308 	orr.w	r3, r3, #8
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	4b7a      	ldr	r3, [pc, #488]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	4977      	ldr	r1, [pc, #476]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800396e:	4b76      	ldr	r3, [pc, #472]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	4972      	ldr	r1, [pc, #456]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 800397e:	4313      	orrs	r3, r2
 8003980:	604b      	str	r3, [r1, #4]
 8003982:	e025      	b.n	80039d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003984:	4b70      	ldr	r3, [pc, #448]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a6f      	ldr	r2, [pc, #444]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 800398a:	f043 0308 	orr.w	r3, r3, #8
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	4b6d      	ldr	r3, [pc, #436]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	496a      	ldr	r1, [pc, #424]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039a2:	4b69      	ldr	r3, [pc, #420]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	021b      	lsls	r3, r3, #8
 80039b0:	4965      	ldr	r1, [pc, #404]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d109      	bne.n	80039d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fd13 	bl	80043ec <RCC_SetFlashLatencyFromMSIRange>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e33f      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039d0:	f000 fc48 	bl	8004264 <HAL_RCC_GetSysClockFreq>
 80039d4:	4602      	mov	r2, r0
 80039d6:	4b5c      	ldr	r3, [pc, #368]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	091b      	lsrs	r3, r3, #4
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	495a      	ldr	r1, [pc, #360]	; (8003b4c <HAL_RCC_OscConfig+0x29c>)
 80039e2:	5ccb      	ldrb	r3, [r1, r3]
 80039e4:	f003 031f 	and.w	r3, r3, #31
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
 80039ec:	4a58      	ldr	r2, [pc, #352]	; (8003b50 <HAL_RCC_OscConfig+0x2a0>)
 80039ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039f0:	4b58      	ldr	r3, [pc, #352]	; (8003b54 <HAL_RCC_OscConfig+0x2a4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fd fb1f 	bl	8001038 <HAL_InitTick>
 80039fa:	4603      	mov	r3, r0
 80039fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d052      	beq.n	8003aaa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	e323      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d032      	beq.n	8003a76 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a10:	4b4d      	ldr	r3, [pc, #308]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a4c      	ldr	r2, [pc, #304]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a1c:	f7fd fb5c 	bl	80010d8 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a24:	f7fd fb58 	bl	80010d8 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e30c      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a36:	4b44      	ldr	r3, [pc, #272]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a42:	4b41      	ldr	r3, [pc, #260]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a40      	ldr	r2, [pc, #256]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003a48:	f043 0308 	orr.w	r3, r3, #8
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	4b3e      	ldr	r3, [pc, #248]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	493b      	ldr	r1, [pc, #236]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a60:	4b39      	ldr	r3, [pc, #228]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	4936      	ldr	r1, [pc, #216]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	604b      	str	r3, [r1, #4]
 8003a74:	e01a      	b.n	8003aac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a76:	4b34      	ldr	r3, [pc, #208]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a33      	ldr	r2, [pc, #204]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003a7c:	f023 0301 	bic.w	r3, r3, #1
 8003a80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a82:	f7fd fb29 	bl	80010d8 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a8a:	f7fd fb25 	bl	80010d8 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e2d9      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a9c:	4b2a      	ldr	r3, [pc, #168]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f0      	bne.n	8003a8a <HAL_RCC_OscConfig+0x1da>
 8003aa8:	e000      	b.n	8003aac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003aaa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d074      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d005      	beq.n	8003aca <HAL_RCC_OscConfig+0x21a>
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	2b0c      	cmp	r3, #12
 8003ac2:	d10e      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d10b      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aca:	4b1f      	ldr	r3, [pc, #124]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d064      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x2f0>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d160      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e2b6      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aea:	d106      	bne.n	8003afa <HAL_RCC_OscConfig+0x24a>
 8003aec:	4b16      	ldr	r3, [pc, #88]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a15      	ldr	r2, [pc, #84]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	e01d      	b.n	8003b36 <HAL_RCC_OscConfig+0x286>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b02:	d10c      	bne.n	8003b1e <HAL_RCC_OscConfig+0x26e>
 8003b04:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a0f      	ldr	r2, [pc, #60]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003b0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	4b0d      	ldr	r3, [pc, #52]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a0c      	ldr	r2, [pc, #48]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	e00b      	b.n	8003b36 <HAL_RCC_OscConfig+0x286>
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a09      	ldr	r2, [pc, #36]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a06      	ldr	r2, [pc, #24]	; (8003b48 <HAL_RCC_OscConfig+0x298>)
 8003b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d01c      	beq.n	8003b78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3e:	f7fd facb 	bl	80010d8 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b44:	e011      	b.n	8003b6a <HAL_RCC_OscConfig+0x2ba>
 8003b46:	bf00      	nop
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	080067a0 	.word	0x080067a0
 8003b50:	20000000 	.word	0x20000000
 8003b54:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b58:	f7fd fabe 	bl	80010d8 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e272      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b6a:	4baf      	ldr	r3, [pc, #700]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0x2a8>
 8003b76:	e014      	b.n	8003ba2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fd faae 	bl	80010d8 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b80:	f7fd faaa 	bl	80010d8 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	; 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e25e      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b92:	4ba5      	ldr	r3, [pc, #660]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x2d0>
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d060      	beq.n	8003c70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x310>
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	2b0c      	cmp	r3, #12
 8003bb8:	d119      	bne.n	8003bee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d116      	bne.n	8003bee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bc0:	4b99      	ldr	r3, [pc, #612]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x328>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e23b      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd8:	4b93      	ldr	r3, [pc, #588]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	061b      	lsls	r3, r3, #24
 8003be6:	4990      	ldr	r1, [pc, #576]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bec:	e040      	b.n	8003c70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d023      	beq.n	8003c3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf6:	4b8c      	ldr	r3, [pc, #560]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a8b      	ldr	r2, [pc, #556]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c02:	f7fd fa69 	bl	80010d8 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c0a:	f7fd fa65 	bl	80010d8 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e219      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c1c:	4b82      	ldr	r3, [pc, #520]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c28:	4b7f      	ldr	r3, [pc, #508]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	061b      	lsls	r3, r3, #24
 8003c36:	497c      	ldr	r1, [pc, #496]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	604b      	str	r3, [r1, #4]
 8003c3c:	e018      	b.n	8003c70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c3e:	4b7a      	ldr	r3, [pc, #488]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a79      	ldr	r2, [pc, #484]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4a:	f7fd fa45 	bl	80010d8 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c52:	f7fd fa41 	bl	80010d8 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e1f5      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c64:	4b70      	ldr	r3, [pc, #448]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1f0      	bne.n	8003c52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d03c      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d01c      	beq.n	8003cbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c84:	4b68      	ldr	r3, [pc, #416]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c8a:	4a67      	ldr	r2, [pc, #412]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c94:	f7fd fa20 	bl	80010d8 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c9c:	f7fd fa1c 	bl	80010d8 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e1d0      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cae:	4b5e      	ldr	r3, [pc, #376]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0ef      	beq.n	8003c9c <HAL_RCC_OscConfig+0x3ec>
 8003cbc:	e01b      	b.n	8003cf6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cbe:	4b5a      	ldr	r3, [pc, #360]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc4:	4a58      	ldr	r2, [pc, #352]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cce:	f7fd fa03 	bl	80010d8 <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd6:	f7fd f9ff 	bl	80010d8 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e1b3      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ce8:	4b4f      	ldr	r3, [pc, #316]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1ef      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 80a6 	beq.w	8003e50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d04:	2300      	movs	r3, #0
 8003d06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d08:	4b47      	ldr	r3, [pc, #284]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10d      	bne.n	8003d30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d14:	4b44      	ldr	r3, [pc, #272]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d18:	4a43      	ldr	r2, [pc, #268]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d20:	4b41      	ldr	r3, [pc, #260]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d30:	4b3e      	ldr	r3, [pc, #248]	; (8003e2c <HAL_RCC_OscConfig+0x57c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d118      	bne.n	8003d6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d3c:	4b3b      	ldr	r3, [pc, #236]	; (8003e2c <HAL_RCC_OscConfig+0x57c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a3a      	ldr	r2, [pc, #232]	; (8003e2c <HAL_RCC_OscConfig+0x57c>)
 8003d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d48:	f7fd f9c6 	bl	80010d8 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d50:	f7fd f9c2 	bl	80010d8 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e176      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d62:	4b32      	ldr	r3, [pc, #200]	; (8003e2c <HAL_RCC_OscConfig+0x57c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0f0      	beq.n	8003d50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d108      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4d8>
 8003d76:	4b2c      	ldr	r3, [pc, #176]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7c:	4a2a      	ldr	r2, [pc, #168]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d86:	e024      	b.n	8003dd2 <HAL_RCC_OscConfig+0x522>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b05      	cmp	r3, #5
 8003d8e:	d110      	bne.n	8003db2 <HAL_RCC_OscConfig+0x502>
 8003d90:	4b25      	ldr	r3, [pc, #148]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d96:	4a24      	ldr	r2, [pc, #144]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003d98:	f043 0304 	orr.w	r3, r3, #4
 8003d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003da0:	4b21      	ldr	r3, [pc, #132]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da6:	4a20      	ldr	r2, [pc, #128]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003db0:	e00f      	b.n	8003dd2 <HAL_RCC_OscConfig+0x522>
 8003db2:	4b1d      	ldr	r3, [pc, #116]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db8:	4a1b      	ldr	r2, [pc, #108]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dc2:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc8:	4a17      	ldr	r2, [pc, #92]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003dca:	f023 0304 	bic.w	r3, r3, #4
 8003dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d016      	beq.n	8003e08 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dda:	f7fd f97d 	bl	80010d8 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003de0:	e00a      	b.n	8003df8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de2:	f7fd f979 	bl	80010d8 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e12b      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003df8:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <HAL_RCC_OscConfig+0x578>)
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0ed      	beq.n	8003de2 <HAL_RCC_OscConfig+0x532>
 8003e06:	e01a      	b.n	8003e3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e08:	f7fd f966 	bl	80010d8 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e0e:	e00f      	b.n	8003e30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e10:	f7fd f962 	bl	80010d8 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d906      	bls.n	8003e30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e114      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
 8003e26:	bf00      	nop
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e30:	4b89      	ldr	r3, [pc, #548]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1e8      	bne.n	8003e10 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e3e:	7ffb      	ldrb	r3, [r7, #31]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d105      	bne.n	8003e50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e44:	4b84      	ldr	r3, [pc, #528]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8003e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e48:	4a83      	ldr	r2, [pc, #524]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8003e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80fa 	beq.w	800404e <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	f040 80d0 	bne.w	8004004 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e64:	4b7c      	ldr	r3, [pc, #496]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f003 0203 	and.w	r2, r3, #3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d130      	bne.n	8003eda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	3b01      	subs	r3, #1
 8003e84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d127      	bne.n	8003eda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e94:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d11f      	bne.n	8003eda <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ea4:	2a07      	cmp	r2, #7
 8003ea6:	bf14      	ite	ne
 8003ea8:	2201      	movne	r2, #1
 8003eaa:	2200      	moveq	r2, #0
 8003eac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d113      	bne.n	8003eda <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebc:	085b      	lsrs	r3, r3, #1
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d109      	bne.n	8003eda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed0:	085b      	lsrs	r3, r3, #1
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d06e      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	2b0c      	cmp	r3, #12
 8003ede:	d069      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ee0:	4b5d      	ldr	r3, [pc, #372]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d105      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003eec:	4b5a      	ldr	r3, [pc, #360]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e0a9      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003efc:	4b56      	ldr	r3, [pc, #344]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a55      	ldr	r2, [pc, #340]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8003f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f06:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f08:	f7fd f8e6 	bl	80010d8 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f10:	f7fd f8e2 	bl	80010d8 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e096      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f22:	4b4d      	ldr	r3, [pc, #308]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f2e:	4b4a      	ldr	r3, [pc, #296]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	4b4a      	ldr	r3, [pc, #296]	; (800405c <HAL_RCC_OscConfig+0x7ac>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f3e:	3a01      	subs	r2, #1
 8003f40:	0112      	lsls	r2, r2, #4
 8003f42:	4311      	orrs	r1, r2
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f48:	0212      	lsls	r2, r2, #8
 8003f4a:	4311      	orrs	r1, r2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f50:	0852      	lsrs	r2, r2, #1
 8003f52:	3a01      	subs	r2, #1
 8003f54:	0552      	lsls	r2, r2, #21
 8003f56:	4311      	orrs	r1, r2
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f5c:	0852      	lsrs	r2, r2, #1
 8003f5e:	3a01      	subs	r2, #1
 8003f60:	0652      	lsls	r2, r2, #25
 8003f62:	4311      	orrs	r1, r2
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f68:	0912      	lsrs	r2, r2, #4
 8003f6a:	0452      	lsls	r2, r2, #17
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	493a      	ldr	r1, [pc, #232]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f74:	4b38      	ldr	r3, [pc, #224]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a37      	ldr	r2, [pc, #220]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8003f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f80:	4b35      	ldr	r3, [pc, #212]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	4a34      	ldr	r2, [pc, #208]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8003f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f8c:	f7fd f8a4 	bl	80010d8 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f94:	f7fd f8a0 	bl	80010d8 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e054      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fa6:	4b2c      	ldr	r3, [pc, #176]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fb2:	e04c      	b.n	800404e <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e04b      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fb8:	4b27      	ldr	r3, [pc, #156]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d144      	bne.n	800404e <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003fc4:	4b24      	ldr	r3, [pc, #144]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a23      	ldr	r2, [pc, #140]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8003fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fd0:	4b21      	ldr	r3, [pc, #132]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	4a20      	ldr	r2, [pc, #128]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8003fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fdc:	f7fd f87c 	bl	80010d8 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe4:	f7fd f878 	bl	80010d8 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e02c      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff6:	4b18      	ldr	r3, [pc, #96]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x734>
 8004002:	e024      	b.n	800404e <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2b0c      	cmp	r3, #12
 8004008:	d01f      	beq.n	800404a <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400a:	4b13      	ldr	r3, [pc, #76]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a12      	ldr	r2, [pc, #72]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8004010:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004016:	f7fd f85f 	bl	80010d8 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800401e:	f7fd f85b 	bl	80010d8 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e00f      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004030:	4b09      	ldr	r3, [pc, #36]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f0      	bne.n	800401e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800403c:	4b06      	ldr	r3, [pc, #24]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	4905      	ldr	r1, [pc, #20]	; (8004058 <HAL_RCC_OscConfig+0x7a8>)
 8004042:	4b07      	ldr	r3, [pc, #28]	; (8004060 <HAL_RCC_OscConfig+0x7b0>)
 8004044:	4013      	ands	r3, r2
 8004046:	60cb      	str	r3, [r1, #12]
 8004048:	e001      	b.n	800404e <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3720      	adds	r7, #32
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40021000 	.word	0x40021000
 800405c:	f99d808c 	.word	0xf99d808c
 8004060:	feeefffc 	.word	0xfeeefffc

08004064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0e7      	b.n	8004248 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004078:	4b75      	ldr	r3, [pc, #468]	; (8004250 <HAL_RCC_ClockConfig+0x1ec>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d910      	bls.n	80040a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b72      	ldr	r3, [pc, #456]	; (8004250 <HAL_RCC_ClockConfig+0x1ec>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f023 0207 	bic.w	r2, r3, #7
 800408e:	4970      	ldr	r1, [pc, #448]	; (8004250 <HAL_RCC_ClockConfig+0x1ec>)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	4313      	orrs	r3, r2
 8004094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004096:	4b6e      	ldr	r3, [pc, #440]	; (8004250 <HAL_RCC_ClockConfig+0x1ec>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0cf      	b.n	8004248 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d010      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	4b66      	ldr	r3, [pc, #408]	; (8004254 <HAL_RCC_ClockConfig+0x1f0>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d908      	bls.n	80040d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c4:	4b63      	ldr	r3, [pc, #396]	; (8004254 <HAL_RCC_ClockConfig+0x1f0>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	4960      	ldr	r1, [pc, #384]	; (8004254 <HAL_RCC_ClockConfig+0x1f0>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d04c      	beq.n	800417c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d107      	bne.n	80040fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ea:	4b5a      	ldr	r3, [pc, #360]	; (8004254 <HAL_RCC_ClockConfig+0x1f0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d121      	bne.n	800413a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e0a6      	b.n	8004248 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d107      	bne.n	8004112 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004102:	4b54      	ldr	r3, [pc, #336]	; (8004254 <HAL_RCC_ClockConfig+0x1f0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d115      	bne.n	800413a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e09a      	b.n	8004248 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d107      	bne.n	800412a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800411a:	4b4e      	ldr	r3, [pc, #312]	; (8004254 <HAL_RCC_ClockConfig+0x1f0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e08e      	b.n	8004248 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800412a:	4b4a      	ldr	r3, [pc, #296]	; (8004254 <HAL_RCC_ClockConfig+0x1f0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e086      	b.n	8004248 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800413a:	4b46      	ldr	r3, [pc, #280]	; (8004254 <HAL_RCC_ClockConfig+0x1f0>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f023 0203 	bic.w	r2, r3, #3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4943      	ldr	r1, [pc, #268]	; (8004254 <HAL_RCC_ClockConfig+0x1f0>)
 8004148:	4313      	orrs	r3, r2
 800414a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800414c:	f7fc ffc4 	bl	80010d8 <HAL_GetTick>
 8004150:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004152:	e00a      	b.n	800416a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004154:	f7fc ffc0 	bl	80010d8 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004162:	4293      	cmp	r3, r2
 8004164:	d901      	bls.n	800416a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e06e      	b.n	8004248 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416a:	4b3a      	ldr	r3, [pc, #232]	; (8004254 <HAL_RCC_ClockConfig+0x1f0>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 020c 	and.w	r2, r3, #12
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	429a      	cmp	r2, r3
 800417a:	d1eb      	bne.n	8004154 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d010      	beq.n	80041aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	4b31      	ldr	r3, [pc, #196]	; (8004254 <HAL_RCC_ClockConfig+0x1f0>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004194:	429a      	cmp	r2, r3
 8004196:	d208      	bcs.n	80041aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004198:	4b2e      	ldr	r3, [pc, #184]	; (8004254 <HAL_RCC_ClockConfig+0x1f0>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	492b      	ldr	r1, [pc, #172]	; (8004254 <HAL_RCC_ClockConfig+0x1f0>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041aa:	4b29      	ldr	r3, [pc, #164]	; (8004250 <HAL_RCC_ClockConfig+0x1ec>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d210      	bcs.n	80041da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b8:	4b25      	ldr	r3, [pc, #148]	; (8004250 <HAL_RCC_ClockConfig+0x1ec>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f023 0207 	bic.w	r2, r3, #7
 80041c0:	4923      	ldr	r1, [pc, #140]	; (8004250 <HAL_RCC_ClockConfig+0x1ec>)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c8:	4b21      	ldr	r3, [pc, #132]	; (8004250 <HAL_RCC_ClockConfig+0x1ec>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d001      	beq.n	80041da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e036      	b.n	8004248 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d008      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041e6:	4b1b      	ldr	r3, [pc, #108]	; (8004254 <HAL_RCC_ClockConfig+0x1f0>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	4918      	ldr	r1, [pc, #96]	; (8004254 <HAL_RCC_ClockConfig+0x1f0>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d009      	beq.n	8004218 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004204:	4b13      	ldr	r3, [pc, #76]	; (8004254 <HAL_RCC_ClockConfig+0x1f0>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	4910      	ldr	r1, [pc, #64]	; (8004254 <HAL_RCC_ClockConfig+0x1f0>)
 8004214:	4313      	orrs	r3, r2
 8004216:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004218:	f000 f824 	bl	8004264 <HAL_RCC_GetSysClockFreq>
 800421c:	4602      	mov	r2, r0
 800421e:	4b0d      	ldr	r3, [pc, #52]	; (8004254 <HAL_RCC_ClockConfig+0x1f0>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	091b      	lsrs	r3, r3, #4
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	490b      	ldr	r1, [pc, #44]	; (8004258 <HAL_RCC_ClockConfig+0x1f4>)
 800422a:	5ccb      	ldrb	r3, [r1, r3]
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	fa22 f303 	lsr.w	r3, r2, r3
 8004234:	4a09      	ldr	r2, [pc, #36]	; (800425c <HAL_RCC_ClockConfig+0x1f8>)
 8004236:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004238:	4b09      	ldr	r3, [pc, #36]	; (8004260 <HAL_RCC_ClockConfig+0x1fc>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f7fc fefb 	bl	8001038 <HAL_InitTick>
 8004242:	4603      	mov	r3, r0
 8004244:	72fb      	strb	r3, [r7, #11]

  return status;
 8004246:	7afb      	ldrb	r3, [r7, #11]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40022000 	.word	0x40022000
 8004254:	40021000 	.word	0x40021000
 8004258:	080067a0 	.word	0x080067a0
 800425c:	20000000 	.word	0x20000000
 8004260:	20000004 	.word	0x20000004

08004264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004264:	b480      	push	{r7}
 8004266:	b089      	sub	sp, #36	; 0x24
 8004268:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
 800426e:	2300      	movs	r3, #0
 8004270:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004272:	4b3e      	ldr	r3, [pc, #248]	; (800436c <HAL_RCC_GetSysClockFreq+0x108>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 030c 	and.w	r3, r3, #12
 800427a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800427c:	4b3b      	ldr	r3, [pc, #236]	; (800436c <HAL_RCC_GetSysClockFreq+0x108>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_RCC_GetSysClockFreq+0x34>
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	2b0c      	cmp	r3, #12
 8004290:	d121      	bne.n	80042d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d11e      	bne.n	80042d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004298:	4b34      	ldr	r3, [pc, #208]	; (800436c <HAL_RCC_GetSysClockFreq+0x108>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d107      	bne.n	80042b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042a4:	4b31      	ldr	r3, [pc, #196]	; (800436c <HAL_RCC_GetSysClockFreq+0x108>)
 80042a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042aa:	0a1b      	lsrs	r3, r3, #8
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	61fb      	str	r3, [r7, #28]
 80042b2:	e005      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042b4:	4b2d      	ldr	r3, [pc, #180]	; (800436c <HAL_RCC_GetSysClockFreq+0x108>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042c0:	4a2b      	ldr	r2, [pc, #172]	; (8004370 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10d      	bne.n	80042ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042d4:	e00a      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d102      	bne.n	80042e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042dc:	4b25      	ldr	r3, [pc, #148]	; (8004374 <HAL_RCC_GetSysClockFreq+0x110>)
 80042de:	61bb      	str	r3, [r7, #24]
 80042e0:	e004      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d101      	bne.n	80042ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042e8:	4b23      	ldr	r3, [pc, #140]	; (8004378 <HAL_RCC_GetSysClockFreq+0x114>)
 80042ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	2b0c      	cmp	r3, #12
 80042f0:	d134      	bne.n	800435c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042f2:	4b1e      	ldr	r3, [pc, #120]	; (800436c <HAL_RCC_GetSysClockFreq+0x108>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d003      	beq.n	800430a <HAL_RCC_GetSysClockFreq+0xa6>
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b03      	cmp	r3, #3
 8004306:	d003      	beq.n	8004310 <HAL_RCC_GetSysClockFreq+0xac>
 8004308:	e005      	b.n	8004316 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800430a:	4b1a      	ldr	r3, [pc, #104]	; (8004374 <HAL_RCC_GetSysClockFreq+0x110>)
 800430c:	617b      	str	r3, [r7, #20]
      break;
 800430e:	e005      	b.n	800431c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004310:	4b19      	ldr	r3, [pc, #100]	; (8004378 <HAL_RCC_GetSysClockFreq+0x114>)
 8004312:	617b      	str	r3, [r7, #20]
      break;
 8004314:	e002      	b.n	800431c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	617b      	str	r3, [r7, #20]
      break;
 800431a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800431c:	4b13      	ldr	r3, [pc, #76]	; (800436c <HAL_RCC_GetSysClockFreq+0x108>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	091b      	lsrs	r3, r3, #4
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	3301      	adds	r3, #1
 8004328:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800432a:	4b10      	ldr	r3, [pc, #64]	; (800436c <HAL_RCC_GetSysClockFreq+0x108>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	fb02 f203 	mul.w	r2, r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004340:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004342:	4b0a      	ldr	r3, [pc, #40]	; (800436c <HAL_RCC_GetSysClockFreq+0x108>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	0e5b      	lsrs	r3, r3, #25
 8004348:	f003 0303 	and.w	r3, r3, #3
 800434c:	3301      	adds	r3, #1
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	fbb2 f3f3 	udiv	r3, r2, r3
 800435a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800435c:	69bb      	ldr	r3, [r7, #24]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3724      	adds	r7, #36	; 0x24
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	40021000 	.word	0x40021000
 8004370:	080067b8 	.word	0x080067b8
 8004374:	00f42400 	.word	0x00f42400
 8004378:	007a1200 	.word	0x007a1200

0800437c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004380:	4b03      	ldr	r3, [pc, #12]	; (8004390 <HAL_RCC_GetHCLKFreq+0x14>)
 8004382:	681b      	ldr	r3, [r3, #0]
}
 8004384:	4618      	mov	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	20000000 	.word	0x20000000

08004394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004398:	f7ff fff0 	bl	800437c <HAL_RCC_GetHCLKFreq>
 800439c:	4602      	mov	r2, r0
 800439e:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	0a1b      	lsrs	r3, r3, #8
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	4904      	ldr	r1, [pc, #16]	; (80043bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80043aa:	5ccb      	ldrb	r3, [r1, r3]
 80043ac:	f003 031f 	and.w	r3, r3, #31
 80043b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40021000 	.word	0x40021000
 80043bc:	080067b0 	.word	0x080067b0

080043c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043c4:	f7ff ffda 	bl	800437c <HAL_RCC_GetHCLKFreq>
 80043c8:	4602      	mov	r2, r0
 80043ca:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	0adb      	lsrs	r3, r3, #11
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	4904      	ldr	r1, [pc, #16]	; (80043e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043d6:	5ccb      	ldrb	r3, [r1, r3]
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40021000 	.word	0x40021000
 80043e8:	080067b0 	.word	0x080067b0

080043ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043f4:	2300      	movs	r3, #0
 80043f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043f8:	4b2a      	ldr	r3, [pc, #168]	; (80044a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004404:	f7ff f9f0 	bl	80037e8 <HAL_PWREx_GetVoltageRange>
 8004408:	6178      	str	r0, [r7, #20]
 800440a:	e014      	b.n	8004436 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800440c:	4b25      	ldr	r3, [pc, #148]	; (80044a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800440e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004410:	4a24      	ldr	r2, [pc, #144]	; (80044a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004416:	6593      	str	r3, [r2, #88]	; 0x58
 8004418:	4b22      	ldr	r3, [pc, #136]	; (80044a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800441a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004424:	f7ff f9e0 	bl	80037e8 <HAL_PWREx_GetVoltageRange>
 8004428:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800442a:	4b1e      	ldr	r3, [pc, #120]	; (80044a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800442c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442e:	4a1d      	ldr	r2, [pc, #116]	; (80044a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004434:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800443c:	d10b      	bne.n	8004456 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b80      	cmp	r3, #128	; 0x80
 8004442:	d919      	bls.n	8004478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2ba0      	cmp	r3, #160	; 0xa0
 8004448:	d902      	bls.n	8004450 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800444a:	2302      	movs	r3, #2
 800444c:	613b      	str	r3, [r7, #16]
 800444e:	e013      	b.n	8004478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004450:	2301      	movs	r3, #1
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	e010      	b.n	8004478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b80      	cmp	r3, #128	; 0x80
 800445a:	d902      	bls.n	8004462 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800445c:	2303      	movs	r3, #3
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	e00a      	b.n	8004478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b80      	cmp	r3, #128	; 0x80
 8004466:	d102      	bne.n	800446e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004468:	2302      	movs	r3, #2
 800446a:	613b      	str	r3, [r7, #16]
 800446c:	e004      	b.n	8004478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b70      	cmp	r3, #112	; 0x70
 8004472:	d101      	bne.n	8004478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004474:	2301      	movs	r3, #1
 8004476:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004478:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f023 0207 	bic.w	r2, r3, #7
 8004480:	4909      	ldr	r1, [pc, #36]	; (80044a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004488:	4b07      	ldr	r3, [pc, #28]	; (80044a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	429a      	cmp	r2, r3
 8004494:	d001      	beq.n	800449a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40021000 	.word	0x40021000
 80044a8:	40022000 	.word	0x40022000

080044ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044b4:	2300      	movs	r3, #0
 80044b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044b8:	2300      	movs	r3, #0
 80044ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d041      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044d0:	d02a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80044d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044d6:	d824      	bhi.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044dc:	d008      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044e2:	d81e      	bhi.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00a      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ec:	d010      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044ee:	e018      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044f0:	4b86      	ldr	r3, [pc, #536]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	4a85      	ldr	r2, [pc, #532]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044fc:	e015      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	3304      	adds	r3, #4
 8004502:	2100      	movs	r1, #0
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fabb 	bl	8004a80 <RCCEx_PLLSAI1_Config>
 800450a:	4603      	mov	r3, r0
 800450c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800450e:	e00c      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3320      	adds	r3, #32
 8004514:	2100      	movs	r1, #0
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fba6 	bl	8004c68 <RCCEx_PLLSAI2_Config>
 800451c:	4603      	mov	r3, r0
 800451e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004520:	e003      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	74fb      	strb	r3, [r7, #19]
      break;
 8004526:	e000      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800452a:	7cfb      	ldrb	r3, [r7, #19]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10b      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004530:	4b76      	ldr	r3, [pc, #472]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800453e:	4973      	ldr	r1, [pc, #460]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004546:	e001      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004548:	7cfb      	ldrb	r3, [r7, #19]
 800454a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d041      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800455c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004560:	d02a      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004562:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004566:	d824      	bhi.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004568:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800456c:	d008      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800456e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004572:	d81e      	bhi.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800457c:	d010      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800457e:	e018      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004580:	4b62      	ldr	r3, [pc, #392]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	4a61      	ldr	r2, [pc, #388]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800458a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800458c:	e015      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3304      	adds	r3, #4
 8004592:	2100      	movs	r1, #0
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fa73 	bl	8004a80 <RCCEx_PLLSAI1_Config>
 800459a:	4603      	mov	r3, r0
 800459c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800459e:	e00c      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3320      	adds	r3, #32
 80045a4:	2100      	movs	r1, #0
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fb5e 	bl	8004c68 <RCCEx_PLLSAI2_Config>
 80045ac:	4603      	mov	r3, r0
 80045ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045b0:	e003      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	74fb      	strb	r3, [r7, #19]
      break;
 80045b6:	e000      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80045b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ba:	7cfb      	ldrb	r3, [r7, #19]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10b      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045c0:	4b52      	ldr	r3, [pc, #328]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045ce:	494f      	ldr	r1, [pc, #316]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045d6:	e001      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d8:	7cfb      	ldrb	r3, [r7, #19]
 80045da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 80a0 	beq.w	800472a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ea:	2300      	movs	r3, #0
 80045ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045ee:	4b47      	ldr	r3, [pc, #284]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80045fe:	2300      	movs	r3, #0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00d      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004604:	4b41      	ldr	r3, [pc, #260]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004608:	4a40      	ldr	r2, [pc, #256]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460e:	6593      	str	r3, [r2, #88]	; 0x58
 8004610:	4b3e      	ldr	r3, [pc, #248]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004618:	60bb      	str	r3, [r7, #8]
 800461a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800461c:	2301      	movs	r3, #1
 800461e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004620:	4b3b      	ldr	r3, [pc, #236]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a3a      	ldr	r2, [pc, #232]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800462a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800462c:	f7fc fd54 	bl	80010d8 <HAL_GetTick>
 8004630:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004632:	e009      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004634:	f7fc fd50 	bl	80010d8 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d902      	bls.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	74fb      	strb	r3, [r7, #19]
        break;
 8004646:	e005      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004648:	4b31      	ldr	r3, [pc, #196]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0ef      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004654:	7cfb      	ldrb	r3, [r7, #19]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d15c      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800465a:	4b2c      	ldr	r3, [pc, #176]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004664:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d01f      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	429a      	cmp	r2, r3
 8004676:	d019      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004678:	4b24      	ldr	r3, [pc, #144]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004682:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004684:	4b21      	ldr	r3, [pc, #132]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468a:	4a20      	ldr	r2, [pc, #128]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004694:	4b1d      	ldr	r3, [pc, #116]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469a:	4a1c      	ldr	r2, [pc, #112]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800469c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046a4:	4a19      	ldr	r2, [pc, #100]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d016      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b6:	f7fc fd0f 	bl	80010d8 <HAL_GetTick>
 80046ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046bc:	e00b      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046be:	f7fc fd0b 	bl	80010d8 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d902      	bls.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	74fb      	strb	r3, [r7, #19]
            break;
 80046d4:	e006      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046d6:	4b0d      	ldr	r3, [pc, #52]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0ec      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80046e4:	7cfb      	ldrb	r3, [r7, #19]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10c      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ea:	4b08      	ldr	r3, [pc, #32]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046fa:	4904      	ldr	r1, [pc, #16]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004702:	e009      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004704:	7cfb      	ldrb	r3, [r7, #19]
 8004706:	74bb      	strb	r3, [r7, #18]
 8004708:	e006      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800470a:	bf00      	nop
 800470c:	40021000 	.word	0x40021000
 8004710:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004714:	7cfb      	ldrb	r3, [r7, #19]
 8004716:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004718:	7c7b      	ldrb	r3, [r7, #17]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d105      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800471e:	4b9e      	ldr	r3, [pc, #632]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004722:	4a9d      	ldr	r2, [pc, #628]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004728:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004736:	4b98      	ldr	r3, [pc, #608]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473c:	f023 0203 	bic.w	r2, r3, #3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	4994      	ldr	r1, [pc, #592]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004758:	4b8f      	ldr	r3, [pc, #572]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475e:	f023 020c 	bic.w	r2, r3, #12
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004766:	498c      	ldr	r1, [pc, #560]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800477a:	4b87      	ldr	r3, [pc, #540]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004780:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	4983      	ldr	r1, [pc, #524]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800479c:	4b7e      	ldr	r3, [pc, #504]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047aa:	497b      	ldr	r1, [pc, #492]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0310 	and.w	r3, r3, #16
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047be:	4b76      	ldr	r3, [pc, #472]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047cc:	4972      	ldr	r1, [pc, #456]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047e0:	4b6d      	ldr	r3, [pc, #436]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ee:	496a      	ldr	r1, [pc, #424]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004802:	4b65      	ldr	r3, [pc, #404]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004808:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004810:	4961      	ldr	r1, [pc, #388]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004824:	4b5c      	ldr	r3, [pc, #368]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004832:	4959      	ldr	r1, [pc, #356]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004846:	4b54      	ldr	r3, [pc, #336]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004854:	4950      	ldr	r1, [pc, #320]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004868:	4b4b      	ldr	r3, [pc, #300]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004876:	4948      	ldr	r1, [pc, #288]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800488a:	4b43      	ldr	r3, [pc, #268]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004890:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004898:	493f      	ldr	r1, [pc, #252]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d028      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048ac:	4b3a      	ldr	r3, [pc, #232]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ba:	4937      	ldr	r1, [pc, #220]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048ca:	d106      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048cc:	4b32      	ldr	r3, [pc, #200]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4a31      	ldr	r2, [pc, #196]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048d6:	60d3      	str	r3, [r2, #12]
 80048d8:	e011      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048e2:	d10c      	bne.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3304      	adds	r3, #4
 80048e8:	2101      	movs	r1, #1
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 f8c8 	bl	8004a80 <RCCEx_PLLSAI1_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048f4:	7cfb      	ldrb	r3, [r7, #19]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80048fa:	7cfb      	ldrb	r3, [r7, #19]
 80048fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d028      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800490a:	4b23      	ldr	r3, [pc, #140]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004910:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004918:	491f      	ldr	r1, [pc, #124]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004924:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004928:	d106      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800492a:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	4a1a      	ldr	r2, [pc, #104]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004930:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004934:	60d3      	str	r3, [r2, #12]
 8004936:	e011      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004940:	d10c      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3304      	adds	r3, #4
 8004946:	2101      	movs	r1, #1
 8004948:	4618      	mov	r0, r3
 800494a:	f000 f899 	bl	8004a80 <RCCEx_PLLSAI1_Config>
 800494e:	4603      	mov	r3, r0
 8004950:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004952:	7cfb      	ldrb	r3, [r7, #19]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004958:	7cfb      	ldrb	r3, [r7, #19]
 800495a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d02b      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800496a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004976:	4908      	ldr	r1, [pc, #32]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004982:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004986:	d109      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004988:	4b03      	ldr	r3, [pc, #12]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4a02      	ldr	r2, [pc, #8]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004992:	60d3      	str	r3, [r2, #12]
 8004994:	e014      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004996:	bf00      	nop
 8004998:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049a4:	d10c      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3304      	adds	r3, #4
 80049aa:	2101      	movs	r1, #1
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 f867 	bl	8004a80 <RCCEx_PLLSAI1_Config>
 80049b2:	4603      	mov	r3, r0
 80049b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049b6:	7cfb      	ldrb	r3, [r7, #19]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80049bc:	7cfb      	ldrb	r3, [r7, #19]
 80049be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d02f      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049cc:	4b2b      	ldr	r3, [pc, #172]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049da:	4928      	ldr	r1, [pc, #160]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049ea:	d10d      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3304      	adds	r3, #4
 80049f0:	2102      	movs	r1, #2
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 f844 	bl	8004a80 <RCCEx_PLLSAI1_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049fc:	7cfb      	ldrb	r3, [r7, #19]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d014      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a02:	7cfb      	ldrb	r3, [r7, #19]
 8004a04:	74bb      	strb	r3, [r7, #18]
 8004a06:	e011      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a10:	d10c      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3320      	adds	r3, #32
 8004a16:	2102      	movs	r1, #2
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 f925 	bl	8004c68 <RCCEx_PLLSAI2_Config>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a22:	7cfb      	ldrb	r3, [r7, #19]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a28:	7cfb      	ldrb	r3, [r7, #19]
 8004a2a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a38:	4b10      	ldr	r3, [pc, #64]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a46:	490d      	ldr	r1, [pc, #52]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00b      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a5a:	4b08      	ldr	r3, [pc, #32]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a6a:	4904      	ldr	r1, [pc, #16]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a72:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40021000 	.word	0x40021000

08004a80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a8e:	4b75      	ldr	r3, [pc, #468]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d018      	beq.n	8004acc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a9a:	4b72      	ldr	r3, [pc, #456]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f003 0203 	and.w	r2, r3, #3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d10d      	bne.n	8004ac6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
       ||
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d009      	beq.n	8004ac6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ab2:	4b6c      	ldr	r3, [pc, #432]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	091b      	lsrs	r3, r3, #4
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
       ||
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d047      	beq.n	8004b56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	73fb      	strb	r3, [r7, #15]
 8004aca:	e044      	b.n	8004b56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d018      	beq.n	8004b06 <RCCEx_PLLSAI1_Config+0x86>
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d825      	bhi.n	8004b24 <RCCEx_PLLSAI1_Config+0xa4>
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d002      	beq.n	8004ae2 <RCCEx_PLLSAI1_Config+0x62>
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d009      	beq.n	8004af4 <RCCEx_PLLSAI1_Config+0x74>
 8004ae0:	e020      	b.n	8004b24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ae2:	4b60      	ldr	r3, [pc, #384]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d11d      	bne.n	8004b2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004af2:	e01a      	b.n	8004b2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004af4:	4b5b      	ldr	r3, [pc, #364]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d116      	bne.n	8004b2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b04:	e013      	b.n	8004b2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b06:	4b57      	ldr	r3, [pc, #348]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10f      	bne.n	8004b32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b12:	4b54      	ldr	r3, [pc, #336]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b22:	e006      	b.n	8004b32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
      break;
 8004b28:	e004      	b.n	8004b34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e002      	b.n	8004b34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b2e:	bf00      	nop
 8004b30:	e000      	b.n	8004b34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b32:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10d      	bne.n	8004b56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b3a:	4b4a      	ldr	r3, [pc, #296]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6819      	ldr	r1, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	4944      	ldr	r1, [pc, #272]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d17d      	bne.n	8004c58 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b5c:	4b41      	ldr	r3, [pc, #260]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a40      	ldr	r2, [pc, #256]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b68:	f7fc fab6 	bl	80010d8 <HAL_GetTick>
 8004b6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b6e:	e009      	b.n	8004b84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b70:	f7fc fab2 	bl	80010d8 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d902      	bls.n	8004b84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	73fb      	strb	r3, [r7, #15]
        break;
 8004b82:	e005      	b.n	8004b90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b84:	4b37      	ldr	r3, [pc, #220]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1ef      	bne.n	8004b70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d160      	bne.n	8004c58 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d111      	bne.n	8004bc0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b9c:	4b31      	ldr	r3, [pc, #196]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6892      	ldr	r2, [r2, #8]
 8004bac:	0211      	lsls	r1, r2, #8
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	68d2      	ldr	r2, [r2, #12]
 8004bb2:	0912      	lsrs	r2, r2, #4
 8004bb4:	0452      	lsls	r2, r2, #17
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	492a      	ldr	r1, [pc, #168]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	610b      	str	r3, [r1, #16]
 8004bbe:	e027      	b.n	8004c10 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d112      	bne.n	8004bec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bc6:	4b27      	ldr	r3, [pc, #156]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004bce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6892      	ldr	r2, [r2, #8]
 8004bd6:	0211      	lsls	r1, r2, #8
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6912      	ldr	r2, [r2, #16]
 8004bdc:	0852      	lsrs	r2, r2, #1
 8004bde:	3a01      	subs	r2, #1
 8004be0:	0552      	lsls	r2, r2, #21
 8004be2:	430a      	orrs	r2, r1
 8004be4:	491f      	ldr	r1, [pc, #124]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	610b      	str	r3, [r1, #16]
 8004bea:	e011      	b.n	8004c10 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bec:	4b1d      	ldr	r3, [pc, #116]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bf4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6892      	ldr	r2, [r2, #8]
 8004bfc:	0211      	lsls	r1, r2, #8
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6952      	ldr	r2, [r2, #20]
 8004c02:	0852      	lsrs	r2, r2, #1
 8004c04:	3a01      	subs	r2, #1
 8004c06:	0652      	lsls	r2, r2, #25
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	4916      	ldr	r1, [pc, #88]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c10:	4b14      	ldr	r3, [pc, #80]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a13      	ldr	r2, [pc, #76]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1c:	f7fc fa5c 	bl	80010d8 <HAL_GetTick>
 8004c20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c22:	e009      	b.n	8004c38 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c24:	f7fc fa58 	bl	80010d8 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d902      	bls.n	8004c38 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	73fb      	strb	r3, [r7, #15]
          break;
 8004c36:	e005      	b.n	8004c44 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c38:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0ef      	beq.n	8004c24 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c4a:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4c:	691a      	ldr	r2, [r3, #16]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	4904      	ldr	r1, [pc, #16]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	40021000 	.word	0x40021000

08004c68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c76:	4b6a      	ldr	r3, [pc, #424]	; (8004e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d018      	beq.n	8004cb4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c82:	4b67      	ldr	r3, [pc, #412]	; (8004e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f003 0203 	and.w	r2, r3, #3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d10d      	bne.n	8004cae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
       ||
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d009      	beq.n	8004cae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c9a:	4b61      	ldr	r3, [pc, #388]	; (8004e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	091b      	lsrs	r3, r3, #4
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
       ||
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d047      	beq.n	8004d3e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	73fb      	strb	r3, [r7, #15]
 8004cb2:	e044      	b.n	8004d3e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b03      	cmp	r3, #3
 8004cba:	d018      	beq.n	8004cee <RCCEx_PLLSAI2_Config+0x86>
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d825      	bhi.n	8004d0c <RCCEx_PLLSAI2_Config+0xa4>
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d002      	beq.n	8004cca <RCCEx_PLLSAI2_Config+0x62>
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d009      	beq.n	8004cdc <RCCEx_PLLSAI2_Config+0x74>
 8004cc8:	e020      	b.n	8004d0c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cca:	4b55      	ldr	r3, [pc, #340]	; (8004e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d11d      	bne.n	8004d12 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cda:	e01a      	b.n	8004d12 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cdc:	4b50      	ldr	r3, [pc, #320]	; (8004e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d116      	bne.n	8004d16 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cec:	e013      	b.n	8004d16 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cee:	4b4c      	ldr	r3, [pc, #304]	; (8004e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10f      	bne.n	8004d1a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cfa:	4b49      	ldr	r3, [pc, #292]	; (8004e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d109      	bne.n	8004d1a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d0a:	e006      	b.n	8004d1a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d10:	e004      	b.n	8004d1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d12:	bf00      	nop
 8004d14:	e002      	b.n	8004d1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d16:	bf00      	nop
 8004d18:	e000      	b.n	8004d1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10d      	bne.n	8004d3e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d22:	4b3f      	ldr	r3, [pc, #252]	; (8004e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6819      	ldr	r1, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	430b      	orrs	r3, r1
 8004d38:	4939      	ldr	r1, [pc, #228]	; (8004e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d167      	bne.n	8004e14 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d44:	4b36      	ldr	r3, [pc, #216]	; (8004e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a35      	ldr	r2, [pc, #212]	; (8004e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d50:	f7fc f9c2 	bl	80010d8 <HAL_GetTick>
 8004d54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d56:	e009      	b.n	8004d6c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d58:	f7fc f9be 	bl	80010d8 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d902      	bls.n	8004d6c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	73fb      	strb	r3, [r7, #15]
        break;
 8004d6a:	e005      	b.n	8004d78 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d6c:	4b2c      	ldr	r3, [pc, #176]	; (8004e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1ef      	bne.n	8004d58 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d14a      	bne.n	8004e14 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d111      	bne.n	8004da8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d84:	4b26      	ldr	r3, [pc, #152]	; (8004e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6892      	ldr	r2, [r2, #8]
 8004d94:	0211      	lsls	r1, r2, #8
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	68d2      	ldr	r2, [r2, #12]
 8004d9a:	0912      	lsrs	r2, r2, #4
 8004d9c:	0452      	lsls	r2, r2, #17
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	491f      	ldr	r1, [pc, #124]	; (8004e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	614b      	str	r3, [r1, #20]
 8004da6:	e011      	b.n	8004dcc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004da8:	4b1d      	ldr	r3, [pc, #116]	; (8004e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004db0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6892      	ldr	r2, [r2, #8]
 8004db8:	0211      	lsls	r1, r2, #8
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6912      	ldr	r2, [r2, #16]
 8004dbe:	0852      	lsrs	r2, r2, #1
 8004dc0:	3a01      	subs	r2, #1
 8004dc2:	0652      	lsls	r2, r2, #25
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	4916      	ldr	r1, [pc, #88]	; (8004e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004dcc:	4b14      	ldr	r3, [pc, #80]	; (8004e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a13      	ldr	r2, [pc, #76]	; (8004e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd8:	f7fc f97e 	bl	80010d8 <HAL_GetTick>
 8004ddc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dde:	e009      	b.n	8004df4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004de0:	f7fc f97a 	bl	80010d8 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d902      	bls.n	8004df4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	73fb      	strb	r3, [r7, #15]
          break;
 8004df2:	e005      	b.n	8004e00 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004df4:	4b0a      	ldr	r3, [pc, #40]	; (8004e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0ef      	beq.n	8004de0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d106      	bne.n	8004e14 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e06:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e08:	695a      	ldr	r2, [r3, #20]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	4904      	ldr	r1, [pc, #16]	; (8004e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40021000 	.word	0x40021000

08004e24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e040      	b.n	8004eb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7fc f812 	bl	8000e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2224      	movs	r2, #36	; 0x24
 8004e50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0201 	bic.w	r2, r2, #1
 8004e60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f8c0 	bl	8004fe8 <UART_SetConfig>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e022      	b.n	8004eb8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fb3e 	bl	80054fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fbc5 	bl	8005640 <UART_CheckIdleState>
 8004eb6:	4603      	mov	r3, r0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08a      	sub	sp, #40	; 0x28
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ed4:	2b20      	cmp	r3, #32
 8004ed6:	f040 8082 	bne.w	8004fde <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <HAL_UART_Transmit+0x26>
 8004ee0:	88fb      	ldrh	r3, [r7, #6]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e07a      	b.n	8004fe0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_UART_Transmit+0x38>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e073      	b.n	8004fe0 <HAL_UART_Transmit+0x120>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2221      	movs	r2, #33	; 0x21
 8004f0c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f0e:	f7fc f8e3 	bl	80010d8 <HAL_GetTick>
 8004f12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	88fa      	ldrh	r2, [r7, #6]
 8004f18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	88fa      	ldrh	r2, [r7, #6]
 8004f20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2c:	d108      	bne.n	8004f40 <HAL_UART_Transmit+0x80>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d104      	bne.n	8004f40 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004f36:	2300      	movs	r3, #0
 8004f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	61bb      	str	r3, [r7, #24]
 8004f3e:	e003      	b.n	8004f48 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f44:	2300      	movs	r3, #0
 8004f46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004f50:	e02d      	b.n	8004fae <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2180      	movs	r1, #128	; 0x80
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 fbb8 	bl	80056d2 <UART_WaitOnFlagUntilTimeout>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e039      	b.n	8004fe0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10b      	bne.n	8004f8a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	881a      	ldrh	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f7e:	b292      	uxth	r2, r2
 8004f80:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	3302      	adds	r3, #2
 8004f86:	61bb      	str	r3, [r7, #24]
 8004f88:	e008      	b.n	8004f9c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	781a      	ldrb	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	b292      	uxth	r2, r2
 8004f94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1cb      	bne.n	8004f52 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2140      	movs	r1, #64	; 0x40
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 fb84 	bl	80056d2 <UART_WaitOnFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e005      	b.n	8004fe0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e000      	b.n	8004fe0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004fde:	2302      	movs	r3, #2
  }
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3720      	adds	r7, #32
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fe8:	b5b0      	push	{r4, r5, r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	4313      	orrs	r3, r2
 800500a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4bad      	ldr	r3, [pc, #692]	; (80052c8 <UART_SetConfig+0x2e0>)
 8005014:	4013      	ands	r3, r2
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	6812      	ldr	r2, [r2, #0]
 800501a:	69f9      	ldr	r1, [r7, #28]
 800501c:	430b      	orrs	r3, r1
 800501e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4aa2      	ldr	r2, [pc, #648]	; (80052cc <UART_SetConfig+0x2e4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d004      	beq.n	8005050 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	69fa      	ldr	r2, [r7, #28]
 800504c:	4313      	orrs	r3, r2
 800504e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69fa      	ldr	r2, [r7, #28]
 8005060:	430a      	orrs	r2, r1
 8005062:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a99      	ldr	r2, [pc, #612]	; (80052d0 <UART_SetConfig+0x2e8>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d121      	bne.n	80050b2 <UART_SetConfig+0xca>
 800506e:	4b99      	ldr	r3, [pc, #612]	; (80052d4 <UART_SetConfig+0x2ec>)
 8005070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	2b03      	cmp	r3, #3
 800507a:	d817      	bhi.n	80050ac <UART_SetConfig+0xc4>
 800507c:	a201      	add	r2, pc, #4	; (adr r2, 8005084 <UART_SetConfig+0x9c>)
 800507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005082:	bf00      	nop
 8005084:	08005095 	.word	0x08005095
 8005088:	080050a1 	.word	0x080050a1
 800508c:	0800509b 	.word	0x0800509b
 8005090:	080050a7 	.word	0x080050a7
 8005094:	2301      	movs	r3, #1
 8005096:	76fb      	strb	r3, [r7, #27]
 8005098:	e0e7      	b.n	800526a <UART_SetConfig+0x282>
 800509a:	2302      	movs	r3, #2
 800509c:	76fb      	strb	r3, [r7, #27]
 800509e:	e0e4      	b.n	800526a <UART_SetConfig+0x282>
 80050a0:	2304      	movs	r3, #4
 80050a2:	76fb      	strb	r3, [r7, #27]
 80050a4:	e0e1      	b.n	800526a <UART_SetConfig+0x282>
 80050a6:	2308      	movs	r3, #8
 80050a8:	76fb      	strb	r3, [r7, #27]
 80050aa:	e0de      	b.n	800526a <UART_SetConfig+0x282>
 80050ac:	2310      	movs	r3, #16
 80050ae:	76fb      	strb	r3, [r7, #27]
 80050b0:	e0db      	b.n	800526a <UART_SetConfig+0x282>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a88      	ldr	r2, [pc, #544]	; (80052d8 <UART_SetConfig+0x2f0>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d132      	bne.n	8005122 <UART_SetConfig+0x13a>
 80050bc:	4b85      	ldr	r3, [pc, #532]	; (80052d4 <UART_SetConfig+0x2ec>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c2:	f003 030c 	and.w	r3, r3, #12
 80050c6:	2b0c      	cmp	r3, #12
 80050c8:	d828      	bhi.n	800511c <UART_SetConfig+0x134>
 80050ca:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <UART_SetConfig+0xe8>)
 80050cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d0:	08005105 	.word	0x08005105
 80050d4:	0800511d 	.word	0x0800511d
 80050d8:	0800511d 	.word	0x0800511d
 80050dc:	0800511d 	.word	0x0800511d
 80050e0:	08005111 	.word	0x08005111
 80050e4:	0800511d 	.word	0x0800511d
 80050e8:	0800511d 	.word	0x0800511d
 80050ec:	0800511d 	.word	0x0800511d
 80050f0:	0800510b 	.word	0x0800510b
 80050f4:	0800511d 	.word	0x0800511d
 80050f8:	0800511d 	.word	0x0800511d
 80050fc:	0800511d 	.word	0x0800511d
 8005100:	08005117 	.word	0x08005117
 8005104:	2300      	movs	r3, #0
 8005106:	76fb      	strb	r3, [r7, #27]
 8005108:	e0af      	b.n	800526a <UART_SetConfig+0x282>
 800510a:	2302      	movs	r3, #2
 800510c:	76fb      	strb	r3, [r7, #27]
 800510e:	e0ac      	b.n	800526a <UART_SetConfig+0x282>
 8005110:	2304      	movs	r3, #4
 8005112:	76fb      	strb	r3, [r7, #27]
 8005114:	e0a9      	b.n	800526a <UART_SetConfig+0x282>
 8005116:	2308      	movs	r3, #8
 8005118:	76fb      	strb	r3, [r7, #27]
 800511a:	e0a6      	b.n	800526a <UART_SetConfig+0x282>
 800511c:	2310      	movs	r3, #16
 800511e:	76fb      	strb	r3, [r7, #27]
 8005120:	e0a3      	b.n	800526a <UART_SetConfig+0x282>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a6d      	ldr	r2, [pc, #436]	; (80052dc <UART_SetConfig+0x2f4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d120      	bne.n	800516e <UART_SetConfig+0x186>
 800512c:	4b69      	ldr	r3, [pc, #420]	; (80052d4 <UART_SetConfig+0x2ec>)
 800512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005132:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005136:	2b30      	cmp	r3, #48	; 0x30
 8005138:	d013      	beq.n	8005162 <UART_SetConfig+0x17a>
 800513a:	2b30      	cmp	r3, #48	; 0x30
 800513c:	d814      	bhi.n	8005168 <UART_SetConfig+0x180>
 800513e:	2b20      	cmp	r3, #32
 8005140:	d009      	beq.n	8005156 <UART_SetConfig+0x16e>
 8005142:	2b20      	cmp	r3, #32
 8005144:	d810      	bhi.n	8005168 <UART_SetConfig+0x180>
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <UART_SetConfig+0x168>
 800514a:	2b10      	cmp	r3, #16
 800514c:	d006      	beq.n	800515c <UART_SetConfig+0x174>
 800514e:	e00b      	b.n	8005168 <UART_SetConfig+0x180>
 8005150:	2300      	movs	r3, #0
 8005152:	76fb      	strb	r3, [r7, #27]
 8005154:	e089      	b.n	800526a <UART_SetConfig+0x282>
 8005156:	2302      	movs	r3, #2
 8005158:	76fb      	strb	r3, [r7, #27]
 800515a:	e086      	b.n	800526a <UART_SetConfig+0x282>
 800515c:	2304      	movs	r3, #4
 800515e:	76fb      	strb	r3, [r7, #27]
 8005160:	e083      	b.n	800526a <UART_SetConfig+0x282>
 8005162:	2308      	movs	r3, #8
 8005164:	76fb      	strb	r3, [r7, #27]
 8005166:	e080      	b.n	800526a <UART_SetConfig+0x282>
 8005168:	2310      	movs	r3, #16
 800516a:	76fb      	strb	r3, [r7, #27]
 800516c:	e07d      	b.n	800526a <UART_SetConfig+0x282>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a5b      	ldr	r2, [pc, #364]	; (80052e0 <UART_SetConfig+0x2f8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d120      	bne.n	80051ba <UART_SetConfig+0x1d2>
 8005178:	4b56      	ldr	r3, [pc, #344]	; (80052d4 <UART_SetConfig+0x2ec>)
 800517a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005182:	2bc0      	cmp	r3, #192	; 0xc0
 8005184:	d013      	beq.n	80051ae <UART_SetConfig+0x1c6>
 8005186:	2bc0      	cmp	r3, #192	; 0xc0
 8005188:	d814      	bhi.n	80051b4 <UART_SetConfig+0x1cc>
 800518a:	2b80      	cmp	r3, #128	; 0x80
 800518c:	d009      	beq.n	80051a2 <UART_SetConfig+0x1ba>
 800518e:	2b80      	cmp	r3, #128	; 0x80
 8005190:	d810      	bhi.n	80051b4 <UART_SetConfig+0x1cc>
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <UART_SetConfig+0x1b4>
 8005196:	2b40      	cmp	r3, #64	; 0x40
 8005198:	d006      	beq.n	80051a8 <UART_SetConfig+0x1c0>
 800519a:	e00b      	b.n	80051b4 <UART_SetConfig+0x1cc>
 800519c:	2300      	movs	r3, #0
 800519e:	76fb      	strb	r3, [r7, #27]
 80051a0:	e063      	b.n	800526a <UART_SetConfig+0x282>
 80051a2:	2302      	movs	r3, #2
 80051a4:	76fb      	strb	r3, [r7, #27]
 80051a6:	e060      	b.n	800526a <UART_SetConfig+0x282>
 80051a8:	2304      	movs	r3, #4
 80051aa:	76fb      	strb	r3, [r7, #27]
 80051ac:	e05d      	b.n	800526a <UART_SetConfig+0x282>
 80051ae:	2308      	movs	r3, #8
 80051b0:	76fb      	strb	r3, [r7, #27]
 80051b2:	e05a      	b.n	800526a <UART_SetConfig+0x282>
 80051b4:	2310      	movs	r3, #16
 80051b6:	76fb      	strb	r3, [r7, #27]
 80051b8:	e057      	b.n	800526a <UART_SetConfig+0x282>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a49      	ldr	r2, [pc, #292]	; (80052e4 <UART_SetConfig+0x2fc>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d125      	bne.n	8005210 <UART_SetConfig+0x228>
 80051c4:	4b43      	ldr	r3, [pc, #268]	; (80052d4 <UART_SetConfig+0x2ec>)
 80051c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051d2:	d017      	beq.n	8005204 <UART_SetConfig+0x21c>
 80051d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051d8:	d817      	bhi.n	800520a <UART_SetConfig+0x222>
 80051da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051de:	d00b      	beq.n	80051f8 <UART_SetConfig+0x210>
 80051e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051e4:	d811      	bhi.n	800520a <UART_SetConfig+0x222>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <UART_SetConfig+0x20a>
 80051ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ee:	d006      	beq.n	80051fe <UART_SetConfig+0x216>
 80051f0:	e00b      	b.n	800520a <UART_SetConfig+0x222>
 80051f2:	2300      	movs	r3, #0
 80051f4:	76fb      	strb	r3, [r7, #27]
 80051f6:	e038      	b.n	800526a <UART_SetConfig+0x282>
 80051f8:	2302      	movs	r3, #2
 80051fa:	76fb      	strb	r3, [r7, #27]
 80051fc:	e035      	b.n	800526a <UART_SetConfig+0x282>
 80051fe:	2304      	movs	r3, #4
 8005200:	76fb      	strb	r3, [r7, #27]
 8005202:	e032      	b.n	800526a <UART_SetConfig+0x282>
 8005204:	2308      	movs	r3, #8
 8005206:	76fb      	strb	r3, [r7, #27]
 8005208:	e02f      	b.n	800526a <UART_SetConfig+0x282>
 800520a:	2310      	movs	r3, #16
 800520c:	76fb      	strb	r3, [r7, #27]
 800520e:	e02c      	b.n	800526a <UART_SetConfig+0x282>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a2d      	ldr	r2, [pc, #180]	; (80052cc <UART_SetConfig+0x2e4>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d125      	bne.n	8005266 <UART_SetConfig+0x27e>
 800521a:	4b2e      	ldr	r3, [pc, #184]	; (80052d4 <UART_SetConfig+0x2ec>)
 800521c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005220:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005224:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005228:	d017      	beq.n	800525a <UART_SetConfig+0x272>
 800522a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800522e:	d817      	bhi.n	8005260 <UART_SetConfig+0x278>
 8005230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005234:	d00b      	beq.n	800524e <UART_SetConfig+0x266>
 8005236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800523a:	d811      	bhi.n	8005260 <UART_SetConfig+0x278>
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <UART_SetConfig+0x260>
 8005240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005244:	d006      	beq.n	8005254 <UART_SetConfig+0x26c>
 8005246:	e00b      	b.n	8005260 <UART_SetConfig+0x278>
 8005248:	2300      	movs	r3, #0
 800524a:	76fb      	strb	r3, [r7, #27]
 800524c:	e00d      	b.n	800526a <UART_SetConfig+0x282>
 800524e:	2302      	movs	r3, #2
 8005250:	76fb      	strb	r3, [r7, #27]
 8005252:	e00a      	b.n	800526a <UART_SetConfig+0x282>
 8005254:	2304      	movs	r3, #4
 8005256:	76fb      	strb	r3, [r7, #27]
 8005258:	e007      	b.n	800526a <UART_SetConfig+0x282>
 800525a:	2308      	movs	r3, #8
 800525c:	76fb      	strb	r3, [r7, #27]
 800525e:	e004      	b.n	800526a <UART_SetConfig+0x282>
 8005260:	2310      	movs	r3, #16
 8005262:	76fb      	strb	r3, [r7, #27]
 8005264:	e001      	b.n	800526a <UART_SetConfig+0x282>
 8005266:	2310      	movs	r3, #16
 8005268:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a17      	ldr	r2, [pc, #92]	; (80052cc <UART_SetConfig+0x2e4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	f040 8087 	bne.w	8005384 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005276:	7efb      	ldrb	r3, [r7, #27]
 8005278:	2b08      	cmp	r3, #8
 800527a:	d837      	bhi.n	80052ec <UART_SetConfig+0x304>
 800527c:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <UART_SetConfig+0x29c>)
 800527e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005282:	bf00      	nop
 8005284:	080052a9 	.word	0x080052a9
 8005288:	080052ed 	.word	0x080052ed
 800528c:	080052b1 	.word	0x080052b1
 8005290:	080052ed 	.word	0x080052ed
 8005294:	080052b7 	.word	0x080052b7
 8005298:	080052ed 	.word	0x080052ed
 800529c:	080052ed 	.word	0x080052ed
 80052a0:	080052ed 	.word	0x080052ed
 80052a4:	080052bf 	.word	0x080052bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a8:	f7ff f874 	bl	8004394 <HAL_RCC_GetPCLK1Freq>
 80052ac:	6178      	str	r0, [r7, #20]
        break;
 80052ae:	e022      	b.n	80052f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052b0:	4b0d      	ldr	r3, [pc, #52]	; (80052e8 <UART_SetConfig+0x300>)
 80052b2:	617b      	str	r3, [r7, #20]
        break;
 80052b4:	e01f      	b.n	80052f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052b6:	f7fe ffd5 	bl	8004264 <HAL_RCC_GetSysClockFreq>
 80052ba:	6178      	str	r0, [r7, #20]
        break;
 80052bc:	e01b      	b.n	80052f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052c2:	617b      	str	r3, [r7, #20]
        break;
 80052c4:	e017      	b.n	80052f6 <UART_SetConfig+0x30e>
 80052c6:	bf00      	nop
 80052c8:	efff69f3 	.word	0xefff69f3
 80052cc:	40008000 	.word	0x40008000
 80052d0:	40013800 	.word	0x40013800
 80052d4:	40021000 	.word	0x40021000
 80052d8:	40004400 	.word	0x40004400
 80052dc:	40004800 	.word	0x40004800
 80052e0:	40004c00 	.word	0x40004c00
 80052e4:	40005000 	.word	0x40005000
 80052e8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	76bb      	strb	r3, [r7, #26]
        break;
 80052f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 80f1 	beq.w	80054e0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	4613      	mov	r3, r2
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	4413      	add	r3, r2
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	429a      	cmp	r2, r3
 800530c:	d305      	bcc.n	800531a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	429a      	cmp	r2, r3
 8005318:	d902      	bls.n	8005320 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	76bb      	strb	r3, [r7, #26]
 800531e:	e0df      	b.n	80054e0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	4618      	mov	r0, r3
 8005324:	f04f 0100 	mov.w	r1, #0
 8005328:	f04f 0200 	mov.w	r2, #0
 800532c:	f04f 0300 	mov.w	r3, #0
 8005330:	020b      	lsls	r3, r1, #8
 8005332:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005336:	0202      	lsls	r2, r0, #8
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	6849      	ldr	r1, [r1, #4]
 800533c:	0849      	lsrs	r1, r1, #1
 800533e:	4608      	mov	r0, r1
 8005340:	f04f 0100 	mov.w	r1, #0
 8005344:	1814      	adds	r4, r2, r0
 8005346:	eb43 0501 	adc.w	r5, r3, r1
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	461a      	mov	r2, r3
 8005350:	f04f 0300 	mov.w	r3, #0
 8005354:	4620      	mov	r0, r4
 8005356:	4629      	mov	r1, r5
 8005358:	f7fa ff8a 	bl	8000270 <__aeabi_uldivmod>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4613      	mov	r3, r2
 8005362:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800536a:	d308      	bcc.n	800537e <UART_SetConfig+0x396>
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005372:	d204      	bcs.n	800537e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	60da      	str	r2, [r3, #12]
 800537c:	e0b0      	b.n	80054e0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	76bb      	strb	r3, [r7, #26]
 8005382:	e0ad      	b.n	80054e0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800538c:	d15b      	bne.n	8005446 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800538e:	7efb      	ldrb	r3, [r7, #27]
 8005390:	2b08      	cmp	r3, #8
 8005392:	d828      	bhi.n	80053e6 <UART_SetConfig+0x3fe>
 8005394:	a201      	add	r2, pc, #4	; (adr r2, 800539c <UART_SetConfig+0x3b4>)
 8005396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539a:	bf00      	nop
 800539c:	080053c1 	.word	0x080053c1
 80053a0:	080053c9 	.word	0x080053c9
 80053a4:	080053d1 	.word	0x080053d1
 80053a8:	080053e7 	.word	0x080053e7
 80053ac:	080053d7 	.word	0x080053d7
 80053b0:	080053e7 	.word	0x080053e7
 80053b4:	080053e7 	.word	0x080053e7
 80053b8:	080053e7 	.word	0x080053e7
 80053bc:	080053df 	.word	0x080053df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c0:	f7fe ffe8 	bl	8004394 <HAL_RCC_GetPCLK1Freq>
 80053c4:	6178      	str	r0, [r7, #20]
        break;
 80053c6:	e013      	b.n	80053f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053c8:	f7fe fffa 	bl	80043c0 <HAL_RCC_GetPCLK2Freq>
 80053cc:	6178      	str	r0, [r7, #20]
        break;
 80053ce:	e00f      	b.n	80053f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053d0:	4b49      	ldr	r3, [pc, #292]	; (80054f8 <UART_SetConfig+0x510>)
 80053d2:	617b      	str	r3, [r7, #20]
        break;
 80053d4:	e00c      	b.n	80053f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053d6:	f7fe ff45 	bl	8004264 <HAL_RCC_GetSysClockFreq>
 80053da:	6178      	str	r0, [r7, #20]
        break;
 80053dc:	e008      	b.n	80053f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053e2:	617b      	str	r3, [r7, #20]
        break;
 80053e4:	e004      	b.n	80053f0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	76bb      	strb	r3, [r7, #26]
        break;
 80053ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d074      	beq.n	80054e0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	005a      	lsls	r2, r3, #1
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	085b      	lsrs	r3, r3, #1
 8005400:	441a      	add	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	fbb2 f3f3 	udiv	r3, r2, r3
 800540a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	2b0f      	cmp	r3, #15
 8005410:	d916      	bls.n	8005440 <UART_SetConfig+0x458>
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005418:	d212      	bcs.n	8005440 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	b29b      	uxth	r3, r3
 800541e:	f023 030f 	bic.w	r3, r3, #15
 8005422:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	085b      	lsrs	r3, r3, #1
 8005428:	b29b      	uxth	r3, r3
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	b29a      	uxth	r2, r3
 8005430:	89fb      	ldrh	r3, [r7, #14]
 8005432:	4313      	orrs	r3, r2
 8005434:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	89fa      	ldrh	r2, [r7, #14]
 800543c:	60da      	str	r2, [r3, #12]
 800543e:	e04f      	b.n	80054e0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	76bb      	strb	r3, [r7, #26]
 8005444:	e04c      	b.n	80054e0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005446:	7efb      	ldrb	r3, [r7, #27]
 8005448:	2b08      	cmp	r3, #8
 800544a:	d828      	bhi.n	800549e <UART_SetConfig+0x4b6>
 800544c:	a201      	add	r2, pc, #4	; (adr r2, 8005454 <UART_SetConfig+0x46c>)
 800544e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005452:	bf00      	nop
 8005454:	08005479 	.word	0x08005479
 8005458:	08005481 	.word	0x08005481
 800545c:	08005489 	.word	0x08005489
 8005460:	0800549f 	.word	0x0800549f
 8005464:	0800548f 	.word	0x0800548f
 8005468:	0800549f 	.word	0x0800549f
 800546c:	0800549f 	.word	0x0800549f
 8005470:	0800549f 	.word	0x0800549f
 8005474:	08005497 	.word	0x08005497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005478:	f7fe ff8c 	bl	8004394 <HAL_RCC_GetPCLK1Freq>
 800547c:	6178      	str	r0, [r7, #20]
        break;
 800547e:	e013      	b.n	80054a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005480:	f7fe ff9e 	bl	80043c0 <HAL_RCC_GetPCLK2Freq>
 8005484:	6178      	str	r0, [r7, #20]
        break;
 8005486:	e00f      	b.n	80054a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005488:	4b1b      	ldr	r3, [pc, #108]	; (80054f8 <UART_SetConfig+0x510>)
 800548a:	617b      	str	r3, [r7, #20]
        break;
 800548c:	e00c      	b.n	80054a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800548e:	f7fe fee9 	bl	8004264 <HAL_RCC_GetSysClockFreq>
 8005492:	6178      	str	r0, [r7, #20]
        break;
 8005494:	e008      	b.n	80054a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800549a:	617b      	str	r3, [r7, #20]
        break;
 800549c:	e004      	b.n	80054a8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	76bb      	strb	r3, [r7, #26]
        break;
 80054a6:	bf00      	nop
    }

    if (pclk != 0U)
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d018      	beq.n	80054e0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	085a      	lsrs	r2, r3, #1
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	441a      	add	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	2b0f      	cmp	r3, #15
 80054c6:	d909      	bls.n	80054dc <UART_SetConfig+0x4f4>
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ce:	d205      	bcs.n	80054dc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	60da      	str	r2, [r3, #12]
 80054da:	e001      	b.n	80054e0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80054ec:	7ebb      	ldrb	r3, [r7, #26]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3720      	adds	r7, #32
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bdb0      	pop	{r4, r5, r7, pc}
 80054f6:	bf00      	nop
 80054f8:	00f42400 	.word	0x00f42400

080054fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00a      	beq.n	8005526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00a      	beq.n	8005548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	430a      	orrs	r2, r1
 8005546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00a      	beq.n	800556a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	f003 0308 	and.w	r3, r3, #8
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	f003 0310 	and.w	r3, r3, #16
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00a      	beq.n	80055ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	f003 0320 	and.w	r3, r3, #32
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d01a      	beq.n	8005612 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055fa:	d10a      	bne.n	8005612 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	605a      	str	r2, [r3, #4]
  }
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af02      	add	r7, sp, #8
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005650:	f7fb fd42 	bl	80010d8 <HAL_GetTick>
 8005654:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0308 	and.w	r3, r3, #8
 8005660:	2b08      	cmp	r3, #8
 8005662:	d10e      	bne.n	8005682 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005664:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f82d 	bl	80056d2 <UART_WaitOnFlagUntilTimeout>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e023      	b.n	80056ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b04      	cmp	r3, #4
 800568e:	d10e      	bne.n	80056ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005690:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f817 	bl	80056d2 <UART_WaitOnFlagUntilTimeout>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e00d      	b.n	80056ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2220      	movs	r2, #32
 80056b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b09c      	sub	sp, #112	; 0x70
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	603b      	str	r3, [r7, #0]
 80056de:	4613      	mov	r3, r2
 80056e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e2:	e0a5      	b.n	8005830 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056ea:	f000 80a1 	beq.w	8005830 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ee:	f7fb fcf3 	bl	80010d8 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d302      	bcc.n	8005704 <UART_WaitOnFlagUntilTimeout+0x32>
 80056fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005700:	2b00      	cmp	r3, #0
 8005702:	d13e      	bne.n	8005782 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800570c:	e853 3f00 	ldrex	r3, [r3]
 8005710:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005714:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005718:	667b      	str	r3, [r7, #100]	; 0x64
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005722:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005724:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005726:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005728:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800572a:	e841 2300 	strex	r3, r2, [r1]
 800572e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1e6      	bne.n	8005704 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3308      	adds	r3, #8
 800573c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005748:	f023 0301 	bic.w	r3, r3, #1
 800574c:	663b      	str	r3, [r7, #96]	; 0x60
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3308      	adds	r3, #8
 8005754:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005756:	64ba      	str	r2, [r7, #72]	; 0x48
 8005758:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800575c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800575e:	e841 2300 	strex	r3, r2, [r1]
 8005762:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1e5      	bne.n	8005736 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2220      	movs	r2, #32
 800576e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2220      	movs	r2, #32
 8005774:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e067      	b.n	8005852 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	d04f      	beq.n	8005830 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800579a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800579e:	d147      	bne.n	8005830 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057a8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	461a      	mov	r2, r3
 80057c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c8:	637b      	str	r3, [r7, #52]	; 0x34
 80057ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e6      	bne.n	80057aa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3308      	adds	r3, #8
 80057e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	e853 3f00 	ldrex	r3, [r3]
 80057ea:	613b      	str	r3, [r7, #16]
   return(result);
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f023 0301 	bic.w	r3, r3, #1
 80057f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3308      	adds	r3, #8
 80057fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057fc:	623a      	str	r2, [r7, #32]
 80057fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005800:	69f9      	ldr	r1, [r7, #28]
 8005802:	6a3a      	ldr	r2, [r7, #32]
 8005804:	e841 2300 	strex	r3, r2, [r1]
 8005808:	61bb      	str	r3, [r7, #24]
   return(result);
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e5      	bne.n	80057dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2220      	movs	r2, #32
 800581a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2220      	movs	r2, #32
 8005820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e010      	b.n	8005852 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	69da      	ldr	r2, [r3, #28]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	4013      	ands	r3, r2
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	429a      	cmp	r2, r3
 800583e:	bf0c      	ite	eq
 8005840:	2301      	moveq	r3, #1
 8005842:	2300      	movne	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	461a      	mov	r2, r3
 8005848:	79fb      	ldrb	r3, [r7, #7]
 800584a:	429a      	cmp	r2, r3
 800584c:	f43f af4a 	beq.w	80056e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3770      	adds	r7, #112	; 0x70
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <__errno>:
 800585c:	4b01      	ldr	r3, [pc, #4]	; (8005864 <__errno+0x8>)
 800585e:	6818      	ldr	r0, [r3, #0]
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	2000000c 	.word	0x2000000c

08005868 <__libc_init_array>:
 8005868:	b570      	push	{r4, r5, r6, lr}
 800586a:	4d0d      	ldr	r5, [pc, #52]	; (80058a0 <__libc_init_array+0x38>)
 800586c:	4c0d      	ldr	r4, [pc, #52]	; (80058a4 <__libc_init_array+0x3c>)
 800586e:	1b64      	subs	r4, r4, r5
 8005870:	10a4      	asrs	r4, r4, #2
 8005872:	2600      	movs	r6, #0
 8005874:	42a6      	cmp	r6, r4
 8005876:	d109      	bne.n	800588c <__libc_init_array+0x24>
 8005878:	4d0b      	ldr	r5, [pc, #44]	; (80058a8 <__libc_init_array+0x40>)
 800587a:	4c0c      	ldr	r4, [pc, #48]	; (80058ac <__libc_init_array+0x44>)
 800587c:	f000 ff76 	bl	800676c <_init>
 8005880:	1b64      	subs	r4, r4, r5
 8005882:	10a4      	asrs	r4, r4, #2
 8005884:	2600      	movs	r6, #0
 8005886:	42a6      	cmp	r6, r4
 8005888:	d105      	bne.n	8005896 <__libc_init_array+0x2e>
 800588a:	bd70      	pop	{r4, r5, r6, pc}
 800588c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005890:	4798      	blx	r3
 8005892:	3601      	adds	r6, #1
 8005894:	e7ee      	b.n	8005874 <__libc_init_array+0xc>
 8005896:	f855 3b04 	ldr.w	r3, [r5], #4
 800589a:	4798      	blx	r3
 800589c:	3601      	adds	r6, #1
 800589e:	e7f2      	b.n	8005886 <__libc_init_array+0x1e>
 80058a0:	08006888 	.word	0x08006888
 80058a4:	08006888 	.word	0x08006888
 80058a8:	08006888 	.word	0x08006888
 80058ac:	0800688c 	.word	0x0800688c

080058b0 <memset>:
 80058b0:	4402      	add	r2, r0
 80058b2:	4603      	mov	r3, r0
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d100      	bne.n	80058ba <memset+0xa>
 80058b8:	4770      	bx	lr
 80058ba:	f803 1b01 	strb.w	r1, [r3], #1
 80058be:	e7f9      	b.n	80058b4 <memset+0x4>

080058c0 <iprintf>:
 80058c0:	b40f      	push	{r0, r1, r2, r3}
 80058c2:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <iprintf+0x2c>)
 80058c4:	b513      	push	{r0, r1, r4, lr}
 80058c6:	681c      	ldr	r4, [r3, #0]
 80058c8:	b124      	cbz	r4, 80058d4 <iprintf+0x14>
 80058ca:	69a3      	ldr	r3, [r4, #24]
 80058cc:	b913      	cbnz	r3, 80058d4 <iprintf+0x14>
 80058ce:	4620      	mov	r0, r4
 80058d0:	f000 f866 	bl	80059a0 <__sinit>
 80058d4:	ab05      	add	r3, sp, #20
 80058d6:	9a04      	ldr	r2, [sp, #16]
 80058d8:	68a1      	ldr	r1, [r4, #8]
 80058da:	9301      	str	r3, [sp, #4]
 80058dc:	4620      	mov	r0, r4
 80058de:	f000 f983 	bl	8005be8 <_vfiprintf_r>
 80058e2:	b002      	add	sp, #8
 80058e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e8:	b004      	add	sp, #16
 80058ea:	4770      	bx	lr
 80058ec:	2000000c 	.word	0x2000000c

080058f0 <std>:
 80058f0:	2300      	movs	r3, #0
 80058f2:	b510      	push	{r4, lr}
 80058f4:	4604      	mov	r4, r0
 80058f6:	e9c0 3300 	strd	r3, r3, [r0]
 80058fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058fe:	6083      	str	r3, [r0, #8]
 8005900:	8181      	strh	r1, [r0, #12]
 8005902:	6643      	str	r3, [r0, #100]	; 0x64
 8005904:	81c2      	strh	r2, [r0, #14]
 8005906:	6183      	str	r3, [r0, #24]
 8005908:	4619      	mov	r1, r3
 800590a:	2208      	movs	r2, #8
 800590c:	305c      	adds	r0, #92	; 0x5c
 800590e:	f7ff ffcf 	bl	80058b0 <memset>
 8005912:	4b05      	ldr	r3, [pc, #20]	; (8005928 <std+0x38>)
 8005914:	6263      	str	r3, [r4, #36]	; 0x24
 8005916:	4b05      	ldr	r3, [pc, #20]	; (800592c <std+0x3c>)
 8005918:	62a3      	str	r3, [r4, #40]	; 0x28
 800591a:	4b05      	ldr	r3, [pc, #20]	; (8005930 <std+0x40>)
 800591c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800591e:	4b05      	ldr	r3, [pc, #20]	; (8005934 <std+0x44>)
 8005920:	6224      	str	r4, [r4, #32]
 8005922:	6323      	str	r3, [r4, #48]	; 0x30
 8005924:	bd10      	pop	{r4, pc}
 8005926:	bf00      	nop
 8005928:	08006191 	.word	0x08006191
 800592c:	080061b3 	.word	0x080061b3
 8005930:	080061eb 	.word	0x080061eb
 8005934:	0800620f 	.word	0x0800620f

08005938 <_cleanup_r>:
 8005938:	4901      	ldr	r1, [pc, #4]	; (8005940 <_cleanup_r+0x8>)
 800593a:	f000 b8af 	b.w	8005a9c <_fwalk_reent>
 800593e:	bf00      	nop
 8005940:	080064e9 	.word	0x080064e9

08005944 <__sfmoreglue>:
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	1e4a      	subs	r2, r1, #1
 8005948:	2568      	movs	r5, #104	; 0x68
 800594a:	4355      	muls	r5, r2
 800594c:	460e      	mov	r6, r1
 800594e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005952:	f000 f8c5 	bl	8005ae0 <_malloc_r>
 8005956:	4604      	mov	r4, r0
 8005958:	b140      	cbz	r0, 800596c <__sfmoreglue+0x28>
 800595a:	2100      	movs	r1, #0
 800595c:	e9c0 1600 	strd	r1, r6, [r0]
 8005960:	300c      	adds	r0, #12
 8005962:	60a0      	str	r0, [r4, #8]
 8005964:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005968:	f7ff ffa2 	bl	80058b0 <memset>
 800596c:	4620      	mov	r0, r4
 800596e:	bd70      	pop	{r4, r5, r6, pc}

08005970 <__sfp_lock_acquire>:
 8005970:	4801      	ldr	r0, [pc, #4]	; (8005978 <__sfp_lock_acquire+0x8>)
 8005972:	f000 b8b3 	b.w	8005adc <__retarget_lock_acquire_recursive>
 8005976:	bf00      	nop
 8005978:	200002c8 	.word	0x200002c8

0800597c <__sfp_lock_release>:
 800597c:	4801      	ldr	r0, [pc, #4]	; (8005984 <__sfp_lock_release+0x8>)
 800597e:	f000 b8ae 	b.w	8005ade <__retarget_lock_release_recursive>
 8005982:	bf00      	nop
 8005984:	200002c8 	.word	0x200002c8

08005988 <__sinit_lock_acquire>:
 8005988:	4801      	ldr	r0, [pc, #4]	; (8005990 <__sinit_lock_acquire+0x8>)
 800598a:	f000 b8a7 	b.w	8005adc <__retarget_lock_acquire_recursive>
 800598e:	bf00      	nop
 8005990:	200002c3 	.word	0x200002c3

08005994 <__sinit_lock_release>:
 8005994:	4801      	ldr	r0, [pc, #4]	; (800599c <__sinit_lock_release+0x8>)
 8005996:	f000 b8a2 	b.w	8005ade <__retarget_lock_release_recursive>
 800599a:	bf00      	nop
 800599c:	200002c3 	.word	0x200002c3

080059a0 <__sinit>:
 80059a0:	b510      	push	{r4, lr}
 80059a2:	4604      	mov	r4, r0
 80059a4:	f7ff fff0 	bl	8005988 <__sinit_lock_acquire>
 80059a8:	69a3      	ldr	r3, [r4, #24]
 80059aa:	b11b      	cbz	r3, 80059b4 <__sinit+0x14>
 80059ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059b0:	f7ff bff0 	b.w	8005994 <__sinit_lock_release>
 80059b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80059b8:	6523      	str	r3, [r4, #80]	; 0x50
 80059ba:	4b13      	ldr	r3, [pc, #76]	; (8005a08 <__sinit+0x68>)
 80059bc:	4a13      	ldr	r2, [pc, #76]	; (8005a0c <__sinit+0x6c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80059c2:	42a3      	cmp	r3, r4
 80059c4:	bf04      	itt	eq
 80059c6:	2301      	moveq	r3, #1
 80059c8:	61a3      	streq	r3, [r4, #24]
 80059ca:	4620      	mov	r0, r4
 80059cc:	f000 f820 	bl	8005a10 <__sfp>
 80059d0:	6060      	str	r0, [r4, #4]
 80059d2:	4620      	mov	r0, r4
 80059d4:	f000 f81c 	bl	8005a10 <__sfp>
 80059d8:	60a0      	str	r0, [r4, #8]
 80059da:	4620      	mov	r0, r4
 80059dc:	f000 f818 	bl	8005a10 <__sfp>
 80059e0:	2200      	movs	r2, #0
 80059e2:	60e0      	str	r0, [r4, #12]
 80059e4:	2104      	movs	r1, #4
 80059e6:	6860      	ldr	r0, [r4, #4]
 80059e8:	f7ff ff82 	bl	80058f0 <std>
 80059ec:	68a0      	ldr	r0, [r4, #8]
 80059ee:	2201      	movs	r2, #1
 80059f0:	2109      	movs	r1, #9
 80059f2:	f7ff ff7d 	bl	80058f0 <std>
 80059f6:	68e0      	ldr	r0, [r4, #12]
 80059f8:	2202      	movs	r2, #2
 80059fa:	2112      	movs	r1, #18
 80059fc:	f7ff ff78 	bl	80058f0 <std>
 8005a00:	2301      	movs	r3, #1
 8005a02:	61a3      	str	r3, [r4, #24]
 8005a04:	e7d2      	b.n	80059ac <__sinit+0xc>
 8005a06:	bf00      	nop
 8005a08:	080067e8 	.word	0x080067e8
 8005a0c:	08005939 	.word	0x08005939

08005a10 <__sfp>:
 8005a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a12:	4607      	mov	r7, r0
 8005a14:	f7ff ffac 	bl	8005970 <__sfp_lock_acquire>
 8005a18:	4b1e      	ldr	r3, [pc, #120]	; (8005a94 <__sfp+0x84>)
 8005a1a:	681e      	ldr	r6, [r3, #0]
 8005a1c:	69b3      	ldr	r3, [r6, #24]
 8005a1e:	b913      	cbnz	r3, 8005a26 <__sfp+0x16>
 8005a20:	4630      	mov	r0, r6
 8005a22:	f7ff ffbd 	bl	80059a0 <__sinit>
 8005a26:	3648      	adds	r6, #72	; 0x48
 8005a28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	d503      	bpl.n	8005a38 <__sfp+0x28>
 8005a30:	6833      	ldr	r3, [r6, #0]
 8005a32:	b30b      	cbz	r3, 8005a78 <__sfp+0x68>
 8005a34:	6836      	ldr	r6, [r6, #0]
 8005a36:	e7f7      	b.n	8005a28 <__sfp+0x18>
 8005a38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a3c:	b9d5      	cbnz	r5, 8005a74 <__sfp+0x64>
 8005a3e:	4b16      	ldr	r3, [pc, #88]	; (8005a98 <__sfp+0x88>)
 8005a40:	60e3      	str	r3, [r4, #12]
 8005a42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a46:	6665      	str	r5, [r4, #100]	; 0x64
 8005a48:	f000 f847 	bl	8005ada <__retarget_lock_init_recursive>
 8005a4c:	f7ff ff96 	bl	800597c <__sfp_lock_release>
 8005a50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005a54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005a58:	6025      	str	r5, [r4, #0]
 8005a5a:	61a5      	str	r5, [r4, #24]
 8005a5c:	2208      	movs	r2, #8
 8005a5e:	4629      	mov	r1, r5
 8005a60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a64:	f7ff ff24 	bl	80058b0 <memset>
 8005a68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a70:	4620      	mov	r0, r4
 8005a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a74:	3468      	adds	r4, #104	; 0x68
 8005a76:	e7d9      	b.n	8005a2c <__sfp+0x1c>
 8005a78:	2104      	movs	r1, #4
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	f7ff ff62 	bl	8005944 <__sfmoreglue>
 8005a80:	4604      	mov	r4, r0
 8005a82:	6030      	str	r0, [r6, #0]
 8005a84:	2800      	cmp	r0, #0
 8005a86:	d1d5      	bne.n	8005a34 <__sfp+0x24>
 8005a88:	f7ff ff78 	bl	800597c <__sfp_lock_release>
 8005a8c:	230c      	movs	r3, #12
 8005a8e:	603b      	str	r3, [r7, #0]
 8005a90:	e7ee      	b.n	8005a70 <__sfp+0x60>
 8005a92:	bf00      	nop
 8005a94:	080067e8 	.word	0x080067e8
 8005a98:	ffff0001 	.word	0xffff0001

08005a9c <_fwalk_reent>:
 8005a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aa0:	4606      	mov	r6, r0
 8005aa2:	4688      	mov	r8, r1
 8005aa4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005aa8:	2700      	movs	r7, #0
 8005aaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005aae:	f1b9 0901 	subs.w	r9, r9, #1
 8005ab2:	d505      	bpl.n	8005ac0 <_fwalk_reent+0x24>
 8005ab4:	6824      	ldr	r4, [r4, #0]
 8005ab6:	2c00      	cmp	r4, #0
 8005ab8:	d1f7      	bne.n	8005aaa <_fwalk_reent+0xe>
 8005aba:	4638      	mov	r0, r7
 8005abc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ac0:	89ab      	ldrh	r3, [r5, #12]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d907      	bls.n	8005ad6 <_fwalk_reent+0x3a>
 8005ac6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005aca:	3301      	adds	r3, #1
 8005acc:	d003      	beq.n	8005ad6 <_fwalk_reent+0x3a>
 8005ace:	4629      	mov	r1, r5
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	47c0      	blx	r8
 8005ad4:	4307      	orrs	r7, r0
 8005ad6:	3568      	adds	r5, #104	; 0x68
 8005ad8:	e7e9      	b.n	8005aae <_fwalk_reent+0x12>

08005ada <__retarget_lock_init_recursive>:
 8005ada:	4770      	bx	lr

08005adc <__retarget_lock_acquire_recursive>:
 8005adc:	4770      	bx	lr

08005ade <__retarget_lock_release_recursive>:
 8005ade:	4770      	bx	lr

08005ae0 <_malloc_r>:
 8005ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae2:	1ccd      	adds	r5, r1, #3
 8005ae4:	f025 0503 	bic.w	r5, r5, #3
 8005ae8:	3508      	adds	r5, #8
 8005aea:	2d0c      	cmp	r5, #12
 8005aec:	bf38      	it	cc
 8005aee:	250c      	movcc	r5, #12
 8005af0:	2d00      	cmp	r5, #0
 8005af2:	4606      	mov	r6, r0
 8005af4:	db01      	blt.n	8005afa <_malloc_r+0x1a>
 8005af6:	42a9      	cmp	r1, r5
 8005af8:	d903      	bls.n	8005b02 <_malloc_r+0x22>
 8005afa:	230c      	movs	r3, #12
 8005afc:	6033      	str	r3, [r6, #0]
 8005afe:	2000      	movs	r0, #0
 8005b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b02:	f000 fda3 	bl	800664c <__malloc_lock>
 8005b06:	4921      	ldr	r1, [pc, #132]	; (8005b8c <_malloc_r+0xac>)
 8005b08:	680a      	ldr	r2, [r1, #0]
 8005b0a:	4614      	mov	r4, r2
 8005b0c:	b99c      	cbnz	r4, 8005b36 <_malloc_r+0x56>
 8005b0e:	4f20      	ldr	r7, [pc, #128]	; (8005b90 <_malloc_r+0xb0>)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	b923      	cbnz	r3, 8005b1e <_malloc_r+0x3e>
 8005b14:	4621      	mov	r1, r4
 8005b16:	4630      	mov	r0, r6
 8005b18:	f000 fb2a 	bl	8006170 <_sbrk_r>
 8005b1c:	6038      	str	r0, [r7, #0]
 8005b1e:	4629      	mov	r1, r5
 8005b20:	4630      	mov	r0, r6
 8005b22:	f000 fb25 	bl	8006170 <_sbrk_r>
 8005b26:	1c43      	adds	r3, r0, #1
 8005b28:	d123      	bne.n	8005b72 <_malloc_r+0x92>
 8005b2a:	230c      	movs	r3, #12
 8005b2c:	6033      	str	r3, [r6, #0]
 8005b2e:	4630      	mov	r0, r6
 8005b30:	f000 fd92 	bl	8006658 <__malloc_unlock>
 8005b34:	e7e3      	b.n	8005afe <_malloc_r+0x1e>
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	1b5b      	subs	r3, r3, r5
 8005b3a:	d417      	bmi.n	8005b6c <_malloc_r+0x8c>
 8005b3c:	2b0b      	cmp	r3, #11
 8005b3e:	d903      	bls.n	8005b48 <_malloc_r+0x68>
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	441c      	add	r4, r3
 8005b44:	6025      	str	r5, [r4, #0]
 8005b46:	e004      	b.n	8005b52 <_malloc_r+0x72>
 8005b48:	6863      	ldr	r3, [r4, #4]
 8005b4a:	42a2      	cmp	r2, r4
 8005b4c:	bf0c      	ite	eq
 8005b4e:	600b      	streq	r3, [r1, #0]
 8005b50:	6053      	strne	r3, [r2, #4]
 8005b52:	4630      	mov	r0, r6
 8005b54:	f000 fd80 	bl	8006658 <__malloc_unlock>
 8005b58:	f104 000b 	add.w	r0, r4, #11
 8005b5c:	1d23      	adds	r3, r4, #4
 8005b5e:	f020 0007 	bic.w	r0, r0, #7
 8005b62:	1ac2      	subs	r2, r0, r3
 8005b64:	d0cc      	beq.n	8005b00 <_malloc_r+0x20>
 8005b66:	1a1b      	subs	r3, r3, r0
 8005b68:	50a3      	str	r3, [r4, r2]
 8005b6a:	e7c9      	b.n	8005b00 <_malloc_r+0x20>
 8005b6c:	4622      	mov	r2, r4
 8005b6e:	6864      	ldr	r4, [r4, #4]
 8005b70:	e7cc      	b.n	8005b0c <_malloc_r+0x2c>
 8005b72:	1cc4      	adds	r4, r0, #3
 8005b74:	f024 0403 	bic.w	r4, r4, #3
 8005b78:	42a0      	cmp	r0, r4
 8005b7a:	d0e3      	beq.n	8005b44 <_malloc_r+0x64>
 8005b7c:	1a21      	subs	r1, r4, r0
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f000 faf6 	bl	8006170 <_sbrk_r>
 8005b84:	3001      	adds	r0, #1
 8005b86:	d1dd      	bne.n	8005b44 <_malloc_r+0x64>
 8005b88:	e7cf      	b.n	8005b2a <_malloc_r+0x4a>
 8005b8a:	bf00      	nop
 8005b8c:	2000009c 	.word	0x2000009c
 8005b90:	200000a0 	.word	0x200000a0

08005b94 <__sfputc_r>:
 8005b94:	6893      	ldr	r3, [r2, #8]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	b410      	push	{r4}
 8005b9c:	6093      	str	r3, [r2, #8]
 8005b9e:	da08      	bge.n	8005bb2 <__sfputc_r+0x1e>
 8005ba0:	6994      	ldr	r4, [r2, #24]
 8005ba2:	42a3      	cmp	r3, r4
 8005ba4:	db01      	blt.n	8005baa <__sfputc_r+0x16>
 8005ba6:	290a      	cmp	r1, #10
 8005ba8:	d103      	bne.n	8005bb2 <__sfputc_r+0x1e>
 8005baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bae:	f000 bb33 	b.w	8006218 <__swbuf_r>
 8005bb2:	6813      	ldr	r3, [r2, #0]
 8005bb4:	1c58      	adds	r0, r3, #1
 8005bb6:	6010      	str	r0, [r2, #0]
 8005bb8:	7019      	strb	r1, [r3, #0]
 8005bba:	4608      	mov	r0, r1
 8005bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <__sfputs_r>:
 8005bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc4:	4606      	mov	r6, r0
 8005bc6:	460f      	mov	r7, r1
 8005bc8:	4614      	mov	r4, r2
 8005bca:	18d5      	adds	r5, r2, r3
 8005bcc:	42ac      	cmp	r4, r5
 8005bce:	d101      	bne.n	8005bd4 <__sfputs_r+0x12>
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	e007      	b.n	8005be4 <__sfputs_r+0x22>
 8005bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bd8:	463a      	mov	r2, r7
 8005bda:	4630      	mov	r0, r6
 8005bdc:	f7ff ffda 	bl	8005b94 <__sfputc_r>
 8005be0:	1c43      	adds	r3, r0, #1
 8005be2:	d1f3      	bne.n	8005bcc <__sfputs_r+0xa>
 8005be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005be8 <_vfiprintf_r>:
 8005be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bec:	460d      	mov	r5, r1
 8005bee:	b09d      	sub	sp, #116	; 0x74
 8005bf0:	4614      	mov	r4, r2
 8005bf2:	4698      	mov	r8, r3
 8005bf4:	4606      	mov	r6, r0
 8005bf6:	b118      	cbz	r0, 8005c00 <_vfiprintf_r+0x18>
 8005bf8:	6983      	ldr	r3, [r0, #24]
 8005bfa:	b90b      	cbnz	r3, 8005c00 <_vfiprintf_r+0x18>
 8005bfc:	f7ff fed0 	bl	80059a0 <__sinit>
 8005c00:	4b89      	ldr	r3, [pc, #548]	; (8005e28 <_vfiprintf_r+0x240>)
 8005c02:	429d      	cmp	r5, r3
 8005c04:	d11b      	bne.n	8005c3e <_vfiprintf_r+0x56>
 8005c06:	6875      	ldr	r5, [r6, #4]
 8005c08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c0a:	07d9      	lsls	r1, r3, #31
 8005c0c:	d405      	bmi.n	8005c1a <_vfiprintf_r+0x32>
 8005c0e:	89ab      	ldrh	r3, [r5, #12]
 8005c10:	059a      	lsls	r2, r3, #22
 8005c12:	d402      	bmi.n	8005c1a <_vfiprintf_r+0x32>
 8005c14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c16:	f7ff ff61 	bl	8005adc <__retarget_lock_acquire_recursive>
 8005c1a:	89ab      	ldrh	r3, [r5, #12]
 8005c1c:	071b      	lsls	r3, r3, #28
 8005c1e:	d501      	bpl.n	8005c24 <_vfiprintf_r+0x3c>
 8005c20:	692b      	ldr	r3, [r5, #16]
 8005c22:	b9eb      	cbnz	r3, 8005c60 <_vfiprintf_r+0x78>
 8005c24:	4629      	mov	r1, r5
 8005c26:	4630      	mov	r0, r6
 8005c28:	f000 fb5a 	bl	80062e0 <__swsetup_r>
 8005c2c:	b1c0      	cbz	r0, 8005c60 <_vfiprintf_r+0x78>
 8005c2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c30:	07dc      	lsls	r4, r3, #31
 8005c32:	d50e      	bpl.n	8005c52 <_vfiprintf_r+0x6a>
 8005c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c38:	b01d      	add	sp, #116	; 0x74
 8005c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c3e:	4b7b      	ldr	r3, [pc, #492]	; (8005e2c <_vfiprintf_r+0x244>)
 8005c40:	429d      	cmp	r5, r3
 8005c42:	d101      	bne.n	8005c48 <_vfiprintf_r+0x60>
 8005c44:	68b5      	ldr	r5, [r6, #8]
 8005c46:	e7df      	b.n	8005c08 <_vfiprintf_r+0x20>
 8005c48:	4b79      	ldr	r3, [pc, #484]	; (8005e30 <_vfiprintf_r+0x248>)
 8005c4a:	429d      	cmp	r5, r3
 8005c4c:	bf08      	it	eq
 8005c4e:	68f5      	ldreq	r5, [r6, #12]
 8005c50:	e7da      	b.n	8005c08 <_vfiprintf_r+0x20>
 8005c52:	89ab      	ldrh	r3, [r5, #12]
 8005c54:	0598      	lsls	r0, r3, #22
 8005c56:	d4ed      	bmi.n	8005c34 <_vfiprintf_r+0x4c>
 8005c58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c5a:	f7ff ff40 	bl	8005ade <__retarget_lock_release_recursive>
 8005c5e:	e7e9      	b.n	8005c34 <_vfiprintf_r+0x4c>
 8005c60:	2300      	movs	r3, #0
 8005c62:	9309      	str	r3, [sp, #36]	; 0x24
 8005c64:	2320      	movs	r3, #32
 8005c66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c6e:	2330      	movs	r3, #48	; 0x30
 8005c70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005e34 <_vfiprintf_r+0x24c>
 8005c74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c78:	f04f 0901 	mov.w	r9, #1
 8005c7c:	4623      	mov	r3, r4
 8005c7e:	469a      	mov	sl, r3
 8005c80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c84:	b10a      	cbz	r2, 8005c8a <_vfiprintf_r+0xa2>
 8005c86:	2a25      	cmp	r2, #37	; 0x25
 8005c88:	d1f9      	bne.n	8005c7e <_vfiprintf_r+0x96>
 8005c8a:	ebba 0b04 	subs.w	fp, sl, r4
 8005c8e:	d00b      	beq.n	8005ca8 <_vfiprintf_r+0xc0>
 8005c90:	465b      	mov	r3, fp
 8005c92:	4622      	mov	r2, r4
 8005c94:	4629      	mov	r1, r5
 8005c96:	4630      	mov	r0, r6
 8005c98:	f7ff ff93 	bl	8005bc2 <__sfputs_r>
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	f000 80aa 	beq.w	8005df6 <_vfiprintf_r+0x20e>
 8005ca2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ca4:	445a      	add	r2, fp
 8005ca6:	9209      	str	r2, [sp, #36]	; 0x24
 8005ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 80a2 	beq.w	8005df6 <_vfiprintf_r+0x20e>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cbc:	f10a 0a01 	add.w	sl, sl, #1
 8005cc0:	9304      	str	r3, [sp, #16]
 8005cc2:	9307      	str	r3, [sp, #28]
 8005cc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cc8:	931a      	str	r3, [sp, #104]	; 0x68
 8005cca:	4654      	mov	r4, sl
 8005ccc:	2205      	movs	r2, #5
 8005cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cd2:	4858      	ldr	r0, [pc, #352]	; (8005e34 <_vfiprintf_r+0x24c>)
 8005cd4:	f7fa fa7c 	bl	80001d0 <memchr>
 8005cd8:	9a04      	ldr	r2, [sp, #16]
 8005cda:	b9d8      	cbnz	r0, 8005d14 <_vfiprintf_r+0x12c>
 8005cdc:	06d1      	lsls	r1, r2, #27
 8005cde:	bf44      	itt	mi
 8005ce0:	2320      	movmi	r3, #32
 8005ce2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ce6:	0713      	lsls	r3, r2, #28
 8005ce8:	bf44      	itt	mi
 8005cea:	232b      	movmi	r3, #43	; 0x2b
 8005cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8005cf4:	2b2a      	cmp	r3, #42	; 0x2a
 8005cf6:	d015      	beq.n	8005d24 <_vfiprintf_r+0x13c>
 8005cf8:	9a07      	ldr	r2, [sp, #28]
 8005cfa:	4654      	mov	r4, sl
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	f04f 0c0a 	mov.w	ip, #10
 8005d02:	4621      	mov	r1, r4
 8005d04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d08:	3b30      	subs	r3, #48	; 0x30
 8005d0a:	2b09      	cmp	r3, #9
 8005d0c:	d94e      	bls.n	8005dac <_vfiprintf_r+0x1c4>
 8005d0e:	b1b0      	cbz	r0, 8005d3e <_vfiprintf_r+0x156>
 8005d10:	9207      	str	r2, [sp, #28]
 8005d12:	e014      	b.n	8005d3e <_vfiprintf_r+0x156>
 8005d14:	eba0 0308 	sub.w	r3, r0, r8
 8005d18:	fa09 f303 	lsl.w	r3, r9, r3
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	9304      	str	r3, [sp, #16]
 8005d20:	46a2      	mov	sl, r4
 8005d22:	e7d2      	b.n	8005cca <_vfiprintf_r+0xe2>
 8005d24:	9b03      	ldr	r3, [sp, #12]
 8005d26:	1d19      	adds	r1, r3, #4
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	9103      	str	r1, [sp, #12]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	bfbb      	ittet	lt
 8005d30:	425b      	neglt	r3, r3
 8005d32:	f042 0202 	orrlt.w	r2, r2, #2
 8005d36:	9307      	strge	r3, [sp, #28]
 8005d38:	9307      	strlt	r3, [sp, #28]
 8005d3a:	bfb8      	it	lt
 8005d3c:	9204      	strlt	r2, [sp, #16]
 8005d3e:	7823      	ldrb	r3, [r4, #0]
 8005d40:	2b2e      	cmp	r3, #46	; 0x2e
 8005d42:	d10c      	bne.n	8005d5e <_vfiprintf_r+0x176>
 8005d44:	7863      	ldrb	r3, [r4, #1]
 8005d46:	2b2a      	cmp	r3, #42	; 0x2a
 8005d48:	d135      	bne.n	8005db6 <_vfiprintf_r+0x1ce>
 8005d4a:	9b03      	ldr	r3, [sp, #12]
 8005d4c:	1d1a      	adds	r2, r3, #4
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	9203      	str	r2, [sp, #12]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	bfb8      	it	lt
 8005d56:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005d5a:	3402      	adds	r4, #2
 8005d5c:	9305      	str	r3, [sp, #20]
 8005d5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005e44 <_vfiprintf_r+0x25c>
 8005d62:	7821      	ldrb	r1, [r4, #0]
 8005d64:	2203      	movs	r2, #3
 8005d66:	4650      	mov	r0, sl
 8005d68:	f7fa fa32 	bl	80001d0 <memchr>
 8005d6c:	b140      	cbz	r0, 8005d80 <_vfiprintf_r+0x198>
 8005d6e:	2340      	movs	r3, #64	; 0x40
 8005d70:	eba0 000a 	sub.w	r0, r0, sl
 8005d74:	fa03 f000 	lsl.w	r0, r3, r0
 8005d78:	9b04      	ldr	r3, [sp, #16]
 8005d7a:	4303      	orrs	r3, r0
 8005d7c:	3401      	adds	r4, #1
 8005d7e:	9304      	str	r3, [sp, #16]
 8005d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d84:	482c      	ldr	r0, [pc, #176]	; (8005e38 <_vfiprintf_r+0x250>)
 8005d86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d8a:	2206      	movs	r2, #6
 8005d8c:	f7fa fa20 	bl	80001d0 <memchr>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	d03f      	beq.n	8005e14 <_vfiprintf_r+0x22c>
 8005d94:	4b29      	ldr	r3, [pc, #164]	; (8005e3c <_vfiprintf_r+0x254>)
 8005d96:	bb1b      	cbnz	r3, 8005de0 <_vfiprintf_r+0x1f8>
 8005d98:	9b03      	ldr	r3, [sp, #12]
 8005d9a:	3307      	adds	r3, #7
 8005d9c:	f023 0307 	bic.w	r3, r3, #7
 8005da0:	3308      	adds	r3, #8
 8005da2:	9303      	str	r3, [sp, #12]
 8005da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005da6:	443b      	add	r3, r7
 8005da8:	9309      	str	r3, [sp, #36]	; 0x24
 8005daa:	e767      	b.n	8005c7c <_vfiprintf_r+0x94>
 8005dac:	fb0c 3202 	mla	r2, ip, r2, r3
 8005db0:	460c      	mov	r4, r1
 8005db2:	2001      	movs	r0, #1
 8005db4:	e7a5      	b.n	8005d02 <_vfiprintf_r+0x11a>
 8005db6:	2300      	movs	r3, #0
 8005db8:	3401      	adds	r4, #1
 8005dba:	9305      	str	r3, [sp, #20]
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	f04f 0c0a 	mov.w	ip, #10
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dc8:	3a30      	subs	r2, #48	; 0x30
 8005dca:	2a09      	cmp	r2, #9
 8005dcc:	d903      	bls.n	8005dd6 <_vfiprintf_r+0x1ee>
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0c5      	beq.n	8005d5e <_vfiprintf_r+0x176>
 8005dd2:	9105      	str	r1, [sp, #20]
 8005dd4:	e7c3      	b.n	8005d5e <_vfiprintf_r+0x176>
 8005dd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dda:	4604      	mov	r4, r0
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e7f0      	b.n	8005dc2 <_vfiprintf_r+0x1da>
 8005de0:	ab03      	add	r3, sp, #12
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	462a      	mov	r2, r5
 8005de6:	4b16      	ldr	r3, [pc, #88]	; (8005e40 <_vfiprintf_r+0x258>)
 8005de8:	a904      	add	r1, sp, #16
 8005dea:	4630      	mov	r0, r6
 8005dec:	f3af 8000 	nop.w
 8005df0:	4607      	mov	r7, r0
 8005df2:	1c78      	adds	r0, r7, #1
 8005df4:	d1d6      	bne.n	8005da4 <_vfiprintf_r+0x1bc>
 8005df6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005df8:	07d9      	lsls	r1, r3, #31
 8005dfa:	d405      	bmi.n	8005e08 <_vfiprintf_r+0x220>
 8005dfc:	89ab      	ldrh	r3, [r5, #12]
 8005dfe:	059a      	lsls	r2, r3, #22
 8005e00:	d402      	bmi.n	8005e08 <_vfiprintf_r+0x220>
 8005e02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e04:	f7ff fe6b 	bl	8005ade <__retarget_lock_release_recursive>
 8005e08:	89ab      	ldrh	r3, [r5, #12]
 8005e0a:	065b      	lsls	r3, r3, #25
 8005e0c:	f53f af12 	bmi.w	8005c34 <_vfiprintf_r+0x4c>
 8005e10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e12:	e711      	b.n	8005c38 <_vfiprintf_r+0x50>
 8005e14:	ab03      	add	r3, sp, #12
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	462a      	mov	r2, r5
 8005e1a:	4b09      	ldr	r3, [pc, #36]	; (8005e40 <_vfiprintf_r+0x258>)
 8005e1c:	a904      	add	r1, sp, #16
 8005e1e:	4630      	mov	r0, r6
 8005e20:	f000 f880 	bl	8005f24 <_printf_i>
 8005e24:	e7e4      	b.n	8005df0 <_vfiprintf_r+0x208>
 8005e26:	bf00      	nop
 8005e28:	0800680c 	.word	0x0800680c
 8005e2c:	0800682c 	.word	0x0800682c
 8005e30:	080067ec 	.word	0x080067ec
 8005e34:	0800684c 	.word	0x0800684c
 8005e38:	08006856 	.word	0x08006856
 8005e3c:	00000000 	.word	0x00000000
 8005e40:	08005bc3 	.word	0x08005bc3
 8005e44:	08006852 	.word	0x08006852

08005e48 <_printf_common>:
 8005e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e4c:	4616      	mov	r6, r2
 8005e4e:	4699      	mov	r9, r3
 8005e50:	688a      	ldr	r2, [r1, #8]
 8005e52:	690b      	ldr	r3, [r1, #16]
 8005e54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	bfb8      	it	lt
 8005e5c:	4613      	movlt	r3, r2
 8005e5e:	6033      	str	r3, [r6, #0]
 8005e60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e64:	4607      	mov	r7, r0
 8005e66:	460c      	mov	r4, r1
 8005e68:	b10a      	cbz	r2, 8005e6e <_printf_common+0x26>
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	6033      	str	r3, [r6, #0]
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	0699      	lsls	r1, r3, #26
 8005e72:	bf42      	ittt	mi
 8005e74:	6833      	ldrmi	r3, [r6, #0]
 8005e76:	3302      	addmi	r3, #2
 8005e78:	6033      	strmi	r3, [r6, #0]
 8005e7a:	6825      	ldr	r5, [r4, #0]
 8005e7c:	f015 0506 	ands.w	r5, r5, #6
 8005e80:	d106      	bne.n	8005e90 <_printf_common+0x48>
 8005e82:	f104 0a19 	add.w	sl, r4, #25
 8005e86:	68e3      	ldr	r3, [r4, #12]
 8005e88:	6832      	ldr	r2, [r6, #0]
 8005e8a:	1a9b      	subs	r3, r3, r2
 8005e8c:	42ab      	cmp	r3, r5
 8005e8e:	dc26      	bgt.n	8005ede <_printf_common+0x96>
 8005e90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e94:	1e13      	subs	r3, r2, #0
 8005e96:	6822      	ldr	r2, [r4, #0]
 8005e98:	bf18      	it	ne
 8005e9a:	2301      	movne	r3, #1
 8005e9c:	0692      	lsls	r2, r2, #26
 8005e9e:	d42b      	bmi.n	8005ef8 <_printf_common+0xb0>
 8005ea0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	4638      	mov	r0, r7
 8005ea8:	47c0      	blx	r8
 8005eaa:	3001      	adds	r0, #1
 8005eac:	d01e      	beq.n	8005eec <_printf_common+0xa4>
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	68e5      	ldr	r5, [r4, #12]
 8005eb2:	6832      	ldr	r2, [r6, #0]
 8005eb4:	f003 0306 	and.w	r3, r3, #6
 8005eb8:	2b04      	cmp	r3, #4
 8005eba:	bf08      	it	eq
 8005ebc:	1aad      	subeq	r5, r5, r2
 8005ebe:	68a3      	ldr	r3, [r4, #8]
 8005ec0:	6922      	ldr	r2, [r4, #16]
 8005ec2:	bf0c      	ite	eq
 8005ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ec8:	2500      	movne	r5, #0
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	bfc4      	itt	gt
 8005ece:	1a9b      	subgt	r3, r3, r2
 8005ed0:	18ed      	addgt	r5, r5, r3
 8005ed2:	2600      	movs	r6, #0
 8005ed4:	341a      	adds	r4, #26
 8005ed6:	42b5      	cmp	r5, r6
 8005ed8:	d11a      	bne.n	8005f10 <_printf_common+0xc8>
 8005eda:	2000      	movs	r0, #0
 8005edc:	e008      	b.n	8005ef0 <_printf_common+0xa8>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	4652      	mov	r2, sl
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	4638      	mov	r0, r7
 8005ee6:	47c0      	blx	r8
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d103      	bne.n	8005ef4 <_printf_common+0xac>
 8005eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ef4:	3501      	adds	r5, #1
 8005ef6:	e7c6      	b.n	8005e86 <_printf_common+0x3e>
 8005ef8:	18e1      	adds	r1, r4, r3
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	2030      	movs	r0, #48	; 0x30
 8005efe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f02:	4422      	add	r2, r4
 8005f04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f0c:	3302      	adds	r3, #2
 8005f0e:	e7c7      	b.n	8005ea0 <_printf_common+0x58>
 8005f10:	2301      	movs	r3, #1
 8005f12:	4622      	mov	r2, r4
 8005f14:	4649      	mov	r1, r9
 8005f16:	4638      	mov	r0, r7
 8005f18:	47c0      	blx	r8
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	d0e6      	beq.n	8005eec <_printf_common+0xa4>
 8005f1e:	3601      	adds	r6, #1
 8005f20:	e7d9      	b.n	8005ed6 <_printf_common+0x8e>
	...

08005f24 <_printf_i>:
 8005f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f28:	460c      	mov	r4, r1
 8005f2a:	4691      	mov	r9, r2
 8005f2c:	7e27      	ldrb	r7, [r4, #24]
 8005f2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f30:	2f78      	cmp	r7, #120	; 0x78
 8005f32:	4680      	mov	r8, r0
 8005f34:	469a      	mov	sl, r3
 8005f36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f3a:	d807      	bhi.n	8005f4c <_printf_i+0x28>
 8005f3c:	2f62      	cmp	r7, #98	; 0x62
 8005f3e:	d80a      	bhi.n	8005f56 <_printf_i+0x32>
 8005f40:	2f00      	cmp	r7, #0
 8005f42:	f000 80d8 	beq.w	80060f6 <_printf_i+0x1d2>
 8005f46:	2f58      	cmp	r7, #88	; 0x58
 8005f48:	f000 80a3 	beq.w	8006092 <_printf_i+0x16e>
 8005f4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f54:	e03a      	b.n	8005fcc <_printf_i+0xa8>
 8005f56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f5a:	2b15      	cmp	r3, #21
 8005f5c:	d8f6      	bhi.n	8005f4c <_printf_i+0x28>
 8005f5e:	a001      	add	r0, pc, #4	; (adr r0, 8005f64 <_printf_i+0x40>)
 8005f60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f64:	08005fbd 	.word	0x08005fbd
 8005f68:	08005fd1 	.word	0x08005fd1
 8005f6c:	08005f4d 	.word	0x08005f4d
 8005f70:	08005f4d 	.word	0x08005f4d
 8005f74:	08005f4d 	.word	0x08005f4d
 8005f78:	08005f4d 	.word	0x08005f4d
 8005f7c:	08005fd1 	.word	0x08005fd1
 8005f80:	08005f4d 	.word	0x08005f4d
 8005f84:	08005f4d 	.word	0x08005f4d
 8005f88:	08005f4d 	.word	0x08005f4d
 8005f8c:	08005f4d 	.word	0x08005f4d
 8005f90:	080060dd 	.word	0x080060dd
 8005f94:	08006001 	.word	0x08006001
 8005f98:	080060bf 	.word	0x080060bf
 8005f9c:	08005f4d 	.word	0x08005f4d
 8005fa0:	08005f4d 	.word	0x08005f4d
 8005fa4:	080060ff 	.word	0x080060ff
 8005fa8:	08005f4d 	.word	0x08005f4d
 8005fac:	08006001 	.word	0x08006001
 8005fb0:	08005f4d 	.word	0x08005f4d
 8005fb4:	08005f4d 	.word	0x08005f4d
 8005fb8:	080060c7 	.word	0x080060c7
 8005fbc:	680b      	ldr	r3, [r1, #0]
 8005fbe:	1d1a      	adds	r2, r3, #4
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	600a      	str	r2, [r1, #0]
 8005fc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e0a3      	b.n	8006118 <_printf_i+0x1f4>
 8005fd0:	6825      	ldr	r5, [r4, #0]
 8005fd2:	6808      	ldr	r0, [r1, #0]
 8005fd4:	062e      	lsls	r6, r5, #24
 8005fd6:	f100 0304 	add.w	r3, r0, #4
 8005fda:	d50a      	bpl.n	8005ff2 <_printf_i+0xce>
 8005fdc:	6805      	ldr	r5, [r0, #0]
 8005fde:	600b      	str	r3, [r1, #0]
 8005fe0:	2d00      	cmp	r5, #0
 8005fe2:	da03      	bge.n	8005fec <_printf_i+0xc8>
 8005fe4:	232d      	movs	r3, #45	; 0x2d
 8005fe6:	426d      	negs	r5, r5
 8005fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fec:	485e      	ldr	r0, [pc, #376]	; (8006168 <_printf_i+0x244>)
 8005fee:	230a      	movs	r3, #10
 8005ff0:	e019      	b.n	8006026 <_printf_i+0x102>
 8005ff2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ff6:	6805      	ldr	r5, [r0, #0]
 8005ff8:	600b      	str	r3, [r1, #0]
 8005ffa:	bf18      	it	ne
 8005ffc:	b22d      	sxthne	r5, r5
 8005ffe:	e7ef      	b.n	8005fe0 <_printf_i+0xbc>
 8006000:	680b      	ldr	r3, [r1, #0]
 8006002:	6825      	ldr	r5, [r4, #0]
 8006004:	1d18      	adds	r0, r3, #4
 8006006:	6008      	str	r0, [r1, #0]
 8006008:	0628      	lsls	r0, r5, #24
 800600a:	d501      	bpl.n	8006010 <_printf_i+0xec>
 800600c:	681d      	ldr	r5, [r3, #0]
 800600e:	e002      	b.n	8006016 <_printf_i+0xf2>
 8006010:	0669      	lsls	r1, r5, #25
 8006012:	d5fb      	bpl.n	800600c <_printf_i+0xe8>
 8006014:	881d      	ldrh	r5, [r3, #0]
 8006016:	4854      	ldr	r0, [pc, #336]	; (8006168 <_printf_i+0x244>)
 8006018:	2f6f      	cmp	r7, #111	; 0x6f
 800601a:	bf0c      	ite	eq
 800601c:	2308      	moveq	r3, #8
 800601e:	230a      	movne	r3, #10
 8006020:	2100      	movs	r1, #0
 8006022:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006026:	6866      	ldr	r6, [r4, #4]
 8006028:	60a6      	str	r6, [r4, #8]
 800602a:	2e00      	cmp	r6, #0
 800602c:	bfa2      	ittt	ge
 800602e:	6821      	ldrge	r1, [r4, #0]
 8006030:	f021 0104 	bicge.w	r1, r1, #4
 8006034:	6021      	strge	r1, [r4, #0]
 8006036:	b90d      	cbnz	r5, 800603c <_printf_i+0x118>
 8006038:	2e00      	cmp	r6, #0
 800603a:	d04d      	beq.n	80060d8 <_printf_i+0x1b4>
 800603c:	4616      	mov	r6, r2
 800603e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006042:	fb03 5711 	mls	r7, r3, r1, r5
 8006046:	5dc7      	ldrb	r7, [r0, r7]
 8006048:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800604c:	462f      	mov	r7, r5
 800604e:	42bb      	cmp	r3, r7
 8006050:	460d      	mov	r5, r1
 8006052:	d9f4      	bls.n	800603e <_printf_i+0x11a>
 8006054:	2b08      	cmp	r3, #8
 8006056:	d10b      	bne.n	8006070 <_printf_i+0x14c>
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	07df      	lsls	r7, r3, #31
 800605c:	d508      	bpl.n	8006070 <_printf_i+0x14c>
 800605e:	6923      	ldr	r3, [r4, #16]
 8006060:	6861      	ldr	r1, [r4, #4]
 8006062:	4299      	cmp	r1, r3
 8006064:	bfde      	ittt	le
 8006066:	2330      	movle	r3, #48	; 0x30
 8006068:	f806 3c01 	strble.w	r3, [r6, #-1]
 800606c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006070:	1b92      	subs	r2, r2, r6
 8006072:	6122      	str	r2, [r4, #16]
 8006074:	f8cd a000 	str.w	sl, [sp]
 8006078:	464b      	mov	r3, r9
 800607a:	aa03      	add	r2, sp, #12
 800607c:	4621      	mov	r1, r4
 800607e:	4640      	mov	r0, r8
 8006080:	f7ff fee2 	bl	8005e48 <_printf_common>
 8006084:	3001      	adds	r0, #1
 8006086:	d14c      	bne.n	8006122 <_printf_i+0x1fe>
 8006088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800608c:	b004      	add	sp, #16
 800608e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006092:	4835      	ldr	r0, [pc, #212]	; (8006168 <_printf_i+0x244>)
 8006094:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	680e      	ldr	r6, [r1, #0]
 800609c:	061f      	lsls	r7, r3, #24
 800609e:	f856 5b04 	ldr.w	r5, [r6], #4
 80060a2:	600e      	str	r6, [r1, #0]
 80060a4:	d514      	bpl.n	80060d0 <_printf_i+0x1ac>
 80060a6:	07d9      	lsls	r1, r3, #31
 80060a8:	bf44      	itt	mi
 80060aa:	f043 0320 	orrmi.w	r3, r3, #32
 80060ae:	6023      	strmi	r3, [r4, #0]
 80060b0:	b91d      	cbnz	r5, 80060ba <_printf_i+0x196>
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	f023 0320 	bic.w	r3, r3, #32
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	2310      	movs	r3, #16
 80060bc:	e7b0      	b.n	8006020 <_printf_i+0xfc>
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	f043 0320 	orr.w	r3, r3, #32
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	2378      	movs	r3, #120	; 0x78
 80060c8:	4828      	ldr	r0, [pc, #160]	; (800616c <_printf_i+0x248>)
 80060ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060ce:	e7e3      	b.n	8006098 <_printf_i+0x174>
 80060d0:	065e      	lsls	r6, r3, #25
 80060d2:	bf48      	it	mi
 80060d4:	b2ad      	uxthmi	r5, r5
 80060d6:	e7e6      	b.n	80060a6 <_printf_i+0x182>
 80060d8:	4616      	mov	r6, r2
 80060da:	e7bb      	b.n	8006054 <_printf_i+0x130>
 80060dc:	680b      	ldr	r3, [r1, #0]
 80060de:	6826      	ldr	r6, [r4, #0]
 80060e0:	6960      	ldr	r0, [r4, #20]
 80060e2:	1d1d      	adds	r5, r3, #4
 80060e4:	600d      	str	r5, [r1, #0]
 80060e6:	0635      	lsls	r5, r6, #24
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	d501      	bpl.n	80060f0 <_printf_i+0x1cc>
 80060ec:	6018      	str	r0, [r3, #0]
 80060ee:	e002      	b.n	80060f6 <_printf_i+0x1d2>
 80060f0:	0671      	lsls	r1, r6, #25
 80060f2:	d5fb      	bpl.n	80060ec <_printf_i+0x1c8>
 80060f4:	8018      	strh	r0, [r3, #0]
 80060f6:	2300      	movs	r3, #0
 80060f8:	6123      	str	r3, [r4, #16]
 80060fa:	4616      	mov	r6, r2
 80060fc:	e7ba      	b.n	8006074 <_printf_i+0x150>
 80060fe:	680b      	ldr	r3, [r1, #0]
 8006100:	1d1a      	adds	r2, r3, #4
 8006102:	600a      	str	r2, [r1, #0]
 8006104:	681e      	ldr	r6, [r3, #0]
 8006106:	6862      	ldr	r2, [r4, #4]
 8006108:	2100      	movs	r1, #0
 800610a:	4630      	mov	r0, r6
 800610c:	f7fa f860 	bl	80001d0 <memchr>
 8006110:	b108      	cbz	r0, 8006116 <_printf_i+0x1f2>
 8006112:	1b80      	subs	r0, r0, r6
 8006114:	6060      	str	r0, [r4, #4]
 8006116:	6863      	ldr	r3, [r4, #4]
 8006118:	6123      	str	r3, [r4, #16]
 800611a:	2300      	movs	r3, #0
 800611c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006120:	e7a8      	b.n	8006074 <_printf_i+0x150>
 8006122:	6923      	ldr	r3, [r4, #16]
 8006124:	4632      	mov	r2, r6
 8006126:	4649      	mov	r1, r9
 8006128:	4640      	mov	r0, r8
 800612a:	47d0      	blx	sl
 800612c:	3001      	adds	r0, #1
 800612e:	d0ab      	beq.n	8006088 <_printf_i+0x164>
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	079b      	lsls	r3, r3, #30
 8006134:	d413      	bmi.n	800615e <_printf_i+0x23a>
 8006136:	68e0      	ldr	r0, [r4, #12]
 8006138:	9b03      	ldr	r3, [sp, #12]
 800613a:	4298      	cmp	r0, r3
 800613c:	bfb8      	it	lt
 800613e:	4618      	movlt	r0, r3
 8006140:	e7a4      	b.n	800608c <_printf_i+0x168>
 8006142:	2301      	movs	r3, #1
 8006144:	4632      	mov	r2, r6
 8006146:	4649      	mov	r1, r9
 8006148:	4640      	mov	r0, r8
 800614a:	47d0      	blx	sl
 800614c:	3001      	adds	r0, #1
 800614e:	d09b      	beq.n	8006088 <_printf_i+0x164>
 8006150:	3501      	adds	r5, #1
 8006152:	68e3      	ldr	r3, [r4, #12]
 8006154:	9903      	ldr	r1, [sp, #12]
 8006156:	1a5b      	subs	r3, r3, r1
 8006158:	42ab      	cmp	r3, r5
 800615a:	dcf2      	bgt.n	8006142 <_printf_i+0x21e>
 800615c:	e7eb      	b.n	8006136 <_printf_i+0x212>
 800615e:	2500      	movs	r5, #0
 8006160:	f104 0619 	add.w	r6, r4, #25
 8006164:	e7f5      	b.n	8006152 <_printf_i+0x22e>
 8006166:	bf00      	nop
 8006168:	0800685d 	.word	0x0800685d
 800616c:	0800686e 	.word	0x0800686e

08006170 <_sbrk_r>:
 8006170:	b538      	push	{r3, r4, r5, lr}
 8006172:	4d06      	ldr	r5, [pc, #24]	; (800618c <_sbrk_r+0x1c>)
 8006174:	2300      	movs	r3, #0
 8006176:	4604      	mov	r4, r0
 8006178:	4608      	mov	r0, r1
 800617a:	602b      	str	r3, [r5, #0]
 800617c:	f7fa fdd0 	bl	8000d20 <_sbrk>
 8006180:	1c43      	adds	r3, r0, #1
 8006182:	d102      	bne.n	800618a <_sbrk_r+0x1a>
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	b103      	cbz	r3, 800618a <_sbrk_r+0x1a>
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	bd38      	pop	{r3, r4, r5, pc}
 800618c:	200002cc 	.word	0x200002cc

08006190 <__sread>:
 8006190:	b510      	push	{r4, lr}
 8006192:	460c      	mov	r4, r1
 8006194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006198:	f000 fab4 	bl	8006704 <_read_r>
 800619c:	2800      	cmp	r0, #0
 800619e:	bfab      	itete	ge
 80061a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061a2:	89a3      	ldrhlt	r3, [r4, #12]
 80061a4:	181b      	addge	r3, r3, r0
 80061a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061aa:	bfac      	ite	ge
 80061ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80061ae:	81a3      	strhlt	r3, [r4, #12]
 80061b0:	bd10      	pop	{r4, pc}

080061b2 <__swrite>:
 80061b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b6:	461f      	mov	r7, r3
 80061b8:	898b      	ldrh	r3, [r1, #12]
 80061ba:	05db      	lsls	r3, r3, #23
 80061bc:	4605      	mov	r5, r0
 80061be:	460c      	mov	r4, r1
 80061c0:	4616      	mov	r6, r2
 80061c2:	d505      	bpl.n	80061d0 <__swrite+0x1e>
 80061c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c8:	2302      	movs	r3, #2
 80061ca:	2200      	movs	r2, #0
 80061cc:	f000 f9c8 	bl	8006560 <_lseek_r>
 80061d0:	89a3      	ldrh	r3, [r4, #12]
 80061d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061da:	81a3      	strh	r3, [r4, #12]
 80061dc:	4632      	mov	r2, r6
 80061de:	463b      	mov	r3, r7
 80061e0:	4628      	mov	r0, r5
 80061e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061e6:	f000 b869 	b.w	80062bc <_write_r>

080061ea <__sseek>:
 80061ea:	b510      	push	{r4, lr}
 80061ec:	460c      	mov	r4, r1
 80061ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f2:	f000 f9b5 	bl	8006560 <_lseek_r>
 80061f6:	1c43      	adds	r3, r0, #1
 80061f8:	89a3      	ldrh	r3, [r4, #12]
 80061fa:	bf15      	itete	ne
 80061fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80061fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006202:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006206:	81a3      	strheq	r3, [r4, #12]
 8006208:	bf18      	it	ne
 800620a:	81a3      	strhne	r3, [r4, #12]
 800620c:	bd10      	pop	{r4, pc}

0800620e <__sclose>:
 800620e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006212:	f000 b8d3 	b.w	80063bc <_close_r>
	...

08006218 <__swbuf_r>:
 8006218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621a:	460e      	mov	r6, r1
 800621c:	4614      	mov	r4, r2
 800621e:	4605      	mov	r5, r0
 8006220:	b118      	cbz	r0, 800622a <__swbuf_r+0x12>
 8006222:	6983      	ldr	r3, [r0, #24]
 8006224:	b90b      	cbnz	r3, 800622a <__swbuf_r+0x12>
 8006226:	f7ff fbbb 	bl	80059a0 <__sinit>
 800622a:	4b21      	ldr	r3, [pc, #132]	; (80062b0 <__swbuf_r+0x98>)
 800622c:	429c      	cmp	r4, r3
 800622e:	d12b      	bne.n	8006288 <__swbuf_r+0x70>
 8006230:	686c      	ldr	r4, [r5, #4]
 8006232:	69a3      	ldr	r3, [r4, #24]
 8006234:	60a3      	str	r3, [r4, #8]
 8006236:	89a3      	ldrh	r3, [r4, #12]
 8006238:	071a      	lsls	r2, r3, #28
 800623a:	d52f      	bpl.n	800629c <__swbuf_r+0x84>
 800623c:	6923      	ldr	r3, [r4, #16]
 800623e:	b36b      	cbz	r3, 800629c <__swbuf_r+0x84>
 8006240:	6923      	ldr	r3, [r4, #16]
 8006242:	6820      	ldr	r0, [r4, #0]
 8006244:	1ac0      	subs	r0, r0, r3
 8006246:	6963      	ldr	r3, [r4, #20]
 8006248:	b2f6      	uxtb	r6, r6
 800624a:	4283      	cmp	r3, r0
 800624c:	4637      	mov	r7, r6
 800624e:	dc04      	bgt.n	800625a <__swbuf_r+0x42>
 8006250:	4621      	mov	r1, r4
 8006252:	4628      	mov	r0, r5
 8006254:	f000 f948 	bl	80064e8 <_fflush_r>
 8006258:	bb30      	cbnz	r0, 80062a8 <__swbuf_r+0x90>
 800625a:	68a3      	ldr	r3, [r4, #8]
 800625c:	3b01      	subs	r3, #1
 800625e:	60a3      	str	r3, [r4, #8]
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	1c5a      	adds	r2, r3, #1
 8006264:	6022      	str	r2, [r4, #0]
 8006266:	701e      	strb	r6, [r3, #0]
 8006268:	6963      	ldr	r3, [r4, #20]
 800626a:	3001      	adds	r0, #1
 800626c:	4283      	cmp	r3, r0
 800626e:	d004      	beq.n	800627a <__swbuf_r+0x62>
 8006270:	89a3      	ldrh	r3, [r4, #12]
 8006272:	07db      	lsls	r3, r3, #31
 8006274:	d506      	bpl.n	8006284 <__swbuf_r+0x6c>
 8006276:	2e0a      	cmp	r6, #10
 8006278:	d104      	bne.n	8006284 <__swbuf_r+0x6c>
 800627a:	4621      	mov	r1, r4
 800627c:	4628      	mov	r0, r5
 800627e:	f000 f933 	bl	80064e8 <_fflush_r>
 8006282:	b988      	cbnz	r0, 80062a8 <__swbuf_r+0x90>
 8006284:	4638      	mov	r0, r7
 8006286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006288:	4b0a      	ldr	r3, [pc, #40]	; (80062b4 <__swbuf_r+0x9c>)
 800628a:	429c      	cmp	r4, r3
 800628c:	d101      	bne.n	8006292 <__swbuf_r+0x7a>
 800628e:	68ac      	ldr	r4, [r5, #8]
 8006290:	e7cf      	b.n	8006232 <__swbuf_r+0x1a>
 8006292:	4b09      	ldr	r3, [pc, #36]	; (80062b8 <__swbuf_r+0xa0>)
 8006294:	429c      	cmp	r4, r3
 8006296:	bf08      	it	eq
 8006298:	68ec      	ldreq	r4, [r5, #12]
 800629a:	e7ca      	b.n	8006232 <__swbuf_r+0x1a>
 800629c:	4621      	mov	r1, r4
 800629e:	4628      	mov	r0, r5
 80062a0:	f000 f81e 	bl	80062e0 <__swsetup_r>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	d0cb      	beq.n	8006240 <__swbuf_r+0x28>
 80062a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80062ac:	e7ea      	b.n	8006284 <__swbuf_r+0x6c>
 80062ae:	bf00      	nop
 80062b0:	0800680c 	.word	0x0800680c
 80062b4:	0800682c 	.word	0x0800682c
 80062b8:	080067ec 	.word	0x080067ec

080062bc <_write_r>:
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	4d07      	ldr	r5, [pc, #28]	; (80062dc <_write_r+0x20>)
 80062c0:	4604      	mov	r4, r0
 80062c2:	4608      	mov	r0, r1
 80062c4:	4611      	mov	r1, r2
 80062c6:	2200      	movs	r2, #0
 80062c8:	602a      	str	r2, [r5, #0]
 80062ca:	461a      	mov	r2, r3
 80062cc:	f7fa fb44 	bl	8000958 <_write>
 80062d0:	1c43      	adds	r3, r0, #1
 80062d2:	d102      	bne.n	80062da <_write_r+0x1e>
 80062d4:	682b      	ldr	r3, [r5, #0]
 80062d6:	b103      	cbz	r3, 80062da <_write_r+0x1e>
 80062d8:	6023      	str	r3, [r4, #0]
 80062da:	bd38      	pop	{r3, r4, r5, pc}
 80062dc:	200002cc 	.word	0x200002cc

080062e0 <__swsetup_r>:
 80062e0:	4b32      	ldr	r3, [pc, #200]	; (80063ac <__swsetup_r+0xcc>)
 80062e2:	b570      	push	{r4, r5, r6, lr}
 80062e4:	681d      	ldr	r5, [r3, #0]
 80062e6:	4606      	mov	r6, r0
 80062e8:	460c      	mov	r4, r1
 80062ea:	b125      	cbz	r5, 80062f6 <__swsetup_r+0x16>
 80062ec:	69ab      	ldr	r3, [r5, #24]
 80062ee:	b913      	cbnz	r3, 80062f6 <__swsetup_r+0x16>
 80062f0:	4628      	mov	r0, r5
 80062f2:	f7ff fb55 	bl	80059a0 <__sinit>
 80062f6:	4b2e      	ldr	r3, [pc, #184]	; (80063b0 <__swsetup_r+0xd0>)
 80062f8:	429c      	cmp	r4, r3
 80062fa:	d10f      	bne.n	800631c <__swsetup_r+0x3c>
 80062fc:	686c      	ldr	r4, [r5, #4]
 80062fe:	89a3      	ldrh	r3, [r4, #12]
 8006300:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006304:	0719      	lsls	r1, r3, #28
 8006306:	d42c      	bmi.n	8006362 <__swsetup_r+0x82>
 8006308:	06dd      	lsls	r5, r3, #27
 800630a:	d411      	bmi.n	8006330 <__swsetup_r+0x50>
 800630c:	2309      	movs	r3, #9
 800630e:	6033      	str	r3, [r6, #0]
 8006310:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006314:	81a3      	strh	r3, [r4, #12]
 8006316:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800631a:	e03e      	b.n	800639a <__swsetup_r+0xba>
 800631c:	4b25      	ldr	r3, [pc, #148]	; (80063b4 <__swsetup_r+0xd4>)
 800631e:	429c      	cmp	r4, r3
 8006320:	d101      	bne.n	8006326 <__swsetup_r+0x46>
 8006322:	68ac      	ldr	r4, [r5, #8]
 8006324:	e7eb      	b.n	80062fe <__swsetup_r+0x1e>
 8006326:	4b24      	ldr	r3, [pc, #144]	; (80063b8 <__swsetup_r+0xd8>)
 8006328:	429c      	cmp	r4, r3
 800632a:	bf08      	it	eq
 800632c:	68ec      	ldreq	r4, [r5, #12]
 800632e:	e7e6      	b.n	80062fe <__swsetup_r+0x1e>
 8006330:	0758      	lsls	r0, r3, #29
 8006332:	d512      	bpl.n	800635a <__swsetup_r+0x7a>
 8006334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006336:	b141      	cbz	r1, 800634a <__swsetup_r+0x6a>
 8006338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800633c:	4299      	cmp	r1, r3
 800633e:	d002      	beq.n	8006346 <__swsetup_r+0x66>
 8006340:	4630      	mov	r0, r6
 8006342:	f000 f98f 	bl	8006664 <_free_r>
 8006346:	2300      	movs	r3, #0
 8006348:	6363      	str	r3, [r4, #52]	; 0x34
 800634a:	89a3      	ldrh	r3, [r4, #12]
 800634c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006350:	81a3      	strh	r3, [r4, #12]
 8006352:	2300      	movs	r3, #0
 8006354:	6063      	str	r3, [r4, #4]
 8006356:	6923      	ldr	r3, [r4, #16]
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	89a3      	ldrh	r3, [r4, #12]
 800635c:	f043 0308 	orr.w	r3, r3, #8
 8006360:	81a3      	strh	r3, [r4, #12]
 8006362:	6923      	ldr	r3, [r4, #16]
 8006364:	b94b      	cbnz	r3, 800637a <__swsetup_r+0x9a>
 8006366:	89a3      	ldrh	r3, [r4, #12]
 8006368:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800636c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006370:	d003      	beq.n	800637a <__swsetup_r+0x9a>
 8006372:	4621      	mov	r1, r4
 8006374:	4630      	mov	r0, r6
 8006376:	f000 f929 	bl	80065cc <__smakebuf_r>
 800637a:	89a0      	ldrh	r0, [r4, #12]
 800637c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006380:	f010 0301 	ands.w	r3, r0, #1
 8006384:	d00a      	beq.n	800639c <__swsetup_r+0xbc>
 8006386:	2300      	movs	r3, #0
 8006388:	60a3      	str	r3, [r4, #8]
 800638a:	6963      	ldr	r3, [r4, #20]
 800638c:	425b      	negs	r3, r3
 800638e:	61a3      	str	r3, [r4, #24]
 8006390:	6923      	ldr	r3, [r4, #16]
 8006392:	b943      	cbnz	r3, 80063a6 <__swsetup_r+0xc6>
 8006394:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006398:	d1ba      	bne.n	8006310 <__swsetup_r+0x30>
 800639a:	bd70      	pop	{r4, r5, r6, pc}
 800639c:	0781      	lsls	r1, r0, #30
 800639e:	bf58      	it	pl
 80063a0:	6963      	ldrpl	r3, [r4, #20]
 80063a2:	60a3      	str	r3, [r4, #8]
 80063a4:	e7f4      	b.n	8006390 <__swsetup_r+0xb0>
 80063a6:	2000      	movs	r0, #0
 80063a8:	e7f7      	b.n	800639a <__swsetup_r+0xba>
 80063aa:	bf00      	nop
 80063ac:	2000000c 	.word	0x2000000c
 80063b0:	0800680c 	.word	0x0800680c
 80063b4:	0800682c 	.word	0x0800682c
 80063b8:	080067ec 	.word	0x080067ec

080063bc <_close_r>:
 80063bc:	b538      	push	{r3, r4, r5, lr}
 80063be:	4d06      	ldr	r5, [pc, #24]	; (80063d8 <_close_r+0x1c>)
 80063c0:	2300      	movs	r3, #0
 80063c2:	4604      	mov	r4, r0
 80063c4:	4608      	mov	r0, r1
 80063c6:	602b      	str	r3, [r5, #0]
 80063c8:	f7fa fc75 	bl	8000cb6 <_close>
 80063cc:	1c43      	adds	r3, r0, #1
 80063ce:	d102      	bne.n	80063d6 <_close_r+0x1a>
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	b103      	cbz	r3, 80063d6 <_close_r+0x1a>
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
 80063d8:	200002cc 	.word	0x200002cc

080063dc <__sflush_r>:
 80063dc:	898a      	ldrh	r2, [r1, #12]
 80063de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063e2:	4605      	mov	r5, r0
 80063e4:	0710      	lsls	r0, r2, #28
 80063e6:	460c      	mov	r4, r1
 80063e8:	d458      	bmi.n	800649c <__sflush_r+0xc0>
 80063ea:	684b      	ldr	r3, [r1, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	dc05      	bgt.n	80063fc <__sflush_r+0x20>
 80063f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	dc02      	bgt.n	80063fc <__sflush_r+0x20>
 80063f6:	2000      	movs	r0, #0
 80063f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063fe:	2e00      	cmp	r6, #0
 8006400:	d0f9      	beq.n	80063f6 <__sflush_r+0x1a>
 8006402:	2300      	movs	r3, #0
 8006404:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006408:	682f      	ldr	r7, [r5, #0]
 800640a:	602b      	str	r3, [r5, #0]
 800640c:	d032      	beq.n	8006474 <__sflush_r+0x98>
 800640e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006410:	89a3      	ldrh	r3, [r4, #12]
 8006412:	075a      	lsls	r2, r3, #29
 8006414:	d505      	bpl.n	8006422 <__sflush_r+0x46>
 8006416:	6863      	ldr	r3, [r4, #4]
 8006418:	1ac0      	subs	r0, r0, r3
 800641a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800641c:	b10b      	cbz	r3, 8006422 <__sflush_r+0x46>
 800641e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006420:	1ac0      	subs	r0, r0, r3
 8006422:	2300      	movs	r3, #0
 8006424:	4602      	mov	r2, r0
 8006426:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006428:	6a21      	ldr	r1, [r4, #32]
 800642a:	4628      	mov	r0, r5
 800642c:	47b0      	blx	r6
 800642e:	1c43      	adds	r3, r0, #1
 8006430:	89a3      	ldrh	r3, [r4, #12]
 8006432:	d106      	bne.n	8006442 <__sflush_r+0x66>
 8006434:	6829      	ldr	r1, [r5, #0]
 8006436:	291d      	cmp	r1, #29
 8006438:	d82c      	bhi.n	8006494 <__sflush_r+0xb8>
 800643a:	4a2a      	ldr	r2, [pc, #168]	; (80064e4 <__sflush_r+0x108>)
 800643c:	40ca      	lsrs	r2, r1
 800643e:	07d6      	lsls	r6, r2, #31
 8006440:	d528      	bpl.n	8006494 <__sflush_r+0xb8>
 8006442:	2200      	movs	r2, #0
 8006444:	6062      	str	r2, [r4, #4]
 8006446:	04d9      	lsls	r1, r3, #19
 8006448:	6922      	ldr	r2, [r4, #16]
 800644a:	6022      	str	r2, [r4, #0]
 800644c:	d504      	bpl.n	8006458 <__sflush_r+0x7c>
 800644e:	1c42      	adds	r2, r0, #1
 8006450:	d101      	bne.n	8006456 <__sflush_r+0x7a>
 8006452:	682b      	ldr	r3, [r5, #0]
 8006454:	b903      	cbnz	r3, 8006458 <__sflush_r+0x7c>
 8006456:	6560      	str	r0, [r4, #84]	; 0x54
 8006458:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800645a:	602f      	str	r7, [r5, #0]
 800645c:	2900      	cmp	r1, #0
 800645e:	d0ca      	beq.n	80063f6 <__sflush_r+0x1a>
 8006460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006464:	4299      	cmp	r1, r3
 8006466:	d002      	beq.n	800646e <__sflush_r+0x92>
 8006468:	4628      	mov	r0, r5
 800646a:	f000 f8fb 	bl	8006664 <_free_r>
 800646e:	2000      	movs	r0, #0
 8006470:	6360      	str	r0, [r4, #52]	; 0x34
 8006472:	e7c1      	b.n	80063f8 <__sflush_r+0x1c>
 8006474:	6a21      	ldr	r1, [r4, #32]
 8006476:	2301      	movs	r3, #1
 8006478:	4628      	mov	r0, r5
 800647a:	47b0      	blx	r6
 800647c:	1c41      	adds	r1, r0, #1
 800647e:	d1c7      	bne.n	8006410 <__sflush_r+0x34>
 8006480:	682b      	ldr	r3, [r5, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d0c4      	beq.n	8006410 <__sflush_r+0x34>
 8006486:	2b1d      	cmp	r3, #29
 8006488:	d001      	beq.n	800648e <__sflush_r+0xb2>
 800648a:	2b16      	cmp	r3, #22
 800648c:	d101      	bne.n	8006492 <__sflush_r+0xb6>
 800648e:	602f      	str	r7, [r5, #0]
 8006490:	e7b1      	b.n	80063f6 <__sflush_r+0x1a>
 8006492:	89a3      	ldrh	r3, [r4, #12]
 8006494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006498:	81a3      	strh	r3, [r4, #12]
 800649a:	e7ad      	b.n	80063f8 <__sflush_r+0x1c>
 800649c:	690f      	ldr	r7, [r1, #16]
 800649e:	2f00      	cmp	r7, #0
 80064a0:	d0a9      	beq.n	80063f6 <__sflush_r+0x1a>
 80064a2:	0793      	lsls	r3, r2, #30
 80064a4:	680e      	ldr	r6, [r1, #0]
 80064a6:	bf08      	it	eq
 80064a8:	694b      	ldreq	r3, [r1, #20]
 80064aa:	600f      	str	r7, [r1, #0]
 80064ac:	bf18      	it	ne
 80064ae:	2300      	movne	r3, #0
 80064b0:	eba6 0807 	sub.w	r8, r6, r7
 80064b4:	608b      	str	r3, [r1, #8]
 80064b6:	f1b8 0f00 	cmp.w	r8, #0
 80064ba:	dd9c      	ble.n	80063f6 <__sflush_r+0x1a>
 80064bc:	6a21      	ldr	r1, [r4, #32]
 80064be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064c0:	4643      	mov	r3, r8
 80064c2:	463a      	mov	r2, r7
 80064c4:	4628      	mov	r0, r5
 80064c6:	47b0      	blx	r6
 80064c8:	2800      	cmp	r0, #0
 80064ca:	dc06      	bgt.n	80064da <__sflush_r+0xfe>
 80064cc:	89a3      	ldrh	r3, [r4, #12]
 80064ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064d2:	81a3      	strh	r3, [r4, #12]
 80064d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064d8:	e78e      	b.n	80063f8 <__sflush_r+0x1c>
 80064da:	4407      	add	r7, r0
 80064dc:	eba8 0800 	sub.w	r8, r8, r0
 80064e0:	e7e9      	b.n	80064b6 <__sflush_r+0xda>
 80064e2:	bf00      	nop
 80064e4:	20400001 	.word	0x20400001

080064e8 <_fflush_r>:
 80064e8:	b538      	push	{r3, r4, r5, lr}
 80064ea:	690b      	ldr	r3, [r1, #16]
 80064ec:	4605      	mov	r5, r0
 80064ee:	460c      	mov	r4, r1
 80064f0:	b913      	cbnz	r3, 80064f8 <_fflush_r+0x10>
 80064f2:	2500      	movs	r5, #0
 80064f4:	4628      	mov	r0, r5
 80064f6:	bd38      	pop	{r3, r4, r5, pc}
 80064f8:	b118      	cbz	r0, 8006502 <_fflush_r+0x1a>
 80064fa:	6983      	ldr	r3, [r0, #24]
 80064fc:	b90b      	cbnz	r3, 8006502 <_fflush_r+0x1a>
 80064fe:	f7ff fa4f 	bl	80059a0 <__sinit>
 8006502:	4b14      	ldr	r3, [pc, #80]	; (8006554 <_fflush_r+0x6c>)
 8006504:	429c      	cmp	r4, r3
 8006506:	d11b      	bne.n	8006540 <_fflush_r+0x58>
 8006508:	686c      	ldr	r4, [r5, #4]
 800650a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0ef      	beq.n	80064f2 <_fflush_r+0xa>
 8006512:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006514:	07d0      	lsls	r0, r2, #31
 8006516:	d404      	bmi.n	8006522 <_fflush_r+0x3a>
 8006518:	0599      	lsls	r1, r3, #22
 800651a:	d402      	bmi.n	8006522 <_fflush_r+0x3a>
 800651c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800651e:	f7ff fadd 	bl	8005adc <__retarget_lock_acquire_recursive>
 8006522:	4628      	mov	r0, r5
 8006524:	4621      	mov	r1, r4
 8006526:	f7ff ff59 	bl	80063dc <__sflush_r>
 800652a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800652c:	07da      	lsls	r2, r3, #31
 800652e:	4605      	mov	r5, r0
 8006530:	d4e0      	bmi.n	80064f4 <_fflush_r+0xc>
 8006532:	89a3      	ldrh	r3, [r4, #12]
 8006534:	059b      	lsls	r3, r3, #22
 8006536:	d4dd      	bmi.n	80064f4 <_fflush_r+0xc>
 8006538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800653a:	f7ff fad0 	bl	8005ade <__retarget_lock_release_recursive>
 800653e:	e7d9      	b.n	80064f4 <_fflush_r+0xc>
 8006540:	4b05      	ldr	r3, [pc, #20]	; (8006558 <_fflush_r+0x70>)
 8006542:	429c      	cmp	r4, r3
 8006544:	d101      	bne.n	800654a <_fflush_r+0x62>
 8006546:	68ac      	ldr	r4, [r5, #8]
 8006548:	e7df      	b.n	800650a <_fflush_r+0x22>
 800654a:	4b04      	ldr	r3, [pc, #16]	; (800655c <_fflush_r+0x74>)
 800654c:	429c      	cmp	r4, r3
 800654e:	bf08      	it	eq
 8006550:	68ec      	ldreq	r4, [r5, #12]
 8006552:	e7da      	b.n	800650a <_fflush_r+0x22>
 8006554:	0800680c 	.word	0x0800680c
 8006558:	0800682c 	.word	0x0800682c
 800655c:	080067ec 	.word	0x080067ec

08006560 <_lseek_r>:
 8006560:	b538      	push	{r3, r4, r5, lr}
 8006562:	4d07      	ldr	r5, [pc, #28]	; (8006580 <_lseek_r+0x20>)
 8006564:	4604      	mov	r4, r0
 8006566:	4608      	mov	r0, r1
 8006568:	4611      	mov	r1, r2
 800656a:	2200      	movs	r2, #0
 800656c:	602a      	str	r2, [r5, #0]
 800656e:	461a      	mov	r2, r3
 8006570:	f7fa fbc8 	bl	8000d04 <_lseek>
 8006574:	1c43      	adds	r3, r0, #1
 8006576:	d102      	bne.n	800657e <_lseek_r+0x1e>
 8006578:	682b      	ldr	r3, [r5, #0]
 800657a:	b103      	cbz	r3, 800657e <_lseek_r+0x1e>
 800657c:	6023      	str	r3, [r4, #0]
 800657e:	bd38      	pop	{r3, r4, r5, pc}
 8006580:	200002cc 	.word	0x200002cc

08006584 <__swhatbuf_r>:
 8006584:	b570      	push	{r4, r5, r6, lr}
 8006586:	460e      	mov	r6, r1
 8006588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800658c:	2900      	cmp	r1, #0
 800658e:	b096      	sub	sp, #88	; 0x58
 8006590:	4614      	mov	r4, r2
 8006592:	461d      	mov	r5, r3
 8006594:	da07      	bge.n	80065a6 <__swhatbuf_r+0x22>
 8006596:	2300      	movs	r3, #0
 8006598:	602b      	str	r3, [r5, #0]
 800659a:	89b3      	ldrh	r3, [r6, #12]
 800659c:	061a      	lsls	r2, r3, #24
 800659e:	d410      	bmi.n	80065c2 <__swhatbuf_r+0x3e>
 80065a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065a4:	e00e      	b.n	80065c4 <__swhatbuf_r+0x40>
 80065a6:	466a      	mov	r2, sp
 80065a8:	f000 f8be 	bl	8006728 <_fstat_r>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	dbf2      	blt.n	8006596 <__swhatbuf_r+0x12>
 80065b0:	9a01      	ldr	r2, [sp, #4]
 80065b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80065b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80065ba:	425a      	negs	r2, r3
 80065bc:	415a      	adcs	r2, r3
 80065be:	602a      	str	r2, [r5, #0]
 80065c0:	e7ee      	b.n	80065a0 <__swhatbuf_r+0x1c>
 80065c2:	2340      	movs	r3, #64	; 0x40
 80065c4:	2000      	movs	r0, #0
 80065c6:	6023      	str	r3, [r4, #0]
 80065c8:	b016      	add	sp, #88	; 0x58
 80065ca:	bd70      	pop	{r4, r5, r6, pc}

080065cc <__smakebuf_r>:
 80065cc:	898b      	ldrh	r3, [r1, #12]
 80065ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065d0:	079d      	lsls	r5, r3, #30
 80065d2:	4606      	mov	r6, r0
 80065d4:	460c      	mov	r4, r1
 80065d6:	d507      	bpl.n	80065e8 <__smakebuf_r+0x1c>
 80065d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065dc:	6023      	str	r3, [r4, #0]
 80065de:	6123      	str	r3, [r4, #16]
 80065e0:	2301      	movs	r3, #1
 80065e2:	6163      	str	r3, [r4, #20]
 80065e4:	b002      	add	sp, #8
 80065e6:	bd70      	pop	{r4, r5, r6, pc}
 80065e8:	ab01      	add	r3, sp, #4
 80065ea:	466a      	mov	r2, sp
 80065ec:	f7ff ffca 	bl	8006584 <__swhatbuf_r>
 80065f0:	9900      	ldr	r1, [sp, #0]
 80065f2:	4605      	mov	r5, r0
 80065f4:	4630      	mov	r0, r6
 80065f6:	f7ff fa73 	bl	8005ae0 <_malloc_r>
 80065fa:	b948      	cbnz	r0, 8006610 <__smakebuf_r+0x44>
 80065fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006600:	059a      	lsls	r2, r3, #22
 8006602:	d4ef      	bmi.n	80065e4 <__smakebuf_r+0x18>
 8006604:	f023 0303 	bic.w	r3, r3, #3
 8006608:	f043 0302 	orr.w	r3, r3, #2
 800660c:	81a3      	strh	r3, [r4, #12]
 800660e:	e7e3      	b.n	80065d8 <__smakebuf_r+0xc>
 8006610:	4b0d      	ldr	r3, [pc, #52]	; (8006648 <__smakebuf_r+0x7c>)
 8006612:	62b3      	str	r3, [r6, #40]	; 0x28
 8006614:	89a3      	ldrh	r3, [r4, #12]
 8006616:	6020      	str	r0, [r4, #0]
 8006618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661c:	81a3      	strh	r3, [r4, #12]
 800661e:	9b00      	ldr	r3, [sp, #0]
 8006620:	6163      	str	r3, [r4, #20]
 8006622:	9b01      	ldr	r3, [sp, #4]
 8006624:	6120      	str	r0, [r4, #16]
 8006626:	b15b      	cbz	r3, 8006640 <__smakebuf_r+0x74>
 8006628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800662c:	4630      	mov	r0, r6
 800662e:	f000 f88d 	bl	800674c <_isatty_r>
 8006632:	b128      	cbz	r0, 8006640 <__smakebuf_r+0x74>
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	f023 0303 	bic.w	r3, r3, #3
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	81a3      	strh	r3, [r4, #12]
 8006640:	89a0      	ldrh	r0, [r4, #12]
 8006642:	4305      	orrs	r5, r0
 8006644:	81a5      	strh	r5, [r4, #12]
 8006646:	e7cd      	b.n	80065e4 <__smakebuf_r+0x18>
 8006648:	08005939 	.word	0x08005939

0800664c <__malloc_lock>:
 800664c:	4801      	ldr	r0, [pc, #4]	; (8006654 <__malloc_lock+0x8>)
 800664e:	f7ff ba45 	b.w	8005adc <__retarget_lock_acquire_recursive>
 8006652:	bf00      	nop
 8006654:	200002c4 	.word	0x200002c4

08006658 <__malloc_unlock>:
 8006658:	4801      	ldr	r0, [pc, #4]	; (8006660 <__malloc_unlock+0x8>)
 800665a:	f7ff ba40 	b.w	8005ade <__retarget_lock_release_recursive>
 800665e:	bf00      	nop
 8006660:	200002c4 	.word	0x200002c4

08006664 <_free_r>:
 8006664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006666:	2900      	cmp	r1, #0
 8006668:	d048      	beq.n	80066fc <_free_r+0x98>
 800666a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800666e:	9001      	str	r0, [sp, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	f1a1 0404 	sub.w	r4, r1, #4
 8006676:	bfb8      	it	lt
 8006678:	18e4      	addlt	r4, r4, r3
 800667a:	f7ff ffe7 	bl	800664c <__malloc_lock>
 800667e:	4a20      	ldr	r2, [pc, #128]	; (8006700 <_free_r+0x9c>)
 8006680:	9801      	ldr	r0, [sp, #4]
 8006682:	6813      	ldr	r3, [r2, #0]
 8006684:	4615      	mov	r5, r2
 8006686:	b933      	cbnz	r3, 8006696 <_free_r+0x32>
 8006688:	6063      	str	r3, [r4, #4]
 800668a:	6014      	str	r4, [r2, #0]
 800668c:	b003      	add	sp, #12
 800668e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006692:	f7ff bfe1 	b.w	8006658 <__malloc_unlock>
 8006696:	42a3      	cmp	r3, r4
 8006698:	d90b      	bls.n	80066b2 <_free_r+0x4e>
 800669a:	6821      	ldr	r1, [r4, #0]
 800669c:	1862      	adds	r2, r4, r1
 800669e:	4293      	cmp	r3, r2
 80066a0:	bf04      	itt	eq
 80066a2:	681a      	ldreq	r2, [r3, #0]
 80066a4:	685b      	ldreq	r3, [r3, #4]
 80066a6:	6063      	str	r3, [r4, #4]
 80066a8:	bf04      	itt	eq
 80066aa:	1852      	addeq	r2, r2, r1
 80066ac:	6022      	streq	r2, [r4, #0]
 80066ae:	602c      	str	r4, [r5, #0]
 80066b0:	e7ec      	b.n	800668c <_free_r+0x28>
 80066b2:	461a      	mov	r2, r3
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	b10b      	cbz	r3, 80066bc <_free_r+0x58>
 80066b8:	42a3      	cmp	r3, r4
 80066ba:	d9fa      	bls.n	80066b2 <_free_r+0x4e>
 80066bc:	6811      	ldr	r1, [r2, #0]
 80066be:	1855      	adds	r5, r2, r1
 80066c0:	42a5      	cmp	r5, r4
 80066c2:	d10b      	bne.n	80066dc <_free_r+0x78>
 80066c4:	6824      	ldr	r4, [r4, #0]
 80066c6:	4421      	add	r1, r4
 80066c8:	1854      	adds	r4, r2, r1
 80066ca:	42a3      	cmp	r3, r4
 80066cc:	6011      	str	r1, [r2, #0]
 80066ce:	d1dd      	bne.n	800668c <_free_r+0x28>
 80066d0:	681c      	ldr	r4, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	6053      	str	r3, [r2, #4]
 80066d6:	4421      	add	r1, r4
 80066d8:	6011      	str	r1, [r2, #0]
 80066da:	e7d7      	b.n	800668c <_free_r+0x28>
 80066dc:	d902      	bls.n	80066e4 <_free_r+0x80>
 80066de:	230c      	movs	r3, #12
 80066e0:	6003      	str	r3, [r0, #0]
 80066e2:	e7d3      	b.n	800668c <_free_r+0x28>
 80066e4:	6825      	ldr	r5, [r4, #0]
 80066e6:	1961      	adds	r1, r4, r5
 80066e8:	428b      	cmp	r3, r1
 80066ea:	bf04      	itt	eq
 80066ec:	6819      	ldreq	r1, [r3, #0]
 80066ee:	685b      	ldreq	r3, [r3, #4]
 80066f0:	6063      	str	r3, [r4, #4]
 80066f2:	bf04      	itt	eq
 80066f4:	1949      	addeq	r1, r1, r5
 80066f6:	6021      	streq	r1, [r4, #0]
 80066f8:	6054      	str	r4, [r2, #4]
 80066fa:	e7c7      	b.n	800668c <_free_r+0x28>
 80066fc:	b003      	add	sp, #12
 80066fe:	bd30      	pop	{r4, r5, pc}
 8006700:	2000009c 	.word	0x2000009c

08006704 <_read_r>:
 8006704:	b538      	push	{r3, r4, r5, lr}
 8006706:	4d07      	ldr	r5, [pc, #28]	; (8006724 <_read_r+0x20>)
 8006708:	4604      	mov	r4, r0
 800670a:	4608      	mov	r0, r1
 800670c:	4611      	mov	r1, r2
 800670e:	2200      	movs	r2, #0
 8006710:	602a      	str	r2, [r5, #0]
 8006712:	461a      	mov	r2, r3
 8006714:	f7fa fab2 	bl	8000c7c <_read>
 8006718:	1c43      	adds	r3, r0, #1
 800671a:	d102      	bne.n	8006722 <_read_r+0x1e>
 800671c:	682b      	ldr	r3, [r5, #0]
 800671e:	b103      	cbz	r3, 8006722 <_read_r+0x1e>
 8006720:	6023      	str	r3, [r4, #0]
 8006722:	bd38      	pop	{r3, r4, r5, pc}
 8006724:	200002cc 	.word	0x200002cc

08006728 <_fstat_r>:
 8006728:	b538      	push	{r3, r4, r5, lr}
 800672a:	4d07      	ldr	r5, [pc, #28]	; (8006748 <_fstat_r+0x20>)
 800672c:	2300      	movs	r3, #0
 800672e:	4604      	mov	r4, r0
 8006730:	4608      	mov	r0, r1
 8006732:	4611      	mov	r1, r2
 8006734:	602b      	str	r3, [r5, #0]
 8006736:	f7fa faca 	bl	8000cce <_fstat>
 800673a:	1c43      	adds	r3, r0, #1
 800673c:	d102      	bne.n	8006744 <_fstat_r+0x1c>
 800673e:	682b      	ldr	r3, [r5, #0]
 8006740:	b103      	cbz	r3, 8006744 <_fstat_r+0x1c>
 8006742:	6023      	str	r3, [r4, #0]
 8006744:	bd38      	pop	{r3, r4, r5, pc}
 8006746:	bf00      	nop
 8006748:	200002cc 	.word	0x200002cc

0800674c <_isatty_r>:
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	4d06      	ldr	r5, [pc, #24]	; (8006768 <_isatty_r+0x1c>)
 8006750:	2300      	movs	r3, #0
 8006752:	4604      	mov	r4, r0
 8006754:	4608      	mov	r0, r1
 8006756:	602b      	str	r3, [r5, #0]
 8006758:	f7fa fac9 	bl	8000cee <_isatty>
 800675c:	1c43      	adds	r3, r0, #1
 800675e:	d102      	bne.n	8006766 <_isatty_r+0x1a>
 8006760:	682b      	ldr	r3, [r5, #0]
 8006762:	b103      	cbz	r3, 8006766 <_isatty_r+0x1a>
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	bd38      	pop	{r3, r4, r5, pc}
 8006768:	200002cc 	.word	0x200002cc

0800676c <_init>:
 800676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676e:	bf00      	nop
 8006770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006772:	bc08      	pop	{r3}
 8006774:	469e      	mov	lr, r3
 8006776:	4770      	bx	lr

08006778 <_fini>:
 8006778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677a:	bf00      	nop
 800677c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677e:	bc08      	pop	{r3}
 8006780:	469e      	mov	lr, r3
 8006782:	4770      	bx	lr
